version: '3'

vars:
  BINARY_NAME: qasm
  BUILD_DIR: bin
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "v0.1.0-dev"
  COMMIT:
    sh: git rev-parse --short HEAD 2>/dev/null || echo "unknown"
  BUILD_DATE:
    sh: date -Iseconds
  ANTLR_VERSION: 4.13.1
  VSCODE_VERSION:
    sh: cd vscode-qasm && node -p "require('./package.json').version" 2>/dev/null || echo "0.1.4"

env:
  CGO_ENABLED: 0

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Quick aliases for common development tasks
  dev:
    desc: 🚀 Quick development mode (alias for vscode:dev:fast)
    cmds:
      - task vscode:dev:fast

  debug:
    desc: 🐛 Quick debug setup (alias for vscode:debug:extension:fast)
    cmds:
      - task vscode:debug:extension:fast

  hot:
    desc: 🔥 Hot reload (alias for vscode:hot-reload)
    cmds:
      - task vscode:hot-reload

  help:dev:
    desc: 📚 Show development workflow help
    silent: true
    cmds:
      - echo "🛠️  Development Workflow Help"
      - echo ""
      - echo "📋 Quick Commands (fast development):"
      - echo "   task dev      - Build & install extension (current platform only)"
      - echo "   task debug    - Setup extension debugging (F5 ready, fast)"
      - echo "   task hot      - Quick rebuild for minor changes"
      - echo ""
      - echo "🚀 Full Platform Commands:"
      - echo "   task vscode:dev           - Build & install (all platforms)"
      - echo "   task vscode:debug:extension - Debug (all platforms)"
      - echo ""
      - echo "🐛 Debug Modes:"
      - echo "   task vscode:debug:extension:fast - Debug extension (current platform)"
      - echo "   task vscode:debug:lsp            - Debug LSP server (Go)"
      - echo "   task vscode:debug:full           - Debug both together"
      - echo ""
      - echo "🔄 Development Cycle:"
      - echo "   1. Make changes"
      - echo "   2. Run 'task hot' (quick rebuild)"
      - echo "   3. If debugging - Reload extension host window"
      - echo "   4. If installed - Run 'task dev' to reinstall"
      - echo ""
      - echo "🚨 Troubleshooting:"
      - echo "   task vscode:troubleshoot  - Diagnose common issues"
      - echo "   task vscode:logs          - How to view logs"

  # Parser Generation
  gen:
    desc: Generate parser code from ANTLR grammar files
    cmds:
      - mkdir -p parser/grammar
      - curl -s -o parser/grammar/qasm3Lexer.g4 https://raw.githubusercontent.com/orangekame3/openqasm/refs/heads/feature/comment-preservation/source/grammar/qasm3Lexer.g4
      - curl -s -o parser/grammar/qasm3Parser.g4 https://raw.githubusercontent.com/orangekame3/openqasm/refs/heads/feature/comment-preservation/source/grammar/qasm3Parser.g4
      - rm -rf parser/gen
      - mkdir -p parser/gen
      - cd parser/grammar && antlr4 -Dlanguage=Go -package parser qasm3Lexer.g4
      - cd parser/grammar && antlr4 -Dlanguage=Go -visitor -listener -package parser qasm3Parser.g4
      - mv parser/grammar/*.go parser/gen/
      - rm -f parser/gen/*.interp parser/gen/*.tokens 2>/dev/null || true
      - task: fix-antlr-imports

  fix-antlr-imports:
    desc: Fix ANTLR import paths for compatibility
    internal: true
    cmds:
      - |
        find parser/gen -name "*.go" -type f -exec sed -i.bak 's|github.com/antlr/antlr4/runtime/Go/antlr|github.com/antlr4-go/antlr/v4|g' {} \;
      - find parser/gen -name "*.bak" -delete

  # Build tasks
  build:
    desc: Build the application
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - go build -ldflags "-X 'main.Version={{.VERSION}}' -X 'main.GitCommit={{.COMMIT}}' -X 'main.BuildDate={{.BUILD_DATE}}'" -o {{.BUILD_DIR}}/{{.BINARY_NAME}} ./cmd/qasm
      - go build -o {{.BUILD_DIR}}/qasmlsp ./cmd/qasmlsp
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"
      - "{{.BUILD_DIR}}/qasmlsp"

  build:quick:
    desc: Quick build without parser generation (for development)
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - go build -ldflags "-X 'main.Version={{.VERSION}}' -X 'main.GitCommit={{.COMMIT}}' -X 'main.BuildDate={{.BUILD_DATE}}'" -o {{.BUILD_DIR}}/{{.BINARY_NAME}} ./cmd/qasm
      - go build -o {{.BUILD_DIR}}/qasmlsp ./cmd/qasmlsp

  build:current:
    desc: Build LSP server for current platform
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - |
        platform=$(go env GOOS)
        arch=$(go env GOARCH)
        if [ "$arch" = "amd64" ] && [ "$platform" = "windows" ]; then
          arch="amd64"
          platform="win32"
          ext=".exe"
        elif [ "$arch" = "arm64" ] && [ "$platform" = "windows" ]; then
          arch="arm64"
          platform="win32"
          ext=".exe"
        else
          ext=""
        fi
        binary_name="qasmlsp_${platform}_${arch}${ext}"
        echo "Building for current platform: $binary_name"
        go build -o {{.BUILD_DIR}}/$binary_name ./cmd/qasmlsp

  build:all:
    desc: Build for all platforms
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - task: build:linux
      - task: build:darwin
      - task: build:windows

  build:linux:
    desc: Build for Linux (amd64 and arm64)
    cmds:
      - task: build:linux:amd64
      - task: build:linux:arm64

  build:linux:amd64:
    env:
      GOOS: linux
      GOARCH: amd64
    cmds:
      - go build -o {{.BUILD_DIR}}/qasmlsp_linux_amd64 ./cmd/qasmlsp

  build:linux:arm64:
    env:
      GOOS: linux
      GOARCH: arm64
    cmds:
      - go build -o {{.BUILD_DIR}}/qasmlsp_linux_arm64 ./cmd/qasmlsp

  build:darwin:
    desc: Build for macOS (amd64 and arm64)
    cmds:
      - task: build:darwin:amd64
      - task: build:darwin:arm64

  build:darwin:amd64:
    env:
      GOOS: darwin
      GOARCH: amd64
    cmds:
      - go build -o {{.BUILD_DIR}}/qasmlsp_darwin_amd64 ./cmd/qasmlsp

  build:darwin:arm64:
    env:
      GOOS: darwin
      GOARCH: arm64
    cmds:
      - go build -o {{.BUILD_DIR}}/qasmlsp_darwin_arm64 ./cmd/qasmlsp

  build:windows:
    desc: Build for Windows (amd64 and arm64)
    cmds:
      - task: build:windows:amd64
      - task: build:windows:arm64

  build:windows:amd64:
    env:
      GOOS: windows
      GOARCH: amd64
    cmds:
      - go build -o {{.BUILD_DIR}}/qasmlsp_win32_amd64.exe ./cmd/qasmlsp

  build:windows:arm64:
    env:
      GOOS: windows
      GOARCH: arm64
    cmds:
      - go build -o {{.BUILD_DIR}}/qasmlsp_win32_arm64.exe ./cmd/qasmlsp
  build:wasm:
    desc: Build WebAssembly version for playground
    env:
      GOOS: js
      GOARCH: wasm
    cmds:
      - mkdir -p {{.BUILD_DIR}}/wasm
      - go build -o {{.BUILD_DIR}}/wasm/qasmtools.wasm ./cmd/wasm
      - cp $(go env GOROOT)/lib/wasm/wasm_exec.js {{.BUILD_DIR}}/wasm/

  # Development tasks
  dev:
    desc: Run in development mode with live reload
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} {{.CLI_ARGS}}

  install:
    desc: Install the binary to $GOPATH/bin
    cmds:
      - go install -ldflags "-X 'main.Version={{.VERSION}}' -X 'main.GitCommit={{.COMMIT}}' -X 'main.BuildDate={{.BUILD_DATE}}'" ./cmd/qasm

  # Testing tasks
  test:
    desc: Run tests
    cmds:
      - go test -v ./cmd/qasm ./formatter ./highlight ./lint

  test:coverage:
    desc: Run tests with coverage
    cmds:
      - go test -v -coverprofile=coverage.out ./cmd/qasm ./formatter ./highlight ./lint
      - go tool cover -html=coverage.out -o coverage.html

  test:race:
    desc: Run tests with race detection
    cmds:
      - go test -v -race ./cmd/qasm ./formatter ./highlight ./lint

  bench:
    desc: Run benchmarks
    cmds:
      - go test -v -bench=. -benchmem ./cmd/qasm ./formatter ./highlight ./lint

  test:wasm:
    desc: Test WASM functionality (requires WASM runtime)
    env:
      GOOS: js
      GOARCH: wasm
    cmds:
      - echo "⚠️  WASM tests require a JavaScript runtime with WASM support"
      - echo "🔍 WASM build verification:"
      - go build -o /tmp/qasmtools.wasm ./cmd/wasm
      - echo "✅ WASM build successful"

  # Code quality tasks
  lint:
    desc: Run linters
    cmds:
      - go fmt ./cmd/qasm ./cmd/qasmlsp ./cmd/tools ./formatter ./highlight ./lint ./parser
      - go vet ./cmd/qasm ./cmd/qasmlsp ./cmd/tools ./formatter ./highlight ./lint ./parser
      - task: lint:golangci

  lint:golangci:
    desc: Run golangci-lint
    cmds:
      - golangci-lint run
    status:
      - command -v golangci-lint >/dev/null 2>&1

  lint:install:
    desc: Install golangci-lint
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

  fmt:
    desc: Format code
    cmds:
      - go fmt ./...
      - gofumpt -w .
    status:
      - command -v gofumpt >/dev/null 2>&1

  fmt:install:
    desc: Install gofumpt
    cmds:
      - go install mvdan.cc/gofumpt@latest

  # Documentation tasks
  docs:generate:
    desc: Generate rule documentation markdown files
    cmds:
      - go run ./cmd/tools/gendocs.go -output docs/rules
      - echo "📚 Rule documentation generated in docs/rules/"
      - echo "💡 Files generated:"
      - ls -1 docs/rules/ | sed 's/^/   - /'

  docs:clean:
    desc: Clean generated documentation
    cmds:
      - rm -rf docs/rules
      - echo "🧹 Generated documentation cleaned"

  # Dependency management
  deps:
    desc: Download dependencies
    cmds:
      - go mod download

  deps:tidy:
    desc: Tidy dependencies
    cmds:
      - go mod tidy

  deps:verify:
    desc: Verify dependencies
    cmds:
      - go mod verify

  deps:update:
    desc: Update dependencies
    cmds:
      - go get -u ./...
      - go mod tidy

  # Example tasks
  example:create:
    desc: Create example QASM files
    cmds:
      - mkdir -p examples
      - |
        cat > examples/bell_state.qasm << 'EOF'
        OPENQASM 3.0;
        include "stdgates.qasm";

        qubit[2] q;
        bit[2] c;

        h q[0];
        cx q[0], q[1];
        measure q -> c;
        EOF
      - |
        cat > examples/grover.qasm << 'EOF'
        OPENQASM 3.0;
        include "stdgates.qasm";

        qubit[3] q;
        bit[3] c;

        // Initialize superposition
        h q[0];
        h q[1];
        h q[2];

        // Oracle
        cz q[0], q[2];
        cz q[1], q[2];

        // Diffuser
        h q[0];
        h q[1];
        h q[2];
        x q[0];
        x q[1];
        x q[2];
        ccx q[0], q[1], q[2];
        x q[0];
        x q[1];
        x q[2];
        h q[0];
        h q[1];
        h q[2];

        measure q -> c;
        EOF

  # Security tasks
  security:
    desc: Run security checks
    cmds:
      - |
        if command -v gosec &> /dev/null; then
          gosec ./...
        else
          echo "gosec not found. Install with: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest"
        fi
      - |
        if command -v govulncheck &> /dev/null; then
          govulncheck ./...
        else
          echo "govulncheck not found. Install with: go install golang.org/x/vuln/cmd/govulncheck@latest"
        fi

  # CI/CD tasks
  ci:
    desc: Run CI pipeline locally
    cmds:
      - task: deps:verify
      - task: lint
      - task: test:race
      - task: test:coverage
      - task: build:all
      - task: vscode:package
      - task: security

  # Git hooks
  pre-commit:
    desc: Run pre-commit checks
    cmds:
      - task: fmt
      - task: lint
      - task: test

  # Development environment setup
  setup:
    desc: Setup development environment
    cmds:
      - task: deps
      - task: lint:install
      - task: fmt:install
      - task: example:create
      - echo "Development environment setup complete!"

  # Cleanup tasks
  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - rm -f coverage.out coverage.html
      - task: vscode:clean

  clean:all:
    desc: Clean all generated files
    cmds:
      - task: clean
      - task: vscode:clean
      - go clean -cache -testcache -modcache

  # VSCode Extension tasks
  vscode:package:
    desc: Package VSCode extension
    deps: [build:all]
    dir: vscode-qasm
    cmds:
      - mkdir -p bin
      - cp ../bin/qasmlsp_linux_amd64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_linux_arm64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_darwin_amd64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_darwin_arm64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_win32_amd64.exe bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_win32_arm64.exe bin/ 2>/dev/null || true
      - npm install
      - npx vsce package

  vscode:install:
    desc: Install VSCode extension locally
    deps: [vscode:package]
    dir: vscode-qasm
    cmds:
      - code --uninstall-extension orangekame3.vscode-qasm || true
      - code --install-extension vscode-qasm-{{.VSCODE_VERSION}}.vsix --force

  vscode:publish:
    desc: Publish VSCode extension to marketplace
    deps: [vscode:package]
    dir: vscode-qasm
    cmds:
      - npx vsce publish
      - task: clean

  vscode:publish:test:
    desc: Test publish without actually publishing
    deps: [vscode:package]
    dir: vscode-qasm
    cmds:
      - npx vsce publish --dry-run

  vscode:clean:
    desc: Clean VSCode extension build artifacts
    dir: vscode-qasm
    cmds:
      - rm -f *.vsix
      - rm -rf bin
      - rm -rf node_modules

  vscode:setup:
    desc: Setup VSCode extension development environment
    dir: vscode-qasm
    cmds:
      - npm install
      - npm install -g @vscode/vsce

  vscode:dev:
    desc: Run VSCode extension in development mode
    deps: [vscode:package]
    dir: vscode-qasm
    cmds:
      - code --extensionDevelopmentPath=. --new-window

  vscode:inspect:
    desc: Show VSCode extension package contents
    dir: vscode-qasm
    cmds:
      - npx vsce ls --tree

  # VSCode Extension Debug Tasks (Version-agnostic)
  vscode:debug:extension:
    desc: Debug VSCode extension only (activate extension debugging)
    deps: [build:all]
    dir: vscode-qasm
    cmds:
      - mkdir -p bin
      - cp ../bin/qasmlsp_linux_amd64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_linux_arm64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_darwin_amd64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_darwin_arm64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_win32_amd64.exe bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_win32_arm64.exe bin/ 2>/dev/null || true
      - npm run build
      - echo "🚀 Extension ready for debugging"
      - echo "📋 Next steps:"
      - echo "   1. Press F5"
      - echo "   2. Select 'Launch Extension'"
      - echo "   3. New VSCode window will open with extension loaded"

  vscode:debug:extension:fast:
    desc: Debug VSCode extension (fast - current platform only)
    deps: [build:current]
    dir: vscode-qasm
    cmds:
      - mkdir -p bin
      - |
        platform=$(go env GOOS)
        arch=$(go env GOARCH)
        if [ "$arch" = "amd64" ] && [ "$platform" = "windows" ]; then
          arch="amd64"
          platform="win32"
          ext=".exe"
        elif [ "$arch" = "arm64" ] && [ "$platform" = "windows" ]; then
          arch="arm64"
          platform="win32"
          ext=".exe"
        else
          ext=""
        fi
        binary_name="qasmlsp_${platform}_${arch}${ext}"
        echo "Copying binary: $binary_name"
        cp ../bin/$binary_name bin/
      - npm run build
      - echo "🚀 Extension ready for debugging (fast mode)"
      - echo "📋 Next steps:"
      - echo "   1. Press F5"
      - echo "   2. Select 'Launch Extension'"
      - echo "   3. New VSCode window will open with extension loaded"

  vscode:debug:lsp:
    desc: Debug LSP server only (for LSP server debugging)
    deps: [build]
    cmds:
      - echo "🚀 LSP server built and ready for debugging"
      - echo "📋 Next steps:"
      - echo "   1. Press F5"
      - echo "   2. Select 'Debug LSP Server'"
      - echo "   3. Open another VSCode window"
      - echo "   4. Open/create a .qasm file to trigger LSP communication"

  vscode:debug:full:
    desc: Setup for full debugging (Extension + LSP Server)
    deps: [vscode:debug:extension]
    cmds:
      - echo "🚀 Full debug setup complete"
      - echo "📋 Debug options:"
      - echo "   Option A - Combined debugging:"
      - echo "     1. Press F5"
      - echo "     2. Select 'Extension + LSP Server'"
      - echo ""
      - echo "   Option B - Separate debugging:"
      - echo "     1. 'Launch Extension' for extension code"
      - echo "     2. 'Debug LSP Server' for LSP code"

  vscode:dev:
    desc: Quick development mode (build + install without version concerns)
    deps: [build:all]
    dir: vscode-qasm
    cmds:
      - mkdir -p bin
      - cp ../bin/qasmlsp_linux_amd64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_linux_arm64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_darwin_amd64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_darwin_arm64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_win32_amd64.exe bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_win32_arm64.exe bin/ 2>/dev/null || true
      - npm run build
      - npm run package
      - |
        # Find the generated .vsix file (version-agnostic)
        VSIX_FILE=$(ls vscode-qasm-*.vsix 2>/dev/null | head -1)
        if [ -n "$VSIX_FILE" ]; then
          echo "📦 Found extension package: $VSIX_FILE"
          code --uninstall-extension orangekame3.vscode-qasm >/dev/null 2>&1 || true
          code --install-extension "$VSIX_FILE" --force
          echo "✅ Extension installed successfully"
          echo "🔄 Restart VSCode to see changes"
        else
          echo "❌ No .vsix file found"
          exit 1
        fi

  vscode:dev:fast:
    desc: Fast development mode (build only current platform)
    deps: [build:current]
    dir: vscode-qasm
    cmds:
      - mkdir -p bin
      - |
        platform=$(go env GOOS)
        arch=$(go env GOARCH)
        if [ "$arch" = "amd64" ] && [ "$platform" = "windows" ]; then
          arch="amd64"
          platform="win32"
          ext=".exe"
        elif [ "$arch" = "arm64" ] && [ "$platform" = "windows" ]; then
          arch="arm64"
          platform="win32"
          ext=".exe"
        else
          ext=""
        fi
        binary_name="qasmlsp_${platform}_${arch}${ext}"
        echo "Copying binary: $binary_name"
        cp ../bin/$binary_name bin/
      - npm run build
      - npm run package
      - |
        # Find the generated .vsix file (version-agnostic)
        VSIX_FILE=$(ls vscode-qasm-*.vsix 2>/dev/null | head -1)
        if [ -n "$VSIX_FILE" ]; then
          echo "📦 Found extension package: $VSIX_FILE"
          code --uninstall-extension orangekame3.vscode-qasm >/dev/null 2>&1 || true
          code --install-extension "$VSIX_FILE" --force
          echo "✅ Extension installed successfully"
          echo "🔄 Restart VSCode to see changes"
        else
          echo "❌ No .vsix file found"
          exit 1
        fi

  vscode:hot-reload:
    desc: Hot reload for rapid development (minimal steps)
    deps: [build:all]
    dir: vscode-qasm
    cmds:
      - mkdir -p bin
      - cp ../bin/qasmlsp_linux_amd64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_linux_arm64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_darwin_amd64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_darwin_arm64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_win32_amd64.exe bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_win32_arm64.exe bin/ 2>/dev/null || true
      - npm run build --silent
      - echo "🔥 Hot reload complete"
      - echo "💡 If using F5 debug mode, just reload the extension host window"
      - echo "💡 If using installed extension, run 'task vscode:dev' to reinstall"

  vscode:test:format:
    desc: Quick test formatting functionality
    deps: [vscode:install]
    cmds:
      - echo "Testing QASM formatting functionality..."
      - |
        cat > test_format_temp.qasm << 'EOF'
        OPENQASM 3.0;
        include "stdgates.inc";
        qubit[2]q;bit[2]c;
        h q[0];cx q[0],q[1];
        c[0]=measure q[0];c[1]=measure q[1];
        EOF
      - echo "1. Open test_format_temp.qasm in VSCode"
      - echo "2. Press Shift+Alt+F (or Shift+Option+F on Mac) to format"
      - echo "3. Check 'View → Output → QASM Extension' for logs"
      - echo "4. Verify formatting was applied correctly"

  vscode:logs:
    desc: Show VSCode extension logs
    silent: true
    cmds:
      - echo "To view extension logs:"
      - echo "1. Open VSCode"
      - echo "2. Go to 'View → Output'"
      - echo "3. Select 'QASM Extension' from dropdown"
      - echo "4. Look for activation and formatting logs"

  vscode:quick-cycle:
    desc: Quick development cycle (build → package → install)
    deps: [build:all]
    dir: vscode-qasm
    cmds:
      - mkdir -p bin
      - cp ../bin/qasmlsp_linux_amd64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_linux_arm64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_darwin_amd64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_darwin_arm64 bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_win32_amd64.exe bin/ 2>/dev/null || true
      - cp ../bin/qasmlsp_win32_arm64.exe bin/ 2>/dev/null || true
      - npm run build
      - npm run package
      - code --uninstall-extension orangekame3.vscode-qasm || true
      - code --install-extension vscode-qasm-{{.VSCODE_VERSION}}.vsix --force
      - echo "Extension updated! Restart VSCode to see changes"

  vscode:troubleshoot:
    desc: Troubleshoot VSCode extension issues
    silent: true
    cmds:
      - echo "=== VSCode Extension Troubleshooting ==="
      - echo ""
      - echo "1. Check if extension is installed:"
      - code --list-extensions | grep -i qasm || echo "   ❌ Extension not found"
      - echo ""
      - echo "2. Check extension logs:"
      - echo "   - Open VSCode → View → Output → QASM Extension"
      - echo ""
      - echo "3. Check Developer Tools for errors:"
      - echo "   - Help → Toggle Developer Tools → Console tab"
      - echo ""
      - echo "4. Verify LSP server binary:"
      - ls -la vscode-qasm/bin/qasmlsp 2>/dev/null && echo "   ✅ LSP binary exists" || echo "   ❌ LSP binary missing"
      - echo ""
      - echo "5. Test with sample file:"
      - echo "   task vscode:test:format"

  # Release tasks
  release:prepare:
    desc: Prepare release (build all, package extension)
    cmds:
      - task: clean:all
      - task: build:all
      - task: vscode:package
      - echo "Release artifacts prepared in bin/ and vscode-qasm/"

  release:github:
    desc: Create GitHub release with artifacts
    deps: [release:prepare]
    cmds:
      - |
        if ! command -v gh &> /dev/null; then
          echo "GitHub CLI (gh) not found. Please install it first."
          exit 1
        fi
      - |
        echo "Creating GitHub release {{.VERSION}}"
        gh release create {{.VERSION}} \
          --title "Release {{.VERSION}}" \
          --notes "Release {{.VERSION}}" \
          bin/qasm-* \
          vscode-qasm/vscode-qasm-{{.VSCODE_VERSION}}.vsix

  # Version management
  version:
    desc: Show version information
    silent: true
    cmds:
      - echo "=== Version Information ==="
      - echo "CLI Version{{":"}} {{.VERSION}}"
      - echo "VSCode Extension Version{{":"}} {{.VSCODE_VERSION}}"
      - echo "Git Commit{{":"}} {{.COMMIT}}"
      - echo "Build Date{{":"}} {{.BUILD_DATE}}"
      - echo "Go Version{{":"}} $(go version)"
      - echo "Node Version{{":"}} $(node --version 2>/dev/null || echo 'not found')"
      - echo "NPM Version{{":"}} $(npm --version 2>/dev/null || echo 'not found')"

  version:bump:patch:
    desc: "Bump VSCode extension patch version (e.g., 0.1.4 → 0.1.5)"
    dir: vscode-qasm
    cmds:
      - npm version patch --no-git-tag-version
      - echo "VSCode extension version bumped to $(node -p "require('./package.json').version")"
      - echo "Don't forget to git commit the version change!"

  version:bump:minor:
    desc: "Bump VSCode extension minor version (e.g., 0.1.4 → 0.2.0)"
    dir: vscode-qasm
    cmds:
      - npm version minor --no-git-tag-version
      - echo "VSCode extension version bumped to $(node -p "require('./package.json').version")"
      - echo "Don't forget to git commit the version change!"

  version:bump:major:
    desc: "Bump VSCode extension major version (e.g., 0.1.4 → 1.0.0)"
    dir: vscode-qasm
    cmds:
      - npm version major --no-git-tag-version
      - echo "VSCode extension version bumped to $(node -p "require('./package.json').version")"
      - echo "Don't forget to git commit the version change!"

  version:set:
    desc: "Set specific version for VSCode extension (usage: task version:set NEW_VERSION=1.2.3)"
    dir: vscode-qasm
    cmds:
      - |
        if [ -z "{{.NEW_VERSION}}" ]; then
          echo "Usage: task version:set NEW_VERSION=1.2.3"
          exit 1
        fi
      - npm version {{.NEW_VERSION}} --no-git-tag-version
      - echo "VSCode extension version set to {{.NEW_VERSION}}"
      - echo "Don't forget to git commit the version change!"

  # Playground tasks
  playground:setup:
    desc: Setup playground development environment
    dir: playground
    cmds:
      - npm install
      - echo "Playground setup complete!"

  playground:dev:
    desc: Start playground development server
    deps: [build:wasm]
    dir: playground
    cmds:
      - mkdir -p public/wasm public/qasmtools/wasm
      - cp ../bin/wasm/qasmtools.wasm public/wasm/
      - cp ../bin/wasm/qasmtools.wasm public/qasmtools/wasm/
      - cp ../bin/wasm/wasm_exec.js public/wasm/
      - npm run dev

  playground:build:
    desc: Build playground for production
    deps: [build:wasm]
    dir: playground
    cmds:
      - mkdir -p public/wasm public/qasmtools/wasm
      - cp ../bin/wasm/qasmtools.wasm public/wasm/
      - cp ../bin/wasm/qasmtools.wasm public/qasmtools/wasm/
      - cp ../bin/wasm/wasm_exec.js public/wasm/
      - npm run build

  playground:clean:
    desc: Clean playground build artifacts
    dir: playground
    cmds:
      - rm -rf .next out node_modules
      - rm -rf public/wasm

  demo:generate:
    desc: Generate CLI demo GIF using vhs
    cmds:
      - vhs img/demo.tape -o img/demo.gif
