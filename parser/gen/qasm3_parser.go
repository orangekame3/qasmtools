// Code generated from qasm3Parser.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser // qasm3Parser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type qasm3Parser struct {
	*antlr.BaseParser
}

var Qasm3ParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func qasm3parserParserInit() {
	staticData := &Qasm3ParserParserStaticData
	staticData.LiteralNames = []string{
		"", "'OPENQASM'", "'include'", "'defcalgrammar'", "'def'", "'cal'",
		"'defcal'", "'gate'", "'extern'", "'box'", "'let'", "'break'", "'continue'",
		"'if'", "'else'", "'end'", "'return'", "'for'", "'while'", "'in'", "'switch'",
		"'case'", "'default'", "'nop'", "", "", "'input'", "'output'", "'const'",
		"'readonly'", "'mutable'", "'qreg'", "'qubit'", "'creg'", "'bool'",
		"'bit'", "'int'", "'uint'", "'float'", "'angle'", "'complex'", "'array'",
		"'void'", "'duration'", "'stretch'", "'gphase'", "'inv'", "'pow'", "'ctrl'",
		"'negctrl'", "'#dim'", "'durationof'", "'delay'", "'reset'", "'measure'",
		"'barrier'", "", "'['", "']'", "'{'", "'}'", "'('", "')'", "':'", "';'",
		"'.'", "','", "'='", "'->'", "'+'", "'++'", "'-'", "'*'", "'**'", "'/'",
		"'%'", "'|'", "'||'", "'&'", "'&&'", "'^'", "'@'", "'~'", "'!'", "",
		"", "", "", "'im'",
	}
	staticData.SymbolicNames = []string{
		"", "OPENQASM", "INCLUDE", "DEFCALGRAMMAR", "DEF", "CAL", "DEFCAL",
		"GATE", "EXTERN", "BOX", "LET", "BREAK", "CONTINUE", "IF", "ELSE", "END",
		"RETURN", "FOR", "WHILE", "IN", "SWITCH", "CASE", "DEFAULT", "NOP",
		"PRAGMA", "AnnotationKeyword", "INPUT", "OUTPUT", "CONST", "READONLY",
		"MUTABLE", "QREG", "QUBIT", "CREG", "BOOL", "BIT", "INT", "UINT", "FLOAT",
		"ANGLE", "COMPLEX", "ARRAY", "VOID", "DURATION", "STRETCH", "GPHASE",
		"INV", "POW", "CTRL", "NEGCTRL", "DIM", "DURATIONOF", "DELAY", "RESET",
		"MEASURE", "BARRIER", "BooleanLiteral", "LBRACKET", "RBRACKET", "LBRACE",
		"RBRACE", "LPAREN", "RPAREN", "COLON", "SEMICOLON", "DOT", "COMMA",
		"EQUALS", "ARROW", "PLUS", "DOUBLE_PLUS", "MINUS", "ASTERISK", "DOUBLE_ASTERISK",
		"SLASH", "PERCENT", "PIPE", "DOUBLE_PIPE", "AMPERSAND", "DOUBLE_AMPERSAND",
		"CARET", "AT", "TILDE", "EXCLAMATION_POINT", "EqualityOperator", "CompoundAssignmentOperator",
		"ComparisonOperator", "BitshiftOperator", "IMAG", "ImaginaryLiteral",
		"BinaryIntegerLiteral", "OctalIntegerLiteral", "DecimalIntegerLiteral",
		"HexIntegerLiteral", "Identifier", "HardwareQubit", "FloatLiteral",
		"TimingLiteral", "BitstringLiteral", "Whitespace", "Newline", "LineComment",
		"BlockComment", "VERSION_IDENTIFER_WHITESPACE", "VersionSpecifier",
		"ARBITRARY_STRING_WHITESPACE", "StringLiteral", "EAT_INITIAL_SPACE",
		"EAT_LINE_END", "RemainingLineContent", "CAL_PRELUDE_WHITESPACE", "CAL_PRELUDE_COMMENT",
		"DEFCAL_PRELUDE_WHITESPACE", "DEFCAL_PRELUDE_COMMENT", "CalibrationBlock",
	}
	staticData.RuleNames = []string{
		"program", "version", "statement", "annotation", "scope", "pragma",
		"statementOrScope", "calibrationGrammarStatement", "includeStatement",
		"breakStatement", "continueStatement", "endStatement", "forStatement",
		"ifStatement", "returnStatement", "whileStatement", "switchStatement",
		"switchCaseItem", "barrierStatement", "boxStatement", "delayStatement",
		"nopStatement", "gateCallStatement", "measureArrowAssignmentStatement",
		"resetStatement", "aliasDeclarationStatement", "classicalDeclarationStatement",
		"constDeclarationStatement", "ioDeclarationStatement", "oldStyleDeclarationStatement",
		"quantumDeclarationStatement", "defStatement", "externStatement", "gateStatement",
		"assignmentStatement", "expressionStatement", "calStatement", "defcalStatement",
		"expression", "aliasExpression", "declarationExpression", "measureExpression",
		"rangeExpression", "setExpression", "arrayLiteral", "indexOperator",
		"indexedIdentifier", "returnSignature", "gateModifier", "scalarType",
		"qubitType", "arrayType", "arrayReferenceType", "designator", "defcalTarget",
		"defcalArgumentDefinition", "defcalOperand", "gateOperand", "externArgument",
		"argumentDefinition", "argumentDefinitionList", "defcalArgumentDefinitionList",
		"defcalOperandList", "expressionList", "identifierList", "gateOperandList",
		"externArgumentList",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 114, 835, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7,
		52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2,
		63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 1, 0, 3, 0, 136, 8,
		0, 1, 0, 5, 0, 139, 8, 0, 10, 0, 12, 0, 142, 9, 0, 1, 0, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 2, 5, 2, 152, 8, 2, 10, 2, 12, 2, 155, 9, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 187, 8, 2, 3, 2, 189, 8, 2, 1, 3,
		1, 3, 3, 3, 193, 8, 3, 1, 4, 1, 4, 5, 4, 197, 8, 4, 10, 4, 12, 4, 200,
		9, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 3, 6, 209, 8, 6, 1, 7,
		1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10,
		1, 10, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1,
		12, 1, 12, 1, 12, 1, 12, 3, 12, 238, 8, 12, 1, 12, 1, 12, 1, 13, 1, 13,
		1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 249, 8, 13, 1, 14, 1, 14, 1,
		14, 3, 14, 254, 8, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15,
		1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 5, 16, 270, 8, 16, 10,
		16, 12, 16, 273, 9, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17,
		1, 17, 3, 17, 283, 8, 17, 1, 18, 1, 18, 3, 18, 287, 8, 18, 1, 18, 1, 18,
		1, 19, 1, 19, 3, 19, 293, 8, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 3,
		20, 300, 8, 20, 1, 20, 1, 20, 1, 21, 1, 21, 3, 21, 306, 8, 21, 1, 21, 1,
		21, 1, 22, 5, 22, 311, 8, 22, 10, 22, 12, 22, 314, 9, 22, 1, 22, 1, 22,
		1, 22, 3, 22, 319, 8, 22, 1, 22, 3, 22, 322, 8, 22, 1, 22, 3, 22, 325,
		8, 22, 1, 22, 1, 22, 1, 22, 1, 22, 5, 22, 331, 8, 22, 10, 22, 12, 22, 334,
		9, 22, 1, 22, 1, 22, 1, 22, 3, 22, 339, 8, 22, 1, 22, 3, 22, 342, 8, 22,
		1, 22, 3, 22, 345, 8, 22, 1, 22, 3, 22, 348, 8, 22, 1, 22, 3, 22, 351,
		8, 22, 1, 23, 1, 23, 1, 23, 3, 23, 356, 8, 23, 1, 23, 1, 23, 1, 24, 1,
		24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26,
		3, 26, 372, 8, 26, 1, 26, 1, 26, 1, 26, 3, 26, 377, 8, 26, 1, 26, 1, 26,
		1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 3,
		28, 391, 8, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 3, 29, 399, 8,
		29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31,
		3, 31, 411, 8, 31, 1, 31, 1, 31, 3, 31, 415, 8, 31, 1, 31, 1, 31, 1, 32,
		1, 32, 1, 32, 1, 32, 3, 32, 423, 8, 32, 1, 32, 1, 32, 3, 32, 427, 8, 32,
		1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 435, 8, 33, 1, 33, 3,
		33, 438, 8, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 3, 34,
		447, 8, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 3,
		36, 457, 8, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37, 3, 37, 465, 8,
		37, 1, 37, 3, 37, 468, 8, 37, 1, 37, 1, 37, 3, 37, 472, 8, 37, 1, 37, 1,
		37, 3, 37, 476, 8, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38,
		1, 38, 1, 38, 1, 38, 1, 38, 3, 38, 489, 8, 38, 1, 38, 1, 38, 1, 38, 1,
		38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 3, 38, 503,
		8, 38, 1, 38, 1, 38, 3, 38, 507, 8, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1,
		38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38,
		1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1,
		38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 5, 38,
		544, 8, 38, 10, 38, 12, 38, 547, 9, 38, 1, 39, 1, 39, 1, 39, 5, 39, 552,
		8, 39, 10, 39, 12, 39, 555, 9, 39, 1, 40, 1, 40, 1, 40, 3, 40, 560, 8,
		40, 1, 41, 1, 41, 1, 41, 1, 42, 3, 42, 566, 8, 42, 1, 42, 1, 42, 3, 42,
		570, 8, 42, 1, 42, 1, 42, 3, 42, 574, 8, 42, 1, 43, 1, 43, 1, 43, 1, 43,
		5, 43, 580, 8, 43, 10, 43, 12, 43, 583, 9, 43, 1, 43, 3, 43, 586, 8, 43,
		1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 3, 44, 593, 8, 44, 1, 44, 1, 44, 1,
		44, 3, 44, 598, 8, 44, 5, 44, 600, 8, 44, 10, 44, 12, 44, 603, 9, 44, 1,
		44, 3, 44, 606, 8, 44, 3, 44, 608, 8, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1,
		45, 1, 45, 3, 45, 616, 8, 45, 1, 45, 1, 45, 1, 45, 3, 45, 621, 8, 45, 5,
		45, 623, 8, 45, 10, 45, 12, 45, 626, 9, 45, 1, 45, 3, 45, 629, 8, 45, 3,
		45, 631, 8, 45, 1, 45, 1, 45, 1, 46, 1, 46, 5, 46, 637, 8, 46, 10, 46,
		12, 46, 640, 9, 46, 1, 47, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 48, 1,
		48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 3, 48, 656, 8, 48, 3, 48,
		658, 8, 48, 1, 48, 1, 48, 1, 49, 1, 49, 3, 49, 664, 8, 49, 1, 49, 1, 49,
		3, 49, 668, 8, 49, 1, 49, 1, 49, 3, 49, 672, 8, 49, 1, 49, 1, 49, 3, 49,
		676, 8, 49, 1, 49, 1, 49, 3, 49, 680, 8, 49, 1, 49, 1, 49, 1, 49, 1, 49,
		1, 49, 1, 49, 1, 49, 1, 49, 3, 49, 690, 8, 49, 3, 49, 692, 8, 49, 1, 50,
		1, 50, 3, 50, 696, 8, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1,
		51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52,
		714, 8, 52, 1, 52, 1, 52, 1, 53, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1,
		55, 1, 55, 3, 55, 726, 8, 55, 1, 56, 1, 56, 1, 57, 1, 57, 3, 57, 732, 8,
		57, 1, 58, 1, 58, 1, 58, 1, 58, 3, 58, 738, 8, 58, 3, 58, 740, 8, 58, 1,
		59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 751,
		8, 59, 1, 59, 1, 59, 1, 59, 3, 59, 756, 8, 59, 1, 60, 1, 60, 1, 60, 5,
		60, 761, 8, 60, 10, 60, 12, 60, 764, 9, 60, 1, 60, 3, 60, 767, 8, 60, 1,
		61, 1, 61, 1, 61, 5, 61, 772, 8, 61, 10, 61, 12, 61, 775, 9, 61, 1, 61,
		3, 61, 778, 8, 61, 1, 62, 1, 62, 1, 62, 5, 62, 783, 8, 62, 10, 62, 12,
		62, 786, 9, 62, 1, 62, 3, 62, 789, 8, 62, 1, 63, 1, 63, 1, 63, 5, 63, 794,
		8, 63, 10, 63, 12, 63, 797, 9, 63, 1, 63, 3, 63, 800, 8, 63, 1, 64, 1,
		64, 1, 64, 5, 64, 805, 8, 64, 10, 64, 12, 64, 808, 9, 64, 1, 64, 3, 64,
		811, 8, 64, 1, 65, 1, 65, 1, 65, 5, 65, 816, 8, 65, 10, 65, 12, 65, 819,
		9, 65, 1, 65, 3, 65, 822, 8, 65, 1, 66, 1, 66, 1, 66, 5, 66, 827, 8, 66,
		10, 66, 12, 66, 830, 9, 66, 1, 66, 3, 66, 833, 8, 66, 1, 66, 0, 1, 76,
		67, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34,
		36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70,
		72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104,
		106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 0,
		11, 1, 0, 26, 27, 2, 0, 31, 31, 33, 33, 2, 0, 67, 67, 85, 85, 2, 0, 71,
		71, 82, 83, 2, 0, 56, 56, 89, 98, 2, 0, 72, 72, 74, 75, 2, 0, 69, 69, 71,
		71, 1, 0, 48, 49, 1, 0, 29, 30, 2, 0, 52, 54, 94, 94, 1, 0, 94, 95, 921,
		0, 135, 1, 0, 0, 0, 2, 145, 1, 0, 0, 0, 4, 188, 1, 0, 0, 0, 6, 190, 1,
		0, 0, 0, 8, 194, 1, 0, 0, 0, 10, 203, 1, 0, 0, 0, 12, 208, 1, 0, 0, 0,
		14, 210, 1, 0, 0, 0, 16, 214, 1, 0, 0, 0, 18, 218, 1, 0, 0, 0, 20, 221,
		1, 0, 0, 0, 22, 224, 1, 0, 0, 0, 24, 227, 1, 0, 0, 0, 26, 241, 1, 0, 0,
		0, 28, 250, 1, 0, 0, 0, 30, 257, 1, 0, 0, 0, 32, 263, 1, 0, 0, 0, 34, 282,
		1, 0, 0, 0, 36, 284, 1, 0, 0, 0, 38, 290, 1, 0, 0, 0, 40, 296, 1, 0, 0,
		0, 42, 303, 1, 0, 0, 0, 44, 350, 1, 0, 0, 0, 46, 352, 1, 0, 0, 0, 48, 359,
		1, 0, 0, 0, 50, 363, 1, 0, 0, 0, 52, 371, 1, 0, 0, 0, 54, 380, 1, 0, 0,
		0, 56, 387, 1, 0, 0, 0, 58, 395, 1, 0, 0, 0, 60, 402, 1, 0, 0, 0, 62, 406,
		1, 0, 0, 0, 64, 418, 1, 0, 0, 0, 66, 430, 1, 0, 0, 0, 68, 442, 1, 0, 0,
		0, 70, 450, 1, 0, 0, 0, 72, 453, 1, 0, 0, 0, 74, 460, 1, 0, 0, 0, 76, 506,
		1, 0, 0, 0, 78, 548, 1, 0, 0, 0, 80, 559, 1, 0, 0, 0, 82, 561, 1, 0, 0,
		0, 84, 565, 1, 0, 0, 0, 86, 575, 1, 0, 0, 0, 88, 589, 1, 0, 0, 0, 90, 611,
		1, 0, 0, 0, 92, 634, 1, 0, 0, 0, 94, 641, 1, 0, 0, 0, 96, 657, 1, 0, 0,
		0, 98, 691, 1, 0, 0, 0, 100, 693, 1, 0, 0, 0, 102, 697, 1, 0, 0, 0, 104,
		704, 1, 0, 0, 0, 106, 717, 1, 0, 0, 0, 108, 721, 1, 0, 0, 0, 110, 725,
		1, 0, 0, 0, 112, 727, 1, 0, 0, 0, 114, 731, 1, 0, 0, 0, 116, 739, 1, 0,
		0, 0, 118, 755, 1, 0, 0, 0, 120, 757, 1, 0, 0, 0, 122, 768, 1, 0, 0, 0,
		124, 779, 1, 0, 0, 0, 126, 790, 1, 0, 0, 0, 128, 801, 1, 0, 0, 0, 130,
		812, 1, 0, 0, 0, 132, 823, 1, 0, 0, 0, 134, 136, 3, 2, 1, 0, 135, 134,
		1, 0, 0, 0, 135, 136, 1, 0, 0, 0, 136, 140, 1, 0, 0, 0, 137, 139, 3, 12,
		6, 0, 138, 137, 1, 0, 0, 0, 139, 142, 1, 0, 0, 0, 140, 138, 1, 0, 0, 0,
		140, 141, 1, 0, 0, 0, 141, 143, 1, 0, 0, 0, 142, 140, 1, 0, 0, 0, 143,
		144, 5, 0, 0, 1, 144, 1, 1, 0, 0, 0, 145, 146, 5, 1, 0, 0, 146, 147, 5,
		104, 0, 0, 147, 148, 5, 64, 0, 0, 148, 3, 1, 0, 0, 0, 149, 189, 3, 10,
		5, 0, 150, 152, 3, 6, 3, 0, 151, 150, 1, 0, 0, 0, 152, 155, 1, 0, 0, 0,
		153, 151, 1, 0, 0, 0, 153, 154, 1, 0, 0, 0, 154, 186, 1, 0, 0, 0, 155,
		153, 1, 0, 0, 0, 156, 187, 3, 50, 25, 0, 157, 187, 3, 68, 34, 0, 158, 187,
		3, 36, 18, 0, 159, 187, 3, 38, 19, 0, 160, 187, 3, 18, 9, 0, 161, 187,
		3, 72, 36, 0, 162, 187, 3, 14, 7, 0, 163, 187, 3, 52, 26, 0, 164, 187,
		3, 54, 27, 0, 165, 187, 3, 20, 10, 0, 166, 187, 3, 62, 31, 0, 167, 187,
		3, 74, 37, 0, 168, 187, 3, 40, 20, 0, 169, 187, 3, 22, 11, 0, 170, 187,
		3, 70, 35, 0, 171, 187, 3, 64, 32, 0, 172, 187, 3, 24, 12, 0, 173, 187,
		3, 44, 22, 0, 174, 187, 3, 66, 33, 0, 175, 187, 3, 26, 13, 0, 176, 187,
		3, 16, 8, 0, 177, 187, 3, 56, 28, 0, 178, 187, 3, 46, 23, 0, 179, 187,
		3, 42, 21, 0, 180, 187, 3, 58, 29, 0, 181, 187, 3, 60, 30, 0, 182, 187,
		3, 48, 24, 0, 183, 187, 3, 28, 14, 0, 184, 187, 3, 32, 16, 0, 185, 187,
		3, 30, 15, 0, 186, 156, 1, 0, 0, 0, 186, 157, 1, 0, 0, 0, 186, 158, 1,
		0, 0, 0, 186, 159, 1, 0, 0, 0, 186, 160, 1, 0, 0, 0, 186, 161, 1, 0, 0,
		0, 186, 162, 1, 0, 0, 0, 186, 163, 1, 0, 0, 0, 186, 164, 1, 0, 0, 0, 186,
		165, 1, 0, 0, 0, 186, 166, 1, 0, 0, 0, 186, 167, 1, 0, 0, 0, 186, 168,
		1, 0, 0, 0, 186, 169, 1, 0, 0, 0, 186, 170, 1, 0, 0, 0, 186, 171, 1, 0,
		0, 0, 186, 172, 1, 0, 0, 0, 186, 173, 1, 0, 0, 0, 186, 174, 1, 0, 0, 0,
		186, 175, 1, 0, 0, 0, 186, 176, 1, 0, 0, 0, 186, 177, 1, 0, 0, 0, 186,
		178, 1, 0, 0, 0, 186, 179, 1, 0, 0, 0, 186, 180, 1, 0, 0, 0, 186, 181,
		1, 0, 0, 0, 186, 182, 1, 0, 0, 0, 186, 183, 1, 0, 0, 0, 186, 184, 1, 0,
		0, 0, 186, 185, 1, 0, 0, 0, 187, 189, 1, 0, 0, 0, 188, 149, 1, 0, 0, 0,
		188, 153, 1, 0, 0, 0, 189, 5, 1, 0, 0, 0, 190, 192, 5, 25, 0, 0, 191, 193,
		5, 109, 0, 0, 192, 191, 1, 0, 0, 0, 192, 193, 1, 0, 0, 0, 193, 7, 1, 0,
		0, 0, 194, 198, 5, 59, 0, 0, 195, 197, 3, 12, 6, 0, 196, 195, 1, 0, 0,
		0, 197, 200, 1, 0, 0, 0, 198, 196, 1, 0, 0, 0, 198, 199, 1, 0, 0, 0, 199,
		201, 1, 0, 0, 0, 200, 198, 1, 0, 0, 0, 201, 202, 5, 60, 0, 0, 202, 9, 1,
		0, 0, 0, 203, 204, 5, 24, 0, 0, 204, 205, 5, 109, 0, 0, 205, 11, 1, 0,
		0, 0, 206, 209, 3, 4, 2, 0, 207, 209, 3, 8, 4, 0, 208, 206, 1, 0, 0, 0,
		208, 207, 1, 0, 0, 0, 209, 13, 1, 0, 0, 0, 210, 211, 5, 3, 0, 0, 211, 212,
		5, 106, 0, 0, 212, 213, 5, 64, 0, 0, 213, 15, 1, 0, 0, 0, 214, 215, 5,
		2, 0, 0, 215, 216, 5, 106, 0, 0, 216, 217, 5, 64, 0, 0, 217, 17, 1, 0,
		0, 0, 218, 219, 5, 11, 0, 0, 219, 220, 5, 64, 0, 0, 220, 19, 1, 0, 0, 0,
		221, 222, 5, 12, 0, 0, 222, 223, 5, 64, 0, 0, 223, 21, 1, 0, 0, 0, 224,
		225, 5, 15, 0, 0, 225, 226, 5, 64, 0, 0, 226, 23, 1, 0, 0, 0, 227, 228,
		5, 17, 0, 0, 228, 229, 3, 98, 49, 0, 229, 230, 5, 94, 0, 0, 230, 237, 5,
		19, 0, 0, 231, 238, 3, 86, 43, 0, 232, 233, 5, 57, 0, 0, 233, 234, 3, 84,
		42, 0, 234, 235, 5, 58, 0, 0, 235, 238, 1, 0, 0, 0, 236, 238, 3, 76, 38,
		0, 237, 231, 1, 0, 0, 0, 237, 232, 1, 0, 0, 0, 237, 236, 1, 0, 0, 0, 238,
		239, 1, 0, 0, 0, 239, 240, 3, 12, 6, 0, 240, 25, 1, 0, 0, 0, 241, 242,
		5, 13, 0, 0, 242, 243, 5, 61, 0, 0, 243, 244, 3, 76, 38, 0, 244, 245, 5,
		62, 0, 0, 245, 248, 3, 12, 6, 0, 246, 247, 5, 14, 0, 0, 247, 249, 3, 12,
		6, 0, 248, 246, 1, 0, 0, 0, 248, 249, 1, 0, 0, 0, 249, 27, 1, 0, 0, 0,
		250, 253, 5, 16, 0, 0, 251, 254, 3, 76, 38, 0, 252, 254, 3, 82, 41, 0,
		253, 251, 1, 0, 0, 0, 253, 252, 1, 0, 0, 0, 253, 254, 1, 0, 0, 0, 254,
		255, 1, 0, 0, 0, 255, 256, 5, 64, 0, 0, 256, 29, 1, 0, 0, 0, 257, 258,
		5, 18, 0, 0, 258, 259, 5, 61, 0, 0, 259, 260, 3, 76, 38, 0, 260, 261, 5,
		62, 0, 0, 261, 262, 3, 12, 6, 0, 262, 31, 1, 0, 0, 0, 263, 264, 5, 20,
		0, 0, 264, 265, 5, 61, 0, 0, 265, 266, 3, 76, 38, 0, 266, 267, 5, 62, 0,
		0, 267, 271, 5, 59, 0, 0, 268, 270, 3, 34, 17, 0, 269, 268, 1, 0, 0, 0,
		270, 273, 1, 0, 0, 0, 271, 269, 1, 0, 0, 0, 271, 272, 1, 0, 0, 0, 272,
		274, 1, 0, 0, 0, 273, 271, 1, 0, 0, 0, 274, 275, 5, 60, 0, 0, 275, 33,
		1, 0, 0, 0, 276, 277, 5, 21, 0, 0, 277, 278, 3, 126, 63, 0, 278, 279, 3,
		8, 4, 0, 279, 283, 1, 0, 0, 0, 280, 281, 5, 22, 0, 0, 281, 283, 3, 8, 4,
		0, 282, 276, 1, 0, 0, 0, 282, 280, 1, 0, 0, 0, 283, 35, 1, 0, 0, 0, 284,
		286, 5, 55, 0, 0, 285, 287, 3, 130, 65, 0, 286, 285, 1, 0, 0, 0, 286, 287,
		1, 0, 0, 0, 287, 288, 1, 0, 0, 0, 288, 289, 5, 64, 0, 0, 289, 37, 1, 0,
		0, 0, 290, 292, 5, 9, 0, 0, 291, 293, 3, 106, 53, 0, 292, 291, 1, 0, 0,
		0, 292, 293, 1, 0, 0, 0, 293, 294, 1, 0, 0, 0, 294, 295, 3, 8, 4, 0, 295,
		39, 1, 0, 0, 0, 296, 297, 5, 52, 0, 0, 297, 299, 3, 106, 53, 0, 298, 300,
		3, 130, 65, 0, 299, 298, 1, 0, 0, 0, 299, 300, 1, 0, 0, 0, 300, 301, 1,
		0, 0, 0, 301, 302, 5, 64, 0, 0, 302, 41, 1, 0, 0, 0, 303, 305, 5, 23, 0,
		0, 304, 306, 3, 130, 65, 0, 305, 304, 1, 0, 0, 0, 305, 306, 1, 0, 0, 0,
		306, 307, 1, 0, 0, 0, 307, 308, 5, 64, 0, 0, 308, 43, 1, 0, 0, 0, 309,
		311, 3, 96, 48, 0, 310, 309, 1, 0, 0, 0, 311, 314, 1, 0, 0, 0, 312, 310,
		1, 0, 0, 0, 312, 313, 1, 0, 0, 0, 313, 315, 1, 0, 0, 0, 314, 312, 1, 0,
		0, 0, 315, 321, 5, 94, 0, 0, 316, 318, 5, 61, 0, 0, 317, 319, 3, 126, 63,
		0, 318, 317, 1, 0, 0, 0, 318, 319, 1, 0, 0, 0, 319, 320, 1, 0, 0, 0, 320,
		322, 5, 62, 0, 0, 321, 316, 1, 0, 0, 0, 321, 322, 1, 0, 0, 0, 322, 324,
		1, 0, 0, 0, 323, 325, 3, 106, 53, 0, 324, 323, 1, 0, 0, 0, 324, 325, 1,
		0, 0, 0, 325, 326, 1, 0, 0, 0, 326, 327, 3, 130, 65, 0, 327, 328, 5, 64,
		0, 0, 328, 351, 1, 0, 0, 0, 329, 331, 3, 96, 48, 0, 330, 329, 1, 0, 0,
		0, 331, 334, 1, 0, 0, 0, 332, 330, 1, 0, 0, 0, 332, 333, 1, 0, 0, 0, 333,
		335, 1, 0, 0, 0, 334, 332, 1, 0, 0, 0, 335, 341, 5, 45, 0, 0, 336, 338,
		5, 61, 0, 0, 337, 339, 3, 126, 63, 0, 338, 337, 1, 0, 0, 0, 338, 339, 1,
		0, 0, 0, 339, 340, 1, 0, 0, 0, 340, 342, 5, 62, 0, 0, 341, 336, 1, 0, 0,
		0, 341, 342, 1, 0, 0, 0, 342, 344, 1, 0, 0, 0, 343, 345, 3, 106, 53, 0,
		344, 343, 1, 0, 0, 0, 344, 345, 1, 0, 0, 0, 345, 347, 1, 0, 0, 0, 346,
		348, 3, 130, 65, 0, 347, 346, 1, 0, 0, 0, 347, 348, 1, 0, 0, 0, 348, 349,
		1, 0, 0, 0, 349, 351, 5, 64, 0, 0, 350, 312, 1, 0, 0, 0, 350, 332, 1, 0,
		0, 0, 351, 45, 1, 0, 0, 0, 352, 355, 3, 82, 41, 0, 353, 354, 5, 68, 0,
		0, 354, 356, 3, 92, 46, 0, 355, 353, 1, 0, 0, 0, 355, 356, 1, 0, 0, 0,
		356, 357, 1, 0, 0, 0, 357, 358, 5, 64, 0, 0, 358, 47, 1, 0, 0, 0, 359,
		360, 5, 53, 0, 0, 360, 361, 3, 114, 57, 0, 361, 362, 5, 64, 0, 0, 362,
		49, 1, 0, 0, 0, 363, 364, 5, 10, 0, 0, 364, 365, 5, 94, 0, 0, 365, 366,
		5, 67, 0, 0, 366, 367, 3, 78, 39, 0, 367, 368, 5, 64, 0, 0, 368, 51, 1,
		0, 0, 0, 369, 372, 3, 98, 49, 0, 370, 372, 3, 102, 51, 0, 371, 369, 1,
		0, 0, 0, 371, 370, 1, 0, 0, 0, 372, 373, 1, 0, 0, 0, 373, 376, 5, 94, 0,
		0, 374, 375, 5, 67, 0, 0, 375, 377, 3, 80, 40, 0, 376, 374, 1, 0, 0, 0,
		376, 377, 1, 0, 0, 0, 377, 378, 1, 0, 0, 0, 378, 379, 5, 64, 0, 0, 379,
		53, 1, 0, 0, 0, 380, 381, 5, 28, 0, 0, 381, 382, 3, 98, 49, 0, 382, 383,
		5, 94, 0, 0, 383, 384, 5, 67, 0, 0, 384, 385, 3, 80, 40, 0, 385, 386, 5,
		64, 0, 0, 386, 55, 1, 0, 0, 0, 387, 390, 7, 0, 0, 0, 388, 391, 3, 98, 49,
		0, 389, 391, 3, 102, 51, 0, 390, 388, 1, 0, 0, 0, 390, 389, 1, 0, 0, 0,
		391, 392, 1, 0, 0, 0, 392, 393, 5, 94, 0, 0, 393, 394, 5, 64, 0, 0, 394,
		57, 1, 0, 0, 0, 395, 396, 7, 1, 0, 0, 396, 398, 5, 94, 0, 0, 397, 399,
		3, 106, 53, 0, 398, 397, 1, 0, 0, 0, 398, 399, 1, 0, 0, 0, 399, 400, 1,
		0, 0, 0, 400, 401, 5, 64, 0, 0, 401, 59, 1, 0, 0, 0, 402, 403, 3, 100,
		50, 0, 403, 404, 5, 94, 0, 0, 404, 405, 5, 64, 0, 0, 405, 61, 1, 0, 0,
		0, 406, 407, 5, 4, 0, 0, 407, 408, 5, 94, 0, 0, 408, 410, 5, 61, 0, 0,
		409, 411, 3, 120, 60, 0, 410, 409, 1, 0, 0, 0, 410, 411, 1, 0, 0, 0, 411,
		412, 1, 0, 0, 0, 412, 414, 5, 62, 0, 0, 413, 415, 3, 94, 47, 0, 414, 413,
		1, 0, 0, 0, 414, 415, 1, 0, 0, 0, 415, 416, 1, 0, 0, 0, 416, 417, 3, 8,
		4, 0, 417, 63, 1, 0, 0, 0, 418, 419, 5, 8, 0, 0, 419, 420, 5, 94, 0, 0,
		420, 422, 5, 61, 0, 0, 421, 423, 3, 132, 66, 0, 422, 421, 1, 0, 0, 0, 422,
		423, 1, 0, 0, 0, 423, 424, 1, 0, 0, 0, 424, 426, 5, 62, 0, 0, 425, 427,
		3, 94, 47, 0, 426, 425, 1, 0, 0, 0, 426, 427, 1, 0, 0, 0, 427, 428, 1,
		0, 0, 0, 428, 429, 5, 64, 0, 0, 429, 65, 1, 0, 0, 0, 430, 431, 5, 7, 0,
		0, 431, 437, 5, 94, 0, 0, 432, 434, 5, 61, 0, 0, 433, 435, 3, 128, 64,
		0, 434, 433, 1, 0, 0, 0, 434, 435, 1, 0, 0, 0, 435, 436, 1, 0, 0, 0, 436,
		438, 5, 62, 0, 0, 437, 432, 1, 0, 0, 0, 437, 438, 1, 0, 0, 0, 438, 439,
		1, 0, 0, 0, 439, 440, 3, 128, 64, 0, 440, 441, 3, 8, 4, 0, 441, 67, 1,
		0, 0, 0, 442, 443, 3, 92, 46, 0, 443, 446, 7, 2, 0, 0, 444, 447, 3, 76,
		38, 0, 445, 447, 3, 82, 41, 0, 446, 444, 1, 0, 0, 0, 446, 445, 1, 0, 0,
		0, 447, 448, 1, 0, 0, 0, 448, 449, 5, 64, 0, 0, 449, 69, 1, 0, 0, 0, 450,
		451, 3, 76, 38, 0, 451, 452, 5, 64, 0, 0, 452, 71, 1, 0, 0, 0, 453, 454,
		5, 5, 0, 0, 454, 456, 5, 59, 0, 0, 455, 457, 5, 114, 0, 0, 456, 455, 1,
		0, 0, 0, 456, 457, 1, 0, 0, 0, 457, 458, 1, 0, 0, 0, 458, 459, 5, 60, 0,
		0, 459, 73, 1, 0, 0, 0, 460, 461, 5, 6, 0, 0, 461, 467, 3, 108, 54, 0,
		462, 464, 5, 61, 0, 0, 463, 465, 3, 122, 61, 0, 464, 463, 1, 0, 0, 0, 464,
		465, 1, 0, 0, 0, 465, 466, 1, 0, 0, 0, 466, 468, 5, 62, 0, 0, 467, 462,
		1, 0, 0, 0, 467, 468, 1, 0, 0, 0, 468, 469, 1, 0, 0, 0, 469, 471, 3, 124,
		62, 0, 470, 472, 3, 94, 47, 0, 471, 470, 1, 0, 0, 0, 471, 472, 1, 0, 0,
		0, 472, 473, 1, 0, 0, 0, 473, 475, 5, 59, 0, 0, 474, 476, 5, 114, 0, 0,
		475, 474, 1, 0, 0, 0, 475, 476, 1, 0, 0, 0, 476, 477, 1, 0, 0, 0, 477,
		478, 5, 60, 0, 0, 478, 75, 1, 0, 0, 0, 479, 480, 6, 38, -1, 0, 480, 481,
		5, 61, 0, 0, 481, 482, 3, 76, 38, 0, 482, 483, 5, 62, 0, 0, 483, 507, 1,
		0, 0, 0, 484, 485, 7, 3, 0, 0, 485, 507, 3, 76, 38, 15, 486, 489, 3, 98,
		49, 0, 487, 489, 3, 102, 51, 0, 488, 486, 1, 0, 0, 0, 488, 487, 1, 0, 0,
		0, 489, 490, 1, 0, 0, 0, 490, 491, 5, 61, 0, 0, 491, 492, 3, 76, 38, 0,
		492, 493, 5, 62, 0, 0, 493, 507, 1, 0, 0, 0, 494, 495, 5, 51, 0, 0, 495,
		496, 5, 61, 0, 0, 496, 497, 3, 8, 4, 0, 497, 498, 5, 62, 0, 0, 498, 507,
		1, 0, 0, 0, 499, 500, 5, 94, 0, 0, 500, 502, 5, 61, 0, 0, 501, 503, 3,
		126, 63, 0, 502, 501, 1, 0, 0, 0, 502, 503, 1, 0, 0, 0, 503, 504, 1, 0,
		0, 0, 504, 507, 5, 62, 0, 0, 505, 507, 7, 4, 0, 0, 506, 479, 1, 0, 0, 0,
		506, 484, 1, 0, 0, 0, 506, 488, 1, 0, 0, 0, 506, 494, 1, 0, 0, 0, 506,
		499, 1, 0, 0, 0, 506, 505, 1, 0, 0, 0, 507, 545, 1, 0, 0, 0, 508, 509,
		10, 16, 0, 0, 509, 510, 5, 73, 0, 0, 510, 544, 3, 76, 38, 16, 511, 512,
		10, 14, 0, 0, 512, 513, 7, 5, 0, 0, 513, 544, 3, 76, 38, 15, 514, 515,
		10, 13, 0, 0, 515, 516, 7, 6, 0, 0, 516, 544, 3, 76, 38, 14, 517, 518,
		10, 12, 0, 0, 518, 519, 5, 87, 0, 0, 519, 544, 3, 76, 38, 13, 520, 521,
		10, 11, 0, 0, 521, 522, 5, 86, 0, 0, 522, 544, 3, 76, 38, 12, 523, 524,
		10, 10, 0, 0, 524, 525, 5, 84, 0, 0, 525, 544, 3, 76, 38, 11, 526, 527,
		10, 9, 0, 0, 527, 528, 5, 78, 0, 0, 528, 544, 3, 76, 38, 10, 529, 530,
		10, 8, 0, 0, 530, 531, 5, 80, 0, 0, 531, 544, 3, 76, 38, 9, 532, 533, 10,
		7, 0, 0, 533, 534, 5, 76, 0, 0, 534, 544, 3, 76, 38, 8, 535, 536, 10, 6,
		0, 0, 536, 537, 5, 79, 0, 0, 537, 544, 3, 76, 38, 7, 538, 539, 10, 5, 0,
		0, 539, 540, 5, 77, 0, 0, 540, 544, 3, 76, 38, 6, 541, 542, 10, 17, 0,
		0, 542, 544, 3, 90, 45, 0, 543, 508, 1, 0, 0, 0, 543, 511, 1, 0, 0, 0,
		543, 514, 1, 0, 0, 0, 543, 517, 1, 0, 0, 0, 543, 520, 1, 0, 0, 0, 543,
		523, 1, 0, 0, 0, 543, 526, 1, 0, 0, 0, 543, 529, 1, 0, 0, 0, 543, 532,
		1, 0, 0, 0, 543, 535, 1, 0, 0, 0, 543, 538, 1, 0, 0, 0, 543, 541, 1, 0,
		0, 0, 544, 547, 1, 0, 0, 0, 545, 543, 1, 0, 0, 0, 545, 546, 1, 0, 0, 0,
		546, 77, 1, 0, 0, 0, 547, 545, 1, 0, 0, 0, 548, 553, 3, 76, 38, 0, 549,
		550, 5, 70, 0, 0, 550, 552, 3, 76, 38, 0, 551, 549, 1, 0, 0, 0, 552, 555,
		1, 0, 0, 0, 553, 551, 1, 0, 0, 0, 553, 554, 1, 0, 0, 0, 554, 79, 1, 0,
		0, 0, 555, 553, 1, 0, 0, 0, 556, 560, 3, 88, 44, 0, 557, 560, 3, 76, 38,
		0, 558, 560, 3, 82, 41, 0, 559, 556, 1, 0, 0, 0, 559, 557, 1, 0, 0, 0,
		559, 558, 1, 0, 0, 0, 560, 81, 1, 0, 0, 0, 561, 562, 5, 54, 0, 0, 562,
		563, 3, 114, 57, 0, 563, 83, 1, 0, 0, 0, 564, 566, 3, 76, 38, 0, 565, 564,
		1, 0, 0, 0, 565, 566, 1, 0, 0, 0, 566, 567, 1, 0, 0, 0, 567, 569, 5, 63,
		0, 0, 568, 570, 3, 76, 38, 0, 569, 568, 1, 0, 0, 0, 569, 570, 1, 0, 0,
		0, 570, 573, 1, 0, 0, 0, 571, 572, 5, 63, 0, 0, 572, 574, 3, 76, 38, 0,
		573, 571, 1, 0, 0, 0, 573, 574, 1, 0, 0, 0, 574, 85, 1, 0, 0, 0, 575, 576,
		5, 59, 0, 0, 576, 581, 3, 76, 38, 0, 577, 578, 5, 66, 0, 0, 578, 580, 3,
		76, 38, 0, 579, 577, 1, 0, 0, 0, 580, 583, 1, 0, 0, 0, 581, 579, 1, 0,
		0, 0, 581, 582, 1, 0, 0, 0, 582, 585, 1, 0, 0, 0, 583, 581, 1, 0, 0, 0,
		584, 586, 5, 66, 0, 0, 585, 584, 1, 0, 0, 0, 585, 586, 1, 0, 0, 0, 586,
		587, 1, 0, 0, 0, 587, 588, 5, 60, 0, 0, 588, 87, 1, 0, 0, 0, 589, 607,
		5, 59, 0, 0, 590, 593, 3, 76, 38, 0, 591, 593, 3, 88, 44, 0, 592, 590,
		1, 0, 0, 0, 592, 591, 1, 0, 0, 0, 593, 601, 1, 0, 0, 0, 594, 597, 5, 66,
		0, 0, 595, 598, 3, 76, 38, 0, 596, 598, 3, 88, 44, 0, 597, 595, 1, 0, 0,
		0, 597, 596, 1, 0, 0, 0, 598, 600, 1, 0, 0, 0, 599, 594, 1, 0, 0, 0, 600,
		603, 1, 0, 0, 0, 601, 599, 1, 0, 0, 0, 601, 602, 1, 0, 0, 0, 602, 605,
		1, 0, 0, 0, 603, 601, 1, 0, 0, 0, 604, 606, 5, 66, 0, 0, 605, 604, 1, 0,
		0, 0, 605, 606, 1, 0, 0, 0, 606, 608, 1, 0, 0, 0, 607, 592, 1, 0, 0, 0,
		607, 608, 1, 0, 0, 0, 608, 609, 1, 0, 0, 0, 609, 610, 5, 60, 0, 0, 610,
		89, 1, 0, 0, 0, 611, 630, 5, 57, 0, 0, 612, 631, 3, 86, 43, 0, 613, 616,
		3, 76, 38, 0, 614, 616, 3, 84, 42, 0, 615, 613, 1, 0, 0, 0, 615, 614, 1,
		0, 0, 0, 616, 624, 1, 0, 0, 0, 617, 620, 5, 66, 0, 0, 618, 621, 3, 76,
		38, 0, 619, 621, 3, 84, 42, 0, 620, 618, 1, 0, 0, 0, 620, 619, 1, 0, 0,
		0, 621, 623, 1, 0, 0, 0, 622, 617, 1, 0, 0, 0, 623, 626, 1, 0, 0, 0, 624,
		622, 1, 0, 0, 0, 624, 625, 1, 0, 0, 0, 625, 628, 1, 0, 0, 0, 626, 624,
		1, 0, 0, 0, 627, 629, 5, 66, 0, 0, 628, 627, 1, 0, 0, 0, 628, 629, 1, 0,
		0, 0, 629, 631, 1, 0, 0, 0, 630, 612, 1, 0, 0, 0, 630, 615, 1, 0, 0, 0,
		631, 632, 1, 0, 0, 0, 632, 633, 5, 58, 0, 0, 633, 91, 1, 0, 0, 0, 634,
		638, 5, 94, 0, 0, 635, 637, 3, 90, 45, 0, 636, 635, 1, 0, 0, 0, 637, 640,
		1, 0, 0, 0, 638, 636, 1, 0, 0, 0, 638, 639, 1, 0, 0, 0, 639, 93, 1, 0,
		0, 0, 640, 638, 1, 0, 0, 0, 641, 642, 5, 68, 0, 0, 642, 643, 3, 98, 49,
		0, 643, 95, 1, 0, 0, 0, 644, 658, 5, 46, 0, 0, 645, 646, 5, 47, 0, 0, 646,
		647, 5, 61, 0, 0, 647, 648, 3, 76, 38, 0, 648, 649, 5, 62, 0, 0, 649, 658,
		1, 0, 0, 0, 650, 655, 7, 7, 0, 0, 651, 652, 5, 61, 0, 0, 652, 653, 3, 76,
		38, 0, 653, 654, 5, 62, 0, 0, 654, 656, 1, 0, 0, 0, 655, 651, 1, 0, 0,
		0, 655, 656, 1, 0, 0, 0, 656, 658, 1, 0, 0, 0, 657, 644, 1, 0, 0, 0, 657,
		645, 1, 0, 0, 0, 657, 650, 1, 0, 0, 0, 658, 659, 1, 0, 0, 0, 659, 660,
		5, 81, 0, 0, 660, 97, 1, 0, 0, 0, 661, 663, 5, 35, 0, 0, 662, 664, 3, 106,
		53, 0, 663, 662, 1, 0, 0, 0, 663, 664, 1, 0, 0, 0, 664, 692, 1, 0, 0, 0,
		665, 667, 5, 36, 0, 0, 666, 668, 3, 106, 53, 0, 667, 666, 1, 0, 0, 0, 667,
		668, 1, 0, 0, 0, 668, 692, 1, 0, 0, 0, 669, 671, 5, 37, 0, 0, 670, 672,
		3, 106, 53, 0, 671, 670, 1, 0, 0, 0, 671, 672, 1, 0, 0, 0, 672, 692, 1,
		0, 0, 0, 673, 675, 5, 38, 0, 0, 674, 676, 3, 106, 53, 0, 675, 674, 1, 0,
		0, 0, 675, 676, 1, 0, 0, 0, 676, 692, 1, 0, 0, 0, 677, 679, 5, 39, 0, 0,
		678, 680, 3, 106, 53, 0, 679, 678, 1, 0, 0, 0, 679, 680, 1, 0, 0, 0, 680,
		692, 1, 0, 0, 0, 681, 692, 5, 34, 0, 0, 682, 692, 5, 43, 0, 0, 683, 692,
		5, 44, 0, 0, 684, 689, 5, 40, 0, 0, 685, 686, 5, 57, 0, 0, 686, 687, 3,
		98, 49, 0, 687, 688, 5, 58, 0, 0, 688, 690, 1, 0, 0, 0, 689, 685, 1, 0,
		0, 0, 689, 690, 1, 0, 0, 0, 690, 692, 1, 0, 0, 0, 691, 661, 1, 0, 0, 0,
		691, 665, 1, 0, 0, 0, 691, 669, 1, 0, 0, 0, 691, 673, 1, 0, 0, 0, 691,
		677, 1, 0, 0, 0, 691, 681, 1, 0, 0, 0, 691, 682, 1, 0, 0, 0, 691, 683,
		1, 0, 0, 0, 691, 684, 1, 0, 0, 0, 692, 99, 1, 0, 0, 0, 693, 695, 5, 32,
		0, 0, 694, 696, 3, 106, 53, 0, 695, 694, 1, 0, 0, 0, 695, 696, 1, 0, 0,
		0, 696, 101, 1, 0, 0, 0, 697, 698, 5, 41, 0, 0, 698, 699, 5, 57, 0, 0,
		699, 700, 3, 98, 49, 0, 700, 701, 5, 66, 0, 0, 701, 702, 3, 126, 63, 0,
		702, 703, 5, 58, 0, 0, 703, 103, 1, 0, 0, 0, 704, 705, 7, 8, 0, 0, 705,
		706, 5, 41, 0, 0, 706, 707, 5, 57, 0, 0, 707, 708, 3, 98, 49, 0, 708, 713,
		5, 66, 0, 0, 709, 714, 3, 126, 63, 0, 710, 711, 5, 50, 0, 0, 711, 712,
		5, 67, 0, 0, 712, 714, 3, 76, 38, 0, 713, 709, 1, 0, 0, 0, 713, 710, 1,
		0, 0, 0, 714, 715, 1, 0, 0, 0, 715, 716, 5, 58, 0, 0, 716, 105, 1, 0, 0,
		0, 717, 718, 5, 57, 0, 0, 718, 719, 3, 76, 38, 0, 719, 720, 5, 58, 0, 0,
		720, 107, 1, 0, 0, 0, 721, 722, 7, 9, 0, 0, 722, 109, 1, 0, 0, 0, 723,
		726, 3, 76, 38, 0, 724, 726, 3, 118, 59, 0, 725, 723, 1, 0, 0, 0, 725,
		724, 1, 0, 0, 0, 726, 111, 1, 0, 0, 0, 727, 728, 7, 10, 0, 0, 728, 113,
		1, 0, 0, 0, 729, 732, 3, 92, 46, 0, 730, 732, 5, 95, 0, 0, 731, 729, 1,
		0, 0, 0, 731, 730, 1, 0, 0, 0, 732, 115, 1, 0, 0, 0, 733, 740, 3, 98, 49,
		0, 734, 740, 3, 104, 52, 0, 735, 737, 5, 33, 0, 0, 736, 738, 3, 106, 53,
		0, 737, 736, 1, 0, 0, 0, 737, 738, 1, 0, 0, 0, 738, 740, 1, 0, 0, 0, 739,
		733, 1, 0, 0, 0, 739, 734, 1, 0, 0, 0, 739, 735, 1, 0, 0, 0, 740, 117,
		1, 0, 0, 0, 741, 742, 3, 98, 49, 0, 742, 743, 5, 94, 0, 0, 743, 756, 1,
		0, 0, 0, 744, 745, 3, 100, 50, 0, 745, 746, 5, 94, 0, 0, 746, 756, 1, 0,
		0, 0, 747, 748, 7, 1, 0, 0, 748, 750, 5, 94, 0, 0, 749, 751, 3, 106, 53,
		0, 750, 749, 1, 0, 0, 0, 750, 751, 1, 0, 0, 0, 751, 756, 1, 0, 0, 0, 752,
		753, 3, 104, 52, 0, 753, 754, 5, 94, 0, 0, 754, 756, 1, 0, 0, 0, 755, 741,
		1, 0, 0, 0, 755, 744, 1, 0, 0, 0, 755, 747, 1, 0, 0, 0, 755, 752, 1, 0,
		0, 0, 756, 119, 1, 0, 0, 0, 757, 762, 3, 118, 59, 0, 758, 759, 5, 66, 0,
		0, 759, 761, 3, 118, 59, 0, 760, 758, 1, 0, 0, 0, 761, 764, 1, 0, 0, 0,
		762, 760, 1, 0, 0, 0, 762, 763, 1, 0, 0, 0, 763, 766, 1, 0, 0, 0, 764,
		762, 1, 0, 0, 0, 765, 767, 5, 66, 0, 0, 766, 765, 1, 0, 0, 0, 766, 767,
		1, 0, 0, 0, 767, 121, 1, 0, 0, 0, 768, 773, 3, 110, 55, 0, 769, 770, 5,
		66, 0, 0, 770, 772, 3, 110, 55, 0, 771, 769, 1, 0, 0, 0, 772, 775, 1, 0,
		0, 0, 773, 771, 1, 0, 0, 0, 773, 774, 1, 0, 0, 0, 774, 777, 1, 0, 0, 0,
		775, 773, 1, 0, 0, 0, 776, 778, 5, 66, 0, 0, 777, 776, 1, 0, 0, 0, 777,
		778, 1, 0, 0, 0, 778, 123, 1, 0, 0, 0, 779, 784, 3, 112, 56, 0, 780, 781,
		5, 66, 0, 0, 781, 783, 3, 112, 56, 0, 782, 780, 1, 0, 0, 0, 783, 786, 1,
		0, 0, 0, 784, 782, 1, 0, 0, 0, 784, 785, 1, 0, 0, 0, 785, 788, 1, 0, 0,
		0, 786, 784, 1, 0, 0, 0, 787, 789, 5, 66, 0, 0, 788, 787, 1, 0, 0, 0, 788,
		789, 1, 0, 0, 0, 789, 125, 1, 0, 0, 0, 790, 795, 3, 76, 38, 0, 791, 792,
		5, 66, 0, 0, 792, 794, 3, 76, 38, 0, 793, 791, 1, 0, 0, 0, 794, 797, 1,
		0, 0, 0, 795, 793, 1, 0, 0, 0, 795, 796, 1, 0, 0, 0, 796, 799, 1, 0, 0,
		0, 797, 795, 1, 0, 0, 0, 798, 800, 5, 66, 0, 0, 799, 798, 1, 0, 0, 0, 799,
		800, 1, 0, 0, 0, 800, 127, 1, 0, 0, 0, 801, 806, 5, 94, 0, 0, 802, 803,
		5, 66, 0, 0, 803, 805, 5, 94, 0, 0, 804, 802, 1, 0, 0, 0, 805, 808, 1,
		0, 0, 0, 806, 804, 1, 0, 0, 0, 806, 807, 1, 0, 0, 0, 807, 810, 1, 0, 0,
		0, 808, 806, 1, 0, 0, 0, 809, 811, 5, 66, 0, 0, 810, 809, 1, 0, 0, 0, 810,
		811, 1, 0, 0, 0, 811, 129, 1, 0, 0, 0, 812, 817, 3, 114, 57, 0, 813, 814,
		5, 66, 0, 0, 814, 816, 3, 114, 57, 0, 815, 813, 1, 0, 0, 0, 816, 819, 1,
		0, 0, 0, 817, 815, 1, 0, 0, 0, 817, 818, 1, 0, 0, 0, 818, 821, 1, 0, 0,
		0, 819, 817, 1, 0, 0, 0, 820, 822, 5, 66, 0, 0, 821, 820, 1, 0, 0, 0, 821,
		822, 1, 0, 0, 0, 822, 131, 1, 0, 0, 0, 823, 828, 3, 116, 58, 0, 824, 825,
		5, 66, 0, 0, 825, 827, 3, 116, 58, 0, 826, 824, 1, 0, 0, 0, 827, 830, 1,
		0, 0, 0, 828, 826, 1, 0, 0, 0, 828, 829, 1, 0, 0, 0, 829, 832, 1, 0, 0,
		0, 830, 828, 1, 0, 0, 0, 831, 833, 5, 66, 0, 0, 832, 831, 1, 0, 0, 0, 832,
		833, 1, 0, 0, 0, 833, 133, 1, 0, 0, 0, 98, 135, 140, 153, 186, 188, 192,
		198, 208, 237, 248, 253, 271, 282, 286, 292, 299, 305, 312, 318, 321, 324,
		332, 338, 341, 344, 347, 350, 355, 371, 376, 390, 398, 410, 414, 422, 426,
		434, 437, 446, 456, 464, 467, 471, 475, 488, 502, 506, 543, 545, 553, 559,
		565, 569, 573, 581, 585, 592, 597, 601, 605, 607, 615, 620, 624, 628, 630,
		638, 655, 657, 663, 667, 671, 675, 679, 689, 691, 695, 713, 725, 731, 737,
		739, 750, 755, 762, 766, 773, 777, 784, 788, 795, 799, 806, 810, 817, 821,
		828, 832,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// qasm3ParserInit initializes any static state used to implement qasm3Parser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// Newqasm3Parser(). You can call this function if you wish to initialize the static state ahead
// of time.
func Qasm3ParserInit() {
	staticData := &Qasm3ParserParserStaticData
	staticData.once.Do(qasm3parserParserInit)
}

// Newqasm3Parser produces a new parser instance for the optional input antlr.TokenStream.
func Newqasm3Parser(input antlr.TokenStream) *qasm3Parser {
	Qasm3ParserInit()
	this := new(qasm3Parser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &Qasm3ParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "qasm3Parser.g4"

	return this
}

// qasm3Parser tokens.
const (
	qasm3ParserEOF                          = antlr.TokenEOF
	qasm3ParserOPENQASM                     = 1
	qasm3ParserINCLUDE                      = 2
	qasm3ParserDEFCALGRAMMAR                = 3
	qasm3ParserDEF                          = 4
	qasm3ParserCAL                          = 5
	qasm3ParserDEFCAL                       = 6
	qasm3ParserGATE                         = 7
	qasm3ParserEXTERN                       = 8
	qasm3ParserBOX                          = 9
	qasm3ParserLET                          = 10
	qasm3ParserBREAK                        = 11
	qasm3ParserCONTINUE                     = 12
	qasm3ParserIF                           = 13
	qasm3ParserELSE                         = 14
	qasm3ParserEND                          = 15
	qasm3ParserRETURN                       = 16
	qasm3ParserFOR                          = 17
	qasm3ParserWHILE                        = 18
	qasm3ParserIN                           = 19
	qasm3ParserSWITCH                       = 20
	qasm3ParserCASE                         = 21
	qasm3ParserDEFAULT                      = 22
	qasm3ParserNOP                          = 23
	qasm3ParserPRAGMA                       = 24
	qasm3ParserAnnotationKeyword            = 25
	qasm3ParserINPUT                        = 26
	qasm3ParserOUTPUT                       = 27
	qasm3ParserCONST                        = 28
	qasm3ParserREADONLY                     = 29
	qasm3ParserMUTABLE                      = 30
	qasm3ParserQREG                         = 31
	qasm3ParserQUBIT                        = 32
	qasm3ParserCREG                         = 33
	qasm3ParserBOOL                         = 34
	qasm3ParserBIT                          = 35
	qasm3ParserINT                          = 36
	qasm3ParserUINT                         = 37
	qasm3ParserFLOAT                        = 38
	qasm3ParserANGLE                        = 39
	qasm3ParserCOMPLEX                      = 40
	qasm3ParserARRAY                        = 41
	qasm3ParserVOID                         = 42
	qasm3ParserDURATION                     = 43
	qasm3ParserSTRETCH                      = 44
	qasm3ParserGPHASE                       = 45
	qasm3ParserINV                          = 46
	qasm3ParserPOW                          = 47
	qasm3ParserCTRL                         = 48
	qasm3ParserNEGCTRL                      = 49
	qasm3ParserDIM                          = 50
	qasm3ParserDURATIONOF                   = 51
	qasm3ParserDELAY                        = 52
	qasm3ParserRESET                        = 53
	qasm3ParserMEASURE                      = 54
	qasm3ParserBARRIER                      = 55
	qasm3ParserBooleanLiteral               = 56
	qasm3ParserLBRACKET                     = 57
	qasm3ParserRBRACKET                     = 58
	qasm3ParserLBRACE                       = 59
	qasm3ParserRBRACE                       = 60
	qasm3ParserLPAREN                       = 61
	qasm3ParserRPAREN                       = 62
	qasm3ParserCOLON                        = 63
	qasm3ParserSEMICOLON                    = 64
	qasm3ParserDOT                          = 65
	qasm3ParserCOMMA                        = 66
	qasm3ParserEQUALS                       = 67
	qasm3ParserARROW                        = 68
	qasm3ParserPLUS                         = 69
	qasm3ParserDOUBLE_PLUS                  = 70
	qasm3ParserMINUS                        = 71
	qasm3ParserASTERISK                     = 72
	qasm3ParserDOUBLE_ASTERISK              = 73
	qasm3ParserSLASH                        = 74
	qasm3ParserPERCENT                      = 75
	qasm3ParserPIPE                         = 76
	qasm3ParserDOUBLE_PIPE                  = 77
	qasm3ParserAMPERSAND                    = 78
	qasm3ParserDOUBLE_AMPERSAND             = 79
	qasm3ParserCARET                        = 80
	qasm3ParserAT                           = 81
	qasm3ParserTILDE                        = 82
	qasm3ParserEXCLAMATION_POINT            = 83
	qasm3ParserEqualityOperator             = 84
	qasm3ParserCompoundAssignmentOperator   = 85
	qasm3ParserComparisonOperator           = 86
	qasm3ParserBitshiftOperator             = 87
	qasm3ParserIMAG                         = 88
	qasm3ParserImaginaryLiteral             = 89
	qasm3ParserBinaryIntegerLiteral         = 90
	qasm3ParserOctalIntegerLiteral          = 91
	qasm3ParserDecimalIntegerLiteral        = 92
	qasm3ParserHexIntegerLiteral            = 93
	qasm3ParserIdentifier                   = 94
	qasm3ParserHardwareQubit                = 95
	qasm3ParserFloatLiteral                 = 96
	qasm3ParserTimingLiteral                = 97
	qasm3ParserBitstringLiteral             = 98
	qasm3ParserWhitespace                   = 99
	qasm3ParserNewline                      = 100
	qasm3ParserLineComment                  = 101
	qasm3ParserBlockComment                 = 102
	qasm3ParserVERSION_IDENTIFER_WHITESPACE = 103
	qasm3ParserVersionSpecifier             = 104
	qasm3ParserARBITRARY_STRING_WHITESPACE  = 105
	qasm3ParserStringLiteral                = 106
	qasm3ParserEAT_INITIAL_SPACE            = 107
	qasm3ParserEAT_LINE_END                 = 108
	qasm3ParserRemainingLineContent         = 109
	qasm3ParserCAL_PRELUDE_WHITESPACE       = 110
	qasm3ParserCAL_PRELUDE_COMMENT          = 111
	qasm3ParserDEFCAL_PRELUDE_WHITESPACE    = 112
	qasm3ParserDEFCAL_PRELUDE_COMMENT       = 113
	qasm3ParserCalibrationBlock             = 114
)

// qasm3Parser rules.
const (
	qasm3ParserRULE_program                         = 0
	qasm3ParserRULE_version                         = 1
	qasm3ParserRULE_statement                       = 2
	qasm3ParserRULE_annotation                      = 3
	qasm3ParserRULE_scope                           = 4
	qasm3ParserRULE_pragma                          = 5
	qasm3ParserRULE_statementOrScope                = 6
	qasm3ParserRULE_calibrationGrammarStatement     = 7
	qasm3ParserRULE_includeStatement                = 8
	qasm3ParserRULE_breakStatement                  = 9
	qasm3ParserRULE_continueStatement               = 10
	qasm3ParserRULE_endStatement                    = 11
	qasm3ParserRULE_forStatement                    = 12
	qasm3ParserRULE_ifStatement                     = 13
	qasm3ParserRULE_returnStatement                 = 14
	qasm3ParserRULE_whileStatement                  = 15
	qasm3ParserRULE_switchStatement                 = 16
	qasm3ParserRULE_switchCaseItem                  = 17
	qasm3ParserRULE_barrierStatement                = 18
	qasm3ParserRULE_boxStatement                    = 19
	qasm3ParserRULE_delayStatement                  = 20
	qasm3ParserRULE_nopStatement                    = 21
	qasm3ParserRULE_gateCallStatement               = 22
	qasm3ParserRULE_measureArrowAssignmentStatement = 23
	qasm3ParserRULE_resetStatement                  = 24
	qasm3ParserRULE_aliasDeclarationStatement       = 25
	qasm3ParserRULE_classicalDeclarationStatement   = 26
	qasm3ParserRULE_constDeclarationStatement       = 27
	qasm3ParserRULE_ioDeclarationStatement          = 28
	qasm3ParserRULE_oldStyleDeclarationStatement    = 29
	qasm3ParserRULE_quantumDeclarationStatement     = 30
	qasm3ParserRULE_defStatement                    = 31
	qasm3ParserRULE_externStatement                 = 32
	qasm3ParserRULE_gateStatement                   = 33
	qasm3ParserRULE_assignmentStatement             = 34
	qasm3ParserRULE_expressionStatement             = 35
	qasm3ParserRULE_calStatement                    = 36
	qasm3ParserRULE_defcalStatement                 = 37
	qasm3ParserRULE_expression                      = 38
	qasm3ParserRULE_aliasExpression                 = 39
	qasm3ParserRULE_declarationExpression           = 40
	qasm3ParserRULE_measureExpression               = 41
	qasm3ParserRULE_rangeExpression                 = 42
	qasm3ParserRULE_setExpression                   = 43
	qasm3ParserRULE_arrayLiteral                    = 44
	qasm3ParserRULE_indexOperator                   = 45
	qasm3ParserRULE_indexedIdentifier               = 46
	qasm3ParserRULE_returnSignature                 = 47
	qasm3ParserRULE_gateModifier                    = 48
	qasm3ParserRULE_scalarType                      = 49
	qasm3ParserRULE_qubitType                       = 50
	qasm3ParserRULE_arrayType                       = 51
	qasm3ParserRULE_arrayReferenceType              = 52
	qasm3ParserRULE_designator                      = 53
	qasm3ParserRULE_defcalTarget                    = 54
	qasm3ParserRULE_defcalArgumentDefinition        = 55
	qasm3ParserRULE_defcalOperand                   = 56
	qasm3ParserRULE_gateOperand                     = 57
	qasm3ParserRULE_externArgument                  = 58
	qasm3ParserRULE_argumentDefinition              = 59
	qasm3ParserRULE_argumentDefinitionList          = 60
	qasm3ParserRULE_defcalArgumentDefinitionList    = 61
	qasm3ParserRULE_defcalOperandList               = 62
	qasm3ParserRULE_expressionList                  = 63
	qasm3ParserRULE_identifierList                  = 64
	qasm3ParserRULE_gateOperandList                 = 65
	qasm3ParserRULE_externArgumentList              = 66
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EOF() antlr.TerminalNode
	Version() IVersionContext
	AllStatementOrScope() []IStatementOrScopeContext
	StatementOrScope(i int) IStatementOrScopeContext

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_program
	return p
}

func InitEmptyProgramContext(p *ProgramContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_program
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) EOF() antlr.TerminalNode {
	return s.GetToken(qasm3ParserEOF, 0)
}

func (s *ProgramContext) Version() IVersionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVersionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVersionContext)
}

func (s *ProgramContext) AllStatementOrScope() []IStatementOrScopeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementOrScopeContext); ok {
			len++
		}
	}

	tst := make([]IStatementOrScopeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementOrScopeContext); ok {
			tst[i] = t.(IStatementOrScopeContext)
			i++
		}
	}

	return tst
}

func (s *ProgramContext) StatementOrScope(i int) IStatementOrScopeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementOrScopeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementOrScopeContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterProgram(s)
	}
}

func (s *ProgramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitProgram(s)
	}
}

func (s *ProgramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitProgram(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) Program() (localctx IProgramContext) {
	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, qasm3ParserRULE_program)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(135)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserOPENQASM {
		{
			p.SetState(134)
			p.Version()
		}

	}
	p.SetState(140)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&3025288650022174716) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&268179457) != 0) {
		{
			p.SetState(137)
			p.StatementOrScope()
		}

		p.SetState(142)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(143)
		p.Match(qasm3ParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVersionContext is an interface to support dynamic dispatch.
type IVersionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPENQASM() antlr.TerminalNode
	VersionSpecifier() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode

	// IsVersionContext differentiates from other interfaces.
	IsVersionContext()
}

type VersionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVersionContext() *VersionContext {
	var p = new(VersionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_version
	return p
}

func InitEmptyVersionContext(p *VersionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_version
}

func (*VersionContext) IsVersionContext() {}

func NewVersionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VersionContext {
	var p = new(VersionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_version

	return p
}

func (s *VersionContext) GetParser() antlr.Parser { return s.parser }

func (s *VersionContext) OPENQASM() antlr.TerminalNode {
	return s.GetToken(qasm3ParserOPENQASM, 0)
}

func (s *VersionContext) VersionSpecifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserVersionSpecifier, 0)
}

func (s *VersionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *VersionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VersionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VersionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterVersion(s)
	}
}

func (s *VersionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitVersion(s)
	}
}

func (s *VersionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitVersion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) Version() (localctx IVersionContext) {
	localctx = NewVersionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, qasm3ParserRULE_version)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(145)
		p.Match(qasm3ParserOPENQASM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(146)
		p.Match(qasm3ParserVersionSpecifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(147)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Pragma() IPragmaContext
	AliasDeclarationStatement() IAliasDeclarationStatementContext
	AssignmentStatement() IAssignmentStatementContext
	BarrierStatement() IBarrierStatementContext
	BoxStatement() IBoxStatementContext
	BreakStatement() IBreakStatementContext
	CalStatement() ICalStatementContext
	CalibrationGrammarStatement() ICalibrationGrammarStatementContext
	ClassicalDeclarationStatement() IClassicalDeclarationStatementContext
	ConstDeclarationStatement() IConstDeclarationStatementContext
	ContinueStatement() IContinueStatementContext
	DefStatement() IDefStatementContext
	DefcalStatement() IDefcalStatementContext
	DelayStatement() IDelayStatementContext
	EndStatement() IEndStatementContext
	ExpressionStatement() IExpressionStatementContext
	ExternStatement() IExternStatementContext
	ForStatement() IForStatementContext
	GateCallStatement() IGateCallStatementContext
	GateStatement() IGateStatementContext
	IfStatement() IIfStatementContext
	IncludeStatement() IIncludeStatementContext
	IoDeclarationStatement() IIoDeclarationStatementContext
	MeasureArrowAssignmentStatement() IMeasureArrowAssignmentStatementContext
	NopStatement() INopStatementContext
	OldStyleDeclarationStatement() IOldStyleDeclarationStatementContext
	QuantumDeclarationStatement() IQuantumDeclarationStatementContext
	ResetStatement() IResetStatementContext
	ReturnStatement() IReturnStatementContext
	SwitchStatement() ISwitchStatementContext
	WhileStatement() IWhileStatementContext
	AllAnnotation() []IAnnotationContext
	Annotation(i int) IAnnotationContext

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_statement
	return p
}

func InitEmptyStatementContext(p *StatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_statement
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Pragma() IPragmaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPragmaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPragmaContext)
}

func (s *StatementContext) AliasDeclarationStatement() IAliasDeclarationStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasDeclarationStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasDeclarationStatementContext)
}

func (s *StatementContext) AssignmentStatement() IAssignmentStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentStatementContext)
}

func (s *StatementContext) BarrierStatement() IBarrierStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBarrierStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBarrierStatementContext)
}

func (s *StatementContext) BoxStatement() IBoxStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBoxStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBoxStatementContext)
}

func (s *StatementContext) BreakStatement() IBreakStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBreakStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *StatementContext) CalStatement() ICalStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICalStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICalStatementContext)
}

func (s *StatementContext) CalibrationGrammarStatement() ICalibrationGrammarStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICalibrationGrammarStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICalibrationGrammarStatementContext)
}

func (s *StatementContext) ClassicalDeclarationStatement() IClassicalDeclarationStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassicalDeclarationStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassicalDeclarationStatementContext)
}

func (s *StatementContext) ConstDeclarationStatement() IConstDeclarationStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstDeclarationStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstDeclarationStatementContext)
}

func (s *StatementContext) ContinueStatement() IContinueStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IContinueStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *StatementContext) DefStatement() IDefStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefStatementContext)
}

func (s *StatementContext) DefcalStatement() IDefcalStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefcalStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefcalStatementContext)
}

func (s *StatementContext) DelayStatement() IDelayStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDelayStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDelayStatementContext)
}

func (s *StatementContext) EndStatement() IEndStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEndStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEndStatementContext)
}

func (s *StatementContext) ExpressionStatement() IExpressionStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *StatementContext) ExternStatement() IExternStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternStatementContext)
}

func (s *StatementContext) ForStatement() IForStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForStatementContext)
}

func (s *StatementContext) GateCallStatement() IGateCallStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGateCallStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGateCallStatementContext)
}

func (s *StatementContext) GateStatement() IGateStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGateStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGateStatementContext)
}

func (s *StatementContext) IfStatement() IIfStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *StatementContext) IncludeStatement() IIncludeStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIncludeStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIncludeStatementContext)
}

func (s *StatementContext) IoDeclarationStatement() IIoDeclarationStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIoDeclarationStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIoDeclarationStatementContext)
}

func (s *StatementContext) MeasureArrowAssignmentStatement() IMeasureArrowAssignmentStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeasureArrowAssignmentStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeasureArrowAssignmentStatementContext)
}

func (s *StatementContext) NopStatement() INopStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INopStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INopStatementContext)
}

func (s *StatementContext) OldStyleDeclarationStatement() IOldStyleDeclarationStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOldStyleDeclarationStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOldStyleDeclarationStatementContext)
}

func (s *StatementContext) QuantumDeclarationStatement() IQuantumDeclarationStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuantumDeclarationStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuantumDeclarationStatementContext)
}

func (s *StatementContext) ResetStatement() IResetStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResetStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResetStatementContext)
}

func (s *StatementContext) ReturnStatement() IReturnStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturnStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *StatementContext) SwitchStatement() ISwitchStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchStatementContext)
}

func (s *StatementContext) WhileStatement() IWhileStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhileStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *StatementContext) AllAnnotation() []IAnnotationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAnnotationContext); ok {
			len++
		}
	}

	tst := make([]IAnnotationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAnnotationContext); ok {
			tst[i] = t.(IAnnotationContext)
			i++
		}
	}

	return tst
}

func (s *StatementContext) Annotation(i int) IAnnotationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnnotationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, qasm3ParserRULE_statement)
	var _la int

	p.SetState(188)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserPRAGMA:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(149)
			p.Pragma()
		}

	case qasm3ParserINCLUDE, qasm3ParserDEFCALGRAMMAR, qasm3ParserDEF, qasm3ParserCAL, qasm3ParserDEFCAL, qasm3ParserGATE, qasm3ParserEXTERN, qasm3ParserBOX, qasm3ParserLET, qasm3ParserBREAK, qasm3ParserCONTINUE, qasm3ParserIF, qasm3ParserEND, qasm3ParserRETURN, qasm3ParserFOR, qasm3ParserWHILE, qasm3ParserSWITCH, qasm3ParserNOP, qasm3ParserAnnotationKeyword, qasm3ParserINPUT, qasm3ParserOUTPUT, qasm3ParserCONST, qasm3ParserQREG, qasm3ParserQUBIT, qasm3ParserCREG, qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserARRAY, qasm3ParserDURATION, qasm3ParserSTRETCH, qasm3ParserGPHASE, qasm3ParserINV, qasm3ParserPOW, qasm3ParserCTRL, qasm3ParserNEGCTRL, qasm3ParserDURATIONOF, qasm3ParserDELAY, qasm3ParserRESET, qasm3ParserMEASURE, qasm3ParserBARRIER, qasm3ParserBooleanLiteral, qasm3ParserLPAREN, qasm3ParserMINUS, qasm3ParserTILDE, qasm3ParserEXCLAMATION_POINT, qasm3ParserImaginaryLiteral, qasm3ParserBinaryIntegerLiteral, qasm3ParserOctalIntegerLiteral, qasm3ParserDecimalIntegerLiteral, qasm3ParserHexIntegerLiteral, qasm3ParserIdentifier, qasm3ParserHardwareQubit, qasm3ParserFloatLiteral, qasm3ParserTimingLiteral, qasm3ParserBitstringLiteral:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(153)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == qasm3ParserAnnotationKeyword {
			{
				p.SetState(150)
				p.Annotation()
			}

			p.SetState(155)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(186)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(156)
				p.AliasDeclarationStatement()
			}

		case 2:
			{
				p.SetState(157)
				p.AssignmentStatement()
			}

		case 3:
			{
				p.SetState(158)
				p.BarrierStatement()
			}

		case 4:
			{
				p.SetState(159)
				p.BoxStatement()
			}

		case 5:
			{
				p.SetState(160)
				p.BreakStatement()
			}

		case 6:
			{
				p.SetState(161)
				p.CalStatement()
			}

		case 7:
			{
				p.SetState(162)
				p.CalibrationGrammarStatement()
			}

		case 8:
			{
				p.SetState(163)
				p.ClassicalDeclarationStatement()
			}

		case 9:
			{
				p.SetState(164)
				p.ConstDeclarationStatement()
			}

		case 10:
			{
				p.SetState(165)
				p.ContinueStatement()
			}

		case 11:
			{
				p.SetState(166)
				p.DefStatement()
			}

		case 12:
			{
				p.SetState(167)
				p.DefcalStatement()
			}

		case 13:
			{
				p.SetState(168)
				p.DelayStatement()
			}

		case 14:
			{
				p.SetState(169)
				p.EndStatement()
			}

		case 15:
			{
				p.SetState(170)
				p.ExpressionStatement()
			}

		case 16:
			{
				p.SetState(171)
				p.ExternStatement()
			}

		case 17:
			{
				p.SetState(172)
				p.ForStatement()
			}

		case 18:
			{
				p.SetState(173)
				p.GateCallStatement()
			}

		case 19:
			{
				p.SetState(174)
				p.GateStatement()
			}

		case 20:
			{
				p.SetState(175)
				p.IfStatement()
			}

		case 21:
			{
				p.SetState(176)
				p.IncludeStatement()
			}

		case 22:
			{
				p.SetState(177)
				p.IoDeclarationStatement()
			}

		case 23:
			{
				p.SetState(178)
				p.MeasureArrowAssignmentStatement()
			}

		case 24:
			{
				p.SetState(179)
				p.NopStatement()
			}

		case 25:
			{
				p.SetState(180)
				p.OldStyleDeclarationStatement()
			}

		case 26:
			{
				p.SetState(181)
				p.QuantumDeclarationStatement()
			}

		case 27:
			{
				p.SetState(182)
				p.ResetStatement()
			}

		case 28:
			{
				p.SetState(183)
				p.ReturnStatement()
			}

		case 29:
			{
				p.SetState(184)
				p.SwitchStatement()
			}

		case 30:
			{
				p.SetState(185)
				p.WhileStatement()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAnnotationContext is an interface to support dynamic dispatch.
type IAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AnnotationKeyword() antlr.TerminalNode
	RemainingLineContent() antlr.TerminalNode

	// IsAnnotationContext differentiates from other interfaces.
	IsAnnotationContext()
}

type AnnotationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationContext() *AnnotationContext {
	var p = new(AnnotationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_annotation
	return p
}

func InitEmptyAnnotationContext(p *AnnotationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_annotation
}

func (*AnnotationContext) IsAnnotationContext() {}

func NewAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationContext {
	var p = new(AnnotationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_annotation

	return p
}

func (s *AnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationContext) AnnotationKeyword() antlr.TerminalNode {
	return s.GetToken(qasm3ParserAnnotationKeyword, 0)
}

func (s *AnnotationContext) RemainingLineContent() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRemainingLineContent, 0)
}

func (s *AnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterAnnotation(s)
	}
}

func (s *AnnotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitAnnotation(s)
	}
}

func (s *AnnotationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitAnnotation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) Annotation() (localctx IAnnotationContext) {
	localctx = NewAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, qasm3ParserRULE_annotation)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(190)
		p.Match(qasm3ParserAnnotationKeyword)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(192)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserRemainingLineContent {
		{
			p.SetState(191)
			p.Match(qasm3ParserRemainingLineContent)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IScopeContext is an interface to support dynamic dispatch.
type IScopeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllStatementOrScope() []IStatementOrScopeContext
	StatementOrScope(i int) IStatementOrScopeContext

	// IsScopeContext differentiates from other interfaces.
	IsScopeContext()
}

type ScopeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScopeContext() *ScopeContext {
	var p = new(ScopeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_scope
	return p
}

func InitEmptyScopeContext(p *ScopeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_scope
}

func (*ScopeContext) IsScopeContext() {}

func NewScopeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScopeContext {
	var p = new(ScopeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_scope

	return p
}

func (s *ScopeContext) GetParser() antlr.Parser { return s.parser }

func (s *ScopeContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLBRACE, 0)
}

func (s *ScopeContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRBRACE, 0)
}

func (s *ScopeContext) AllStatementOrScope() []IStatementOrScopeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementOrScopeContext); ok {
			len++
		}
	}

	tst := make([]IStatementOrScopeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementOrScopeContext); ok {
			tst[i] = t.(IStatementOrScopeContext)
			i++
		}
	}

	return tst
}

func (s *ScopeContext) StatementOrScope(i int) IStatementOrScopeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementOrScopeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementOrScopeContext)
}

func (s *ScopeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScopeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScopeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterScope(s)
	}
}

func (s *ScopeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitScope(s)
	}
}

func (s *ScopeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitScope(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) Scope() (localctx IScopeContext) {
	localctx = NewScopeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, qasm3ParserRULE_scope)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(194)
		p.Match(qasm3ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(198)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&3025288650022174716) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&268179457) != 0) {
		{
			p.SetState(195)
			p.StatementOrScope()
		}

		p.SetState(200)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(201)
		p.Match(qasm3ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPragmaContext is an interface to support dynamic dispatch.
type IPragmaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRAGMA() antlr.TerminalNode
	RemainingLineContent() antlr.TerminalNode

	// IsPragmaContext differentiates from other interfaces.
	IsPragmaContext()
}

type PragmaContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragmaContext() *PragmaContext {
	var p = new(PragmaContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_pragma
	return p
}

func InitEmptyPragmaContext(p *PragmaContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_pragma
}

func (*PragmaContext) IsPragmaContext() {}

func NewPragmaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PragmaContext {
	var p = new(PragmaContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_pragma

	return p
}

func (s *PragmaContext) GetParser() antlr.Parser { return s.parser }

func (s *PragmaContext) PRAGMA() antlr.TerminalNode {
	return s.GetToken(qasm3ParserPRAGMA, 0)
}

func (s *PragmaContext) RemainingLineContent() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRemainingLineContent, 0)
}

func (s *PragmaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PragmaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PragmaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterPragma(s)
	}
}

func (s *PragmaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitPragma(s)
	}
}

func (s *PragmaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitPragma(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) Pragma() (localctx IPragmaContext) {
	localctx = NewPragmaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, qasm3ParserRULE_pragma)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(203)
		p.Match(qasm3ParserPRAGMA)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(204)
		p.Match(qasm3ParserRemainingLineContent)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementOrScopeContext is an interface to support dynamic dispatch.
type IStatementOrScopeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Statement() IStatementContext
	Scope() IScopeContext

	// IsStatementOrScopeContext differentiates from other interfaces.
	IsStatementOrScopeContext()
}

type StatementOrScopeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementOrScopeContext() *StatementOrScopeContext {
	var p = new(StatementOrScopeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_statementOrScope
	return p
}

func InitEmptyStatementOrScopeContext(p *StatementOrScopeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_statementOrScope
}

func (*StatementOrScopeContext) IsStatementOrScopeContext() {}

func NewStatementOrScopeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementOrScopeContext {
	var p = new(StatementOrScopeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_statementOrScope

	return p
}

func (s *StatementOrScopeContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementOrScopeContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementOrScopeContext) Scope() IScopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScopeContext)
}

func (s *StatementOrScopeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementOrScopeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementOrScopeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterStatementOrScope(s)
	}
}

func (s *StatementOrScopeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitStatementOrScope(s)
	}
}

func (s *StatementOrScopeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitStatementOrScope(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) StatementOrScope() (localctx IStatementOrScopeContext) {
	localctx = NewStatementOrScopeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, qasm3ParserRULE_statementOrScope)
	p.SetState(208)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserINCLUDE, qasm3ParserDEFCALGRAMMAR, qasm3ParserDEF, qasm3ParserCAL, qasm3ParserDEFCAL, qasm3ParserGATE, qasm3ParserEXTERN, qasm3ParserBOX, qasm3ParserLET, qasm3ParserBREAK, qasm3ParserCONTINUE, qasm3ParserIF, qasm3ParserEND, qasm3ParserRETURN, qasm3ParserFOR, qasm3ParserWHILE, qasm3ParserSWITCH, qasm3ParserNOP, qasm3ParserPRAGMA, qasm3ParserAnnotationKeyword, qasm3ParserINPUT, qasm3ParserOUTPUT, qasm3ParserCONST, qasm3ParserQREG, qasm3ParserQUBIT, qasm3ParserCREG, qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserARRAY, qasm3ParserDURATION, qasm3ParserSTRETCH, qasm3ParserGPHASE, qasm3ParserINV, qasm3ParserPOW, qasm3ParserCTRL, qasm3ParserNEGCTRL, qasm3ParserDURATIONOF, qasm3ParserDELAY, qasm3ParserRESET, qasm3ParserMEASURE, qasm3ParserBARRIER, qasm3ParserBooleanLiteral, qasm3ParserLPAREN, qasm3ParserMINUS, qasm3ParserTILDE, qasm3ParserEXCLAMATION_POINT, qasm3ParserImaginaryLiteral, qasm3ParserBinaryIntegerLiteral, qasm3ParserOctalIntegerLiteral, qasm3ParserDecimalIntegerLiteral, qasm3ParserHexIntegerLiteral, qasm3ParserIdentifier, qasm3ParserHardwareQubit, qasm3ParserFloatLiteral, qasm3ParserTimingLiteral, qasm3ParserBitstringLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(206)
			p.Statement()
		}

	case qasm3ParserLBRACE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(207)
			p.Scope()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICalibrationGrammarStatementContext is an interface to support dynamic dispatch.
type ICalibrationGrammarStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEFCALGRAMMAR() antlr.TerminalNode
	StringLiteral() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode

	// IsCalibrationGrammarStatementContext differentiates from other interfaces.
	IsCalibrationGrammarStatementContext()
}

type CalibrationGrammarStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCalibrationGrammarStatementContext() *CalibrationGrammarStatementContext {
	var p = new(CalibrationGrammarStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_calibrationGrammarStatement
	return p
}

func InitEmptyCalibrationGrammarStatementContext(p *CalibrationGrammarStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_calibrationGrammarStatement
}

func (*CalibrationGrammarStatementContext) IsCalibrationGrammarStatementContext() {}

func NewCalibrationGrammarStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CalibrationGrammarStatementContext {
	var p = new(CalibrationGrammarStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_calibrationGrammarStatement

	return p
}

func (s *CalibrationGrammarStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CalibrationGrammarStatementContext) DEFCALGRAMMAR() antlr.TerminalNode {
	return s.GetToken(qasm3ParserDEFCALGRAMMAR, 0)
}

func (s *CalibrationGrammarStatementContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(qasm3ParserStringLiteral, 0)
}

func (s *CalibrationGrammarStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *CalibrationGrammarStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CalibrationGrammarStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CalibrationGrammarStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterCalibrationGrammarStatement(s)
	}
}

func (s *CalibrationGrammarStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitCalibrationGrammarStatement(s)
	}
}

func (s *CalibrationGrammarStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitCalibrationGrammarStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) CalibrationGrammarStatement() (localctx ICalibrationGrammarStatementContext) {
	localctx = NewCalibrationGrammarStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, qasm3ParserRULE_calibrationGrammarStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(210)
		p.Match(qasm3ParserDEFCALGRAMMAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(211)
		p.Match(qasm3ParserStringLiteral)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(212)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIncludeStatementContext is an interface to support dynamic dispatch.
type IIncludeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INCLUDE() antlr.TerminalNode
	StringLiteral() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode

	// IsIncludeStatementContext differentiates from other interfaces.
	IsIncludeStatementContext()
}

type IncludeStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncludeStatementContext() *IncludeStatementContext {
	var p = new(IncludeStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_includeStatement
	return p
}

func InitEmptyIncludeStatementContext(p *IncludeStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_includeStatement
}

func (*IncludeStatementContext) IsIncludeStatementContext() {}

func NewIncludeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IncludeStatementContext {
	var p = new(IncludeStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_includeStatement

	return p
}

func (s *IncludeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IncludeStatementContext) INCLUDE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserINCLUDE, 0)
}

func (s *IncludeStatementContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(qasm3ParserStringLiteral, 0)
}

func (s *IncludeStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *IncludeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IncludeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IncludeStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterIncludeStatement(s)
	}
}

func (s *IncludeStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitIncludeStatement(s)
	}
}

func (s *IncludeStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitIncludeStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) IncludeStatement() (localctx IIncludeStatementContext) {
	localctx = NewIncludeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, qasm3ParserRULE_includeStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(214)
		p.Match(qasm3ParserINCLUDE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(215)
		p.Match(qasm3ParserStringLiteral)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(216)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BREAK() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode

	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_breakStatement
	return p
}

func InitEmptyBreakStatementContext(p *BreakStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_breakStatement
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatementContext) BREAK() antlr.TerminalNode {
	return s.GetToken(qasm3ParserBREAK, 0)
}

func (s *BreakStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterBreakStatement(s)
	}
}

func (s *BreakStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitBreakStatement(s)
	}
}

func (s *BreakStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitBreakStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) BreakStatement() (localctx IBreakStatementContext) {
	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, qasm3ParserRULE_breakStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(218)
		p.Match(qasm3ParserBREAK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(219)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IContinueStatementContext is an interface to support dynamic dispatch.
type IContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONTINUE() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode

	// IsContinueStatementContext differentiates from other interfaces.
	IsContinueStatementContext()
}

type ContinueStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatementContext() *ContinueStatementContext {
	var p = new(ContinueStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_continueStatement
	return p
}

func InitEmptyContinueStatementContext(p *ContinueStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_continueStatement
}

func (*ContinueStatementContext) IsContinueStatementContext() {}

func NewContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatementContext {
	var p = new(ContinueStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_continueStatement

	return p
}

func (s *ContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatementContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCONTINUE, 0)
}

func (s *ContinueStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *ContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterContinueStatement(s)
	}
}

func (s *ContinueStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitContinueStatement(s)
	}
}

func (s *ContinueStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitContinueStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ContinueStatement() (localctx IContinueStatementContext) {
	localctx = NewContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, qasm3ParserRULE_continueStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(221)
		p.Match(qasm3ParserCONTINUE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(222)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEndStatementContext is an interface to support dynamic dispatch.
type IEndStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	END() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode

	// IsEndStatementContext differentiates from other interfaces.
	IsEndStatementContext()
}

type EndStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEndStatementContext() *EndStatementContext {
	var p = new(EndStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_endStatement
	return p
}

func InitEmptyEndStatementContext(p *EndStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_endStatement
}

func (*EndStatementContext) IsEndStatementContext() {}

func NewEndStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EndStatementContext {
	var p = new(EndStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_endStatement

	return p
}

func (s *EndStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EndStatementContext) END() antlr.TerminalNode {
	return s.GetToken(qasm3ParserEND, 0)
}

func (s *EndStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *EndStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EndStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EndStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterEndStatement(s)
	}
}

func (s *EndStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitEndStatement(s)
	}
}

func (s *EndStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitEndStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) EndStatement() (localctx IEndStatementContext) {
	localctx = NewEndStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, qasm3ParserRULE_endStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(224)
		p.Match(qasm3ParserEND)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(225)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForStatementContext is an interface to support dynamic dispatch.
type IForStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBody returns the body rule contexts.
	GetBody() IStatementOrScopeContext

	// SetBody sets the body rule contexts.
	SetBody(IStatementOrScopeContext)

	// Getter signatures
	FOR() antlr.TerminalNode
	ScalarType() IScalarTypeContext
	Identifier() antlr.TerminalNode
	IN() antlr.TerminalNode
	StatementOrScope() IStatementOrScopeContext
	SetExpression() ISetExpressionContext
	LBRACKET() antlr.TerminalNode
	RangeExpression() IRangeExpressionContext
	RBRACKET() antlr.TerminalNode
	Expression() IExpressionContext

	// IsForStatementContext differentiates from other interfaces.
	IsForStatementContext()
}

type ForStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	body   IStatementOrScopeContext
}

func NewEmptyForStatementContext() *ForStatementContext {
	var p = new(ForStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_forStatement
	return p
}

func InitEmptyForStatementContext(p *ForStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_forStatement
}

func (*ForStatementContext) IsForStatementContext() {}

func NewForStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStatementContext {
	var p = new(ForStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_forStatement

	return p
}

func (s *ForStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStatementContext) GetBody() IStatementOrScopeContext { return s.body }

func (s *ForStatementContext) SetBody(v IStatementOrScopeContext) { s.body = v }

func (s *ForStatementContext) FOR() antlr.TerminalNode {
	return s.GetToken(qasm3ParserFOR, 0)
}

func (s *ForStatementContext) ScalarType() IScalarTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScalarTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScalarTypeContext)
}

func (s *ForStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *ForStatementContext) IN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIN, 0)
}

func (s *ForStatementContext) StatementOrScope() IStatementOrScopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementOrScopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementOrScopeContext)
}

func (s *ForStatementContext) SetExpression() ISetExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISetExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISetExpressionContext)
}

func (s *ForStatementContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLBRACKET, 0)
}

func (s *ForStatementContext) RangeExpression() IRangeExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRangeExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRangeExpressionContext)
}

func (s *ForStatementContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRBRACKET, 0)
}

func (s *ForStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterForStatement(s)
	}
}

func (s *ForStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitForStatement(s)
	}
}

func (s *ForStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitForStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ForStatement() (localctx IForStatementContext) {
	localctx = NewForStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, qasm3ParserRULE_forStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(227)
		p.Match(qasm3ParserFOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(228)
		p.ScalarType()
	}
	{
		p.SetState(229)
		p.Match(qasm3ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(230)
		p.Match(qasm3ParserIN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(237)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserLBRACE:
		{
			p.SetState(231)
			p.SetExpression()
		}

	case qasm3ParserLBRACKET:
		{
			p.SetState(232)
			p.Match(qasm3ParserLBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(233)
			p.RangeExpression()
		}
		{
			p.SetState(234)
			p.Match(qasm3ParserRBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserARRAY, qasm3ParserDURATION, qasm3ParserSTRETCH, qasm3ParserDURATIONOF, qasm3ParserBooleanLiteral, qasm3ParserLPAREN, qasm3ParserMINUS, qasm3ParserTILDE, qasm3ParserEXCLAMATION_POINT, qasm3ParserImaginaryLiteral, qasm3ParserBinaryIntegerLiteral, qasm3ParserOctalIntegerLiteral, qasm3ParserDecimalIntegerLiteral, qasm3ParserHexIntegerLiteral, qasm3ParserIdentifier, qasm3ParserHardwareQubit, qasm3ParserFloatLiteral, qasm3ParserTimingLiteral, qasm3ParserBitstringLiteral:
		{
			p.SetState(236)
			p.expression(0)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(239)

		var _x = p.StatementOrScope()

		localctx.(*ForStatementContext).body = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIf_body returns the if_body rule contexts.
	GetIf_body() IStatementOrScopeContext

	// GetElse_body returns the else_body rule contexts.
	GetElse_body() IStatementOrScopeContext

	// SetIf_body sets the if_body rule contexts.
	SetIf_body(IStatementOrScopeContext)

	// SetElse_body sets the else_body rule contexts.
	SetElse_body(IStatementOrScopeContext)

	// Getter signatures
	IF() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	AllStatementOrScope() []IStatementOrScopeContext
	StatementOrScope(i int) IStatementOrScopeContext
	ELSE() antlr.TerminalNode

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	if_body   IStatementOrScopeContext
	else_body IStatementOrScopeContext
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_ifStatement
	return p
}

func InitEmptyIfStatementContext(p *IfStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_ifStatement
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) GetIf_body() IStatementOrScopeContext { return s.if_body }

func (s *IfStatementContext) GetElse_body() IStatementOrScopeContext { return s.else_body }

func (s *IfStatementContext) SetIf_body(v IStatementOrScopeContext) { s.if_body = v }

func (s *IfStatementContext) SetElse_body(v IStatementOrScopeContext) { s.else_body = v }

func (s *IfStatementContext) IF() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIF, 0)
}

func (s *IfStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLPAREN, 0)
}

func (s *IfStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRPAREN, 0)
}

func (s *IfStatementContext) AllStatementOrScope() []IStatementOrScopeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementOrScopeContext); ok {
			len++
		}
	}

	tst := make([]IStatementOrScopeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementOrScopeContext); ok {
			tst[i] = t.(IStatementOrScopeContext)
			i++
		}
	}

	return tst
}

func (s *IfStatementContext) StatementOrScope(i int) IStatementOrScopeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementOrScopeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementOrScopeContext)
}

func (s *IfStatementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserELSE, 0)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterIfStatement(s)
	}
}

func (s *IfStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitIfStatement(s)
	}
}

func (s *IfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) IfStatement() (localctx IIfStatementContext) {
	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, qasm3ParserRULE_ifStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(241)
		p.Match(qasm3ParserIF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(242)
		p.Match(qasm3ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(243)
		p.expression(0)
	}
	{
		p.SetState(244)
		p.Match(qasm3ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(245)

		var _x = p.StatementOrScope()

		localctx.(*IfStatementContext).if_body = _x
	}
	p.SetState(248)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(246)
			p.Match(qasm3ParserELSE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(247)

			var _x = p.StatementOrScope()

			localctx.(*IfStatementContext).else_body = _x
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RETURN() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	Expression() IExpressionContext
	MeasureExpression() IMeasureExpressionContext

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_returnStatement
	return p
}

func InitEmptyReturnStatementContext(p *ReturnStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_returnStatement
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) RETURN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRETURN, 0)
}

func (s *ReturnStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *ReturnStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnStatementContext) MeasureExpression() IMeasureExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeasureExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeasureExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterReturnStatement(s)
	}
}

func (s *ReturnStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitReturnStatement(s)
	}
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, qasm3ParserRULE_returnStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(250)
		p.Match(qasm3ParserRETURN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(253)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserARRAY, qasm3ParserDURATION, qasm3ParserSTRETCH, qasm3ParserDURATIONOF, qasm3ParserBooleanLiteral, qasm3ParserLPAREN, qasm3ParserMINUS, qasm3ParserTILDE, qasm3ParserEXCLAMATION_POINT, qasm3ParserImaginaryLiteral, qasm3ParserBinaryIntegerLiteral, qasm3ParserOctalIntegerLiteral, qasm3ParserDecimalIntegerLiteral, qasm3ParserHexIntegerLiteral, qasm3ParserIdentifier, qasm3ParserHardwareQubit, qasm3ParserFloatLiteral, qasm3ParserTimingLiteral, qasm3ParserBitstringLiteral:
		{
			p.SetState(251)
			p.expression(0)
		}

	case qasm3ParserMEASURE:
		{
			p.SetState(252)
			p.MeasureExpression()
		}

	case qasm3ParserSEMICOLON:

	default:
	}
	{
		p.SetState(255)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBody returns the body rule contexts.
	GetBody() IStatementOrScopeContext

	// SetBody sets the body rule contexts.
	SetBody(IStatementOrScopeContext)

	// Getter signatures
	WHILE() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	StatementOrScope() IStatementOrScopeContext

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	body   IStatementOrScopeContext
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_whileStatement
	return p
}

func InitEmptyWhileStatementContext(p *WhileStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_whileStatement
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) GetBody() IStatementOrScopeContext { return s.body }

func (s *WhileStatementContext) SetBody(v IStatementOrScopeContext) { s.body = v }

func (s *WhileStatementContext) WHILE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserWHILE, 0)
}

func (s *WhileStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLPAREN, 0)
}

func (s *WhileStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhileStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRPAREN, 0)
}

func (s *WhileStatementContext) StatementOrScope() IStatementOrScopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementOrScopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementOrScopeContext)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterWhileStatement(s)
	}
}

func (s *WhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitWhileStatement(s)
	}
}

func (s *WhileStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitWhileStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) WhileStatement() (localctx IWhileStatementContext) {
	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, qasm3ParserRULE_whileStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(257)
		p.Match(qasm3ParserWHILE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(258)
		p.Match(qasm3ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(259)
		p.expression(0)
	}
	{
		p.SetState(260)
		p.Match(qasm3ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(261)

		var _x = p.StatementOrScope()

		localctx.(*WhileStatementContext).body = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISwitchStatementContext is an interface to support dynamic dispatch.
type ISwitchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SWITCH() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllSwitchCaseItem() []ISwitchCaseItemContext
	SwitchCaseItem(i int) ISwitchCaseItemContext

	// IsSwitchStatementContext differentiates from other interfaces.
	IsSwitchStatementContext()
}

type SwitchStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStatementContext() *SwitchStatementContext {
	var p = new(SwitchStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_switchStatement
	return p
}

func InitEmptySwitchStatementContext(p *SwitchStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_switchStatement
}

func (*SwitchStatementContext) IsSwitchStatementContext() {}

func NewSwitchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStatementContext {
	var p = new(SwitchStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_switchStatement

	return p
}

func (s *SwitchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStatementContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSWITCH, 0)
}

func (s *SwitchStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLPAREN, 0)
}

func (s *SwitchStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SwitchStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRPAREN, 0)
}

func (s *SwitchStatementContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLBRACE, 0)
}

func (s *SwitchStatementContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRBRACE, 0)
}

func (s *SwitchStatementContext) AllSwitchCaseItem() []ISwitchCaseItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISwitchCaseItemContext); ok {
			len++
		}
	}

	tst := make([]ISwitchCaseItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISwitchCaseItemContext); ok {
			tst[i] = t.(ISwitchCaseItemContext)
			i++
		}
	}

	return tst
}

func (s *SwitchStatementContext) SwitchCaseItem(i int) ISwitchCaseItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchCaseItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchCaseItemContext)
}

func (s *SwitchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterSwitchStatement(s)
	}
}

func (s *SwitchStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitSwitchStatement(s)
	}
}

func (s *SwitchStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitSwitchStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) SwitchStatement() (localctx ISwitchStatementContext) {
	localctx = NewSwitchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, qasm3ParserRULE_switchStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(263)
		p.Match(qasm3ParserSWITCH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(264)
		p.Match(qasm3ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(265)
		p.expression(0)
	}
	{
		p.SetState(266)
		p.Match(qasm3ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(267)
		p.Match(qasm3ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(271)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == qasm3ParserCASE || _la == qasm3ParserDEFAULT {
		{
			p.SetState(268)
			p.SwitchCaseItem()
		}

		p.SetState(273)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(274)
		p.Match(qasm3ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISwitchCaseItemContext is an interface to support dynamic dispatch.
type ISwitchCaseItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASE() antlr.TerminalNode
	ExpressionList() IExpressionListContext
	Scope() IScopeContext
	DEFAULT() antlr.TerminalNode

	// IsSwitchCaseItemContext differentiates from other interfaces.
	IsSwitchCaseItemContext()
}

type SwitchCaseItemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchCaseItemContext() *SwitchCaseItemContext {
	var p = new(SwitchCaseItemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_switchCaseItem
	return p
}

func InitEmptySwitchCaseItemContext(p *SwitchCaseItemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_switchCaseItem
}

func (*SwitchCaseItemContext) IsSwitchCaseItemContext() {}

func NewSwitchCaseItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchCaseItemContext {
	var p = new(SwitchCaseItemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_switchCaseItem

	return p
}

func (s *SwitchCaseItemContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchCaseItemContext) CASE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCASE, 0)
}

func (s *SwitchCaseItemContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *SwitchCaseItemContext) Scope() IScopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScopeContext)
}

func (s *SwitchCaseItemContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(qasm3ParserDEFAULT, 0)
}

func (s *SwitchCaseItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchCaseItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchCaseItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterSwitchCaseItem(s)
	}
}

func (s *SwitchCaseItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitSwitchCaseItem(s)
	}
}

func (s *SwitchCaseItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitSwitchCaseItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) SwitchCaseItem() (localctx ISwitchCaseItemContext) {
	localctx = NewSwitchCaseItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, qasm3ParserRULE_switchCaseItem)
	p.SetState(282)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserCASE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(276)
			p.Match(qasm3ParserCASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(277)
			p.ExpressionList()
		}
		{
			p.SetState(278)
			p.Scope()
		}

	case qasm3ParserDEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(280)
			p.Match(qasm3ParserDEFAULT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(281)
			p.Scope()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBarrierStatementContext is an interface to support dynamic dispatch.
type IBarrierStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BARRIER() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	GateOperandList() IGateOperandListContext

	// IsBarrierStatementContext differentiates from other interfaces.
	IsBarrierStatementContext()
}

type BarrierStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBarrierStatementContext() *BarrierStatementContext {
	var p = new(BarrierStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_barrierStatement
	return p
}

func InitEmptyBarrierStatementContext(p *BarrierStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_barrierStatement
}

func (*BarrierStatementContext) IsBarrierStatementContext() {}

func NewBarrierStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BarrierStatementContext {
	var p = new(BarrierStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_barrierStatement

	return p
}

func (s *BarrierStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BarrierStatementContext) BARRIER() antlr.TerminalNode {
	return s.GetToken(qasm3ParserBARRIER, 0)
}

func (s *BarrierStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *BarrierStatementContext) GateOperandList() IGateOperandListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGateOperandListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGateOperandListContext)
}

func (s *BarrierStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BarrierStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BarrierStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterBarrierStatement(s)
	}
}

func (s *BarrierStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitBarrierStatement(s)
	}
}

func (s *BarrierStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitBarrierStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) BarrierStatement() (localctx IBarrierStatementContext) {
	localctx = NewBarrierStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, qasm3ParserRULE_barrierStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(284)
		p.Match(qasm3ParserBARRIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(286)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserIdentifier || _la == qasm3ParserHardwareQubit {
		{
			p.SetState(285)
			p.GateOperandList()
		}

	}
	{
		p.SetState(288)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBoxStatementContext is an interface to support dynamic dispatch.
type IBoxStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BOX() antlr.TerminalNode
	Scope() IScopeContext
	Designator() IDesignatorContext

	// IsBoxStatementContext differentiates from other interfaces.
	IsBoxStatementContext()
}

type BoxStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoxStatementContext() *BoxStatementContext {
	var p = new(BoxStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_boxStatement
	return p
}

func InitEmptyBoxStatementContext(p *BoxStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_boxStatement
}

func (*BoxStatementContext) IsBoxStatementContext() {}

func NewBoxStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BoxStatementContext {
	var p = new(BoxStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_boxStatement

	return p
}

func (s *BoxStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BoxStatementContext) BOX() antlr.TerminalNode {
	return s.GetToken(qasm3ParserBOX, 0)
}

func (s *BoxStatementContext) Scope() IScopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScopeContext)
}

func (s *BoxStatementContext) Designator() IDesignatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDesignatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDesignatorContext)
}

func (s *BoxStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoxStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BoxStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterBoxStatement(s)
	}
}

func (s *BoxStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitBoxStatement(s)
	}
}

func (s *BoxStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitBoxStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) BoxStatement() (localctx IBoxStatementContext) {
	localctx = NewBoxStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, qasm3ParserRULE_boxStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(290)
		p.Match(qasm3ParserBOX)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(292)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserLBRACKET {
		{
			p.SetState(291)
			p.Designator()
		}

	}
	{
		p.SetState(294)
		p.Scope()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDelayStatementContext is an interface to support dynamic dispatch.
type IDelayStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DELAY() antlr.TerminalNode
	Designator() IDesignatorContext
	SEMICOLON() antlr.TerminalNode
	GateOperandList() IGateOperandListContext

	// IsDelayStatementContext differentiates from other interfaces.
	IsDelayStatementContext()
}

type DelayStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelayStatementContext() *DelayStatementContext {
	var p = new(DelayStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_delayStatement
	return p
}

func InitEmptyDelayStatementContext(p *DelayStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_delayStatement
}

func (*DelayStatementContext) IsDelayStatementContext() {}

func NewDelayStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DelayStatementContext {
	var p = new(DelayStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_delayStatement

	return p
}

func (s *DelayStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DelayStatementContext) DELAY() antlr.TerminalNode {
	return s.GetToken(qasm3ParserDELAY, 0)
}

func (s *DelayStatementContext) Designator() IDesignatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDesignatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDesignatorContext)
}

func (s *DelayStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *DelayStatementContext) GateOperandList() IGateOperandListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGateOperandListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGateOperandListContext)
}

func (s *DelayStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DelayStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DelayStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterDelayStatement(s)
	}
}

func (s *DelayStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitDelayStatement(s)
	}
}

func (s *DelayStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitDelayStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) DelayStatement() (localctx IDelayStatementContext) {
	localctx = NewDelayStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, qasm3ParserRULE_delayStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(296)
		p.Match(qasm3ParserDELAY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(297)
		p.Designator()
	}
	p.SetState(299)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserIdentifier || _la == qasm3ParserHardwareQubit {
		{
			p.SetState(298)
			p.GateOperandList()
		}

	}
	{
		p.SetState(301)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INopStatementContext is an interface to support dynamic dispatch.
type INopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NOP() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	GateOperandList() IGateOperandListContext

	// IsNopStatementContext differentiates from other interfaces.
	IsNopStatementContext()
}

type NopStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNopStatementContext() *NopStatementContext {
	var p = new(NopStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_nopStatement
	return p
}

func InitEmptyNopStatementContext(p *NopStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_nopStatement
}

func (*NopStatementContext) IsNopStatementContext() {}

func NewNopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NopStatementContext {
	var p = new(NopStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_nopStatement

	return p
}

func (s *NopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NopStatementContext) NOP() antlr.TerminalNode {
	return s.GetToken(qasm3ParserNOP, 0)
}

func (s *NopStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *NopStatementContext) GateOperandList() IGateOperandListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGateOperandListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGateOperandListContext)
}

func (s *NopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NopStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterNopStatement(s)
	}
}

func (s *NopStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitNopStatement(s)
	}
}

func (s *NopStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitNopStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) NopStatement() (localctx INopStatementContext) {
	localctx = NewNopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, qasm3ParserRULE_nopStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(303)
		p.Match(qasm3ParserNOP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(305)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserIdentifier || _la == qasm3ParserHardwareQubit {
		{
			p.SetState(304)
			p.GateOperandList()
		}

	}
	{
		p.SetState(307)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGateCallStatementContext is an interface to support dynamic dispatch.
type IGateCallStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	GateOperandList() IGateOperandListContext
	SEMICOLON() antlr.TerminalNode
	AllGateModifier() []IGateModifierContext
	GateModifier(i int) IGateModifierContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Designator() IDesignatorContext
	ExpressionList() IExpressionListContext
	GPHASE() antlr.TerminalNode

	// IsGateCallStatementContext differentiates from other interfaces.
	IsGateCallStatementContext()
}

type GateCallStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGateCallStatementContext() *GateCallStatementContext {
	var p = new(GateCallStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_gateCallStatement
	return p
}

func InitEmptyGateCallStatementContext(p *GateCallStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_gateCallStatement
}

func (*GateCallStatementContext) IsGateCallStatementContext() {}

func NewGateCallStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GateCallStatementContext {
	var p = new(GateCallStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_gateCallStatement

	return p
}

func (s *GateCallStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *GateCallStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *GateCallStatementContext) GateOperandList() IGateOperandListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGateOperandListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGateOperandListContext)
}

func (s *GateCallStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *GateCallStatementContext) AllGateModifier() []IGateModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGateModifierContext); ok {
			len++
		}
	}

	tst := make([]IGateModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGateModifierContext); ok {
			tst[i] = t.(IGateModifierContext)
			i++
		}
	}

	return tst
}

func (s *GateCallStatementContext) GateModifier(i int) IGateModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGateModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGateModifierContext)
}

func (s *GateCallStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLPAREN, 0)
}

func (s *GateCallStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRPAREN, 0)
}

func (s *GateCallStatementContext) Designator() IDesignatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDesignatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDesignatorContext)
}

func (s *GateCallStatementContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *GateCallStatementContext) GPHASE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserGPHASE, 0)
}

func (s *GateCallStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GateCallStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GateCallStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterGateCallStatement(s)
	}
}

func (s *GateCallStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitGateCallStatement(s)
	}
}

func (s *GateCallStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitGateCallStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) GateCallStatement() (localctx IGateCallStatementContext) {
	localctx = NewGateCallStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, qasm3ParserRULE_gateCallStatement)
	var _la int

	p.SetState(350)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 26, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(312)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1055531162664960) != 0 {
			{
				p.SetState(309)
				p.GateModifier()
			}

			p.SetState(314)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(315)
			p.Match(qasm3ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(321)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserLPAREN {
			{
				p.SetState(316)
				p.Match(qasm3ParserLPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(318)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2380183172211015680) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&268179457) != 0) {
				{
					p.SetState(317)
					p.ExpressionList()
				}

			}
			{
				p.SetState(320)
				p.Match(qasm3ParserRPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(324)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserLBRACKET {
			{
				p.SetState(323)
				p.Designator()
			}

		}
		{
			p.SetState(326)
			p.GateOperandList()
		}
		{
			p.SetState(327)
			p.Match(qasm3ParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(332)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1055531162664960) != 0 {
			{
				p.SetState(329)
				p.GateModifier()
			}

			p.SetState(334)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(335)
			p.Match(qasm3ParserGPHASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(341)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserLPAREN {
			{
				p.SetState(336)
				p.Match(qasm3ParserLPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(338)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2380183172211015680) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&268179457) != 0) {
				{
					p.SetState(337)
					p.ExpressionList()
				}

			}
			{
				p.SetState(340)
				p.Match(qasm3ParserRPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(344)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserLBRACKET {
			{
				p.SetState(343)
				p.Designator()
			}

		}
		p.SetState(347)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserIdentifier || _la == qasm3ParserHardwareQubit {
			{
				p.SetState(346)
				p.GateOperandList()
			}

		}
		{
			p.SetState(349)
			p.Match(qasm3ParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMeasureArrowAssignmentStatementContext is an interface to support dynamic dispatch.
type IMeasureArrowAssignmentStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MeasureExpression() IMeasureExpressionContext
	SEMICOLON() antlr.TerminalNode
	ARROW() antlr.TerminalNode
	IndexedIdentifier() IIndexedIdentifierContext

	// IsMeasureArrowAssignmentStatementContext differentiates from other interfaces.
	IsMeasureArrowAssignmentStatementContext()
}

type MeasureArrowAssignmentStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeasureArrowAssignmentStatementContext() *MeasureArrowAssignmentStatementContext {
	var p = new(MeasureArrowAssignmentStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_measureArrowAssignmentStatement
	return p
}

func InitEmptyMeasureArrowAssignmentStatementContext(p *MeasureArrowAssignmentStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_measureArrowAssignmentStatement
}

func (*MeasureArrowAssignmentStatementContext) IsMeasureArrowAssignmentStatementContext() {}

func NewMeasureArrowAssignmentStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MeasureArrowAssignmentStatementContext {
	var p = new(MeasureArrowAssignmentStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_measureArrowAssignmentStatement

	return p
}

func (s *MeasureArrowAssignmentStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *MeasureArrowAssignmentStatementContext) MeasureExpression() IMeasureExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeasureExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeasureExpressionContext)
}

func (s *MeasureArrowAssignmentStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *MeasureArrowAssignmentStatementContext) ARROW() antlr.TerminalNode {
	return s.GetToken(qasm3ParserARROW, 0)
}

func (s *MeasureArrowAssignmentStatementContext) IndexedIdentifier() IIndexedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexedIdentifierContext)
}

func (s *MeasureArrowAssignmentStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MeasureArrowAssignmentStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MeasureArrowAssignmentStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterMeasureArrowAssignmentStatement(s)
	}
}

func (s *MeasureArrowAssignmentStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitMeasureArrowAssignmentStatement(s)
	}
}

func (s *MeasureArrowAssignmentStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitMeasureArrowAssignmentStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) MeasureArrowAssignmentStatement() (localctx IMeasureArrowAssignmentStatementContext) {
	localctx = NewMeasureArrowAssignmentStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, qasm3ParserRULE_measureArrowAssignmentStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(352)
		p.MeasureExpression()
	}
	p.SetState(355)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserARROW {
		{
			p.SetState(353)
			p.Match(qasm3ParserARROW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(354)
			p.IndexedIdentifier()
		}

	}
	{
		p.SetState(357)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IResetStatementContext is an interface to support dynamic dispatch.
type IResetStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RESET() antlr.TerminalNode
	GateOperand() IGateOperandContext
	SEMICOLON() antlr.TerminalNode

	// IsResetStatementContext differentiates from other interfaces.
	IsResetStatementContext()
}

type ResetStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResetStatementContext() *ResetStatementContext {
	var p = new(ResetStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_resetStatement
	return p
}

func InitEmptyResetStatementContext(p *ResetStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_resetStatement
}

func (*ResetStatementContext) IsResetStatementContext() {}

func NewResetStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResetStatementContext {
	var p = new(ResetStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_resetStatement

	return p
}

func (s *ResetStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ResetStatementContext) RESET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRESET, 0)
}

func (s *ResetStatementContext) GateOperand() IGateOperandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGateOperandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGateOperandContext)
}

func (s *ResetStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *ResetStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResetStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResetStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterResetStatement(s)
	}
}

func (s *ResetStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitResetStatement(s)
	}
}

func (s *ResetStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitResetStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ResetStatement() (localctx IResetStatementContext) {
	localctx = NewResetStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, qasm3ParserRULE_resetStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(359)
		p.Match(qasm3ParserRESET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(360)
		p.GateOperand()
	}
	{
		p.SetState(361)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAliasDeclarationStatementContext is an interface to support dynamic dispatch.
type IAliasDeclarationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LET() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	EQUALS() antlr.TerminalNode
	AliasExpression() IAliasExpressionContext
	SEMICOLON() antlr.TerminalNode

	// IsAliasDeclarationStatementContext differentiates from other interfaces.
	IsAliasDeclarationStatementContext()
}

type AliasDeclarationStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasDeclarationStatementContext() *AliasDeclarationStatementContext {
	var p = new(AliasDeclarationStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_aliasDeclarationStatement
	return p
}

func InitEmptyAliasDeclarationStatementContext(p *AliasDeclarationStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_aliasDeclarationStatement
}

func (*AliasDeclarationStatementContext) IsAliasDeclarationStatementContext() {}

func NewAliasDeclarationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasDeclarationStatementContext {
	var p = new(AliasDeclarationStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_aliasDeclarationStatement

	return p
}

func (s *AliasDeclarationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasDeclarationStatementContext) LET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLET, 0)
}

func (s *AliasDeclarationStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *AliasDeclarationStatementContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(qasm3ParserEQUALS, 0)
}

func (s *AliasDeclarationStatementContext) AliasExpression() IAliasExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasExpressionContext)
}

func (s *AliasDeclarationStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *AliasDeclarationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasDeclarationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasDeclarationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterAliasDeclarationStatement(s)
	}
}

func (s *AliasDeclarationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitAliasDeclarationStatement(s)
	}
}

func (s *AliasDeclarationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitAliasDeclarationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) AliasDeclarationStatement() (localctx IAliasDeclarationStatementContext) {
	localctx = NewAliasDeclarationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, qasm3ParserRULE_aliasDeclarationStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(363)
		p.Match(qasm3ParserLET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(364)
		p.Match(qasm3ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(365)
		p.Match(qasm3ParserEQUALS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(366)
		p.AliasExpression()
	}
	{
		p.SetState(367)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassicalDeclarationStatementContext is an interface to support dynamic dispatch.
type IClassicalDeclarationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	ScalarType() IScalarTypeContext
	ArrayType() IArrayTypeContext
	EQUALS() antlr.TerminalNode
	DeclarationExpression() IDeclarationExpressionContext

	// IsClassicalDeclarationStatementContext differentiates from other interfaces.
	IsClassicalDeclarationStatementContext()
}

type ClassicalDeclarationStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassicalDeclarationStatementContext() *ClassicalDeclarationStatementContext {
	var p = new(ClassicalDeclarationStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_classicalDeclarationStatement
	return p
}

func InitEmptyClassicalDeclarationStatementContext(p *ClassicalDeclarationStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_classicalDeclarationStatement
}

func (*ClassicalDeclarationStatementContext) IsClassicalDeclarationStatementContext() {}

func NewClassicalDeclarationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassicalDeclarationStatementContext {
	var p = new(ClassicalDeclarationStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_classicalDeclarationStatement

	return p
}

func (s *ClassicalDeclarationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassicalDeclarationStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *ClassicalDeclarationStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *ClassicalDeclarationStatementContext) ScalarType() IScalarTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScalarTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScalarTypeContext)
}

func (s *ClassicalDeclarationStatementContext) ArrayType() IArrayTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayTypeContext)
}

func (s *ClassicalDeclarationStatementContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(qasm3ParserEQUALS, 0)
}

func (s *ClassicalDeclarationStatementContext) DeclarationExpression() IDeclarationExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationExpressionContext)
}

func (s *ClassicalDeclarationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassicalDeclarationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassicalDeclarationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterClassicalDeclarationStatement(s)
	}
}

func (s *ClassicalDeclarationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitClassicalDeclarationStatement(s)
	}
}

func (s *ClassicalDeclarationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitClassicalDeclarationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ClassicalDeclarationStatement() (localctx IClassicalDeclarationStatementContext) {
	localctx = NewClassicalDeclarationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, qasm3ParserRULE_classicalDeclarationStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(371)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserDURATION, qasm3ParserSTRETCH:
		{
			p.SetState(369)
			p.ScalarType()
		}

	case qasm3ParserARRAY:
		{
			p.SetState(370)
			p.ArrayType()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(373)
		p.Match(qasm3ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(376)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserEQUALS {
		{
			p.SetState(374)
			p.Match(qasm3ParserEQUALS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(375)
			p.DeclarationExpression()
		}

	}
	{
		p.SetState(378)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstDeclarationStatementContext is an interface to support dynamic dispatch.
type IConstDeclarationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONST() antlr.TerminalNode
	ScalarType() IScalarTypeContext
	Identifier() antlr.TerminalNode
	EQUALS() antlr.TerminalNode
	DeclarationExpression() IDeclarationExpressionContext
	SEMICOLON() antlr.TerminalNode

	// IsConstDeclarationStatementContext differentiates from other interfaces.
	IsConstDeclarationStatementContext()
}

type ConstDeclarationStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstDeclarationStatementContext() *ConstDeclarationStatementContext {
	var p = new(ConstDeclarationStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_constDeclarationStatement
	return p
}

func InitEmptyConstDeclarationStatementContext(p *ConstDeclarationStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_constDeclarationStatement
}

func (*ConstDeclarationStatementContext) IsConstDeclarationStatementContext() {}

func NewConstDeclarationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstDeclarationStatementContext {
	var p = new(ConstDeclarationStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_constDeclarationStatement

	return p
}

func (s *ConstDeclarationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstDeclarationStatementContext) CONST() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCONST, 0)
}

func (s *ConstDeclarationStatementContext) ScalarType() IScalarTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScalarTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScalarTypeContext)
}

func (s *ConstDeclarationStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *ConstDeclarationStatementContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(qasm3ParserEQUALS, 0)
}

func (s *ConstDeclarationStatementContext) DeclarationExpression() IDeclarationExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationExpressionContext)
}

func (s *ConstDeclarationStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *ConstDeclarationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstDeclarationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstDeclarationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterConstDeclarationStatement(s)
	}
}

func (s *ConstDeclarationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitConstDeclarationStatement(s)
	}
}

func (s *ConstDeclarationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitConstDeclarationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ConstDeclarationStatement() (localctx IConstDeclarationStatementContext) {
	localctx = NewConstDeclarationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, qasm3ParserRULE_constDeclarationStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(380)
		p.Match(qasm3ParserCONST)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(381)
		p.ScalarType()
	}
	{
		p.SetState(382)
		p.Match(qasm3ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(383)
		p.Match(qasm3ParserEQUALS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(384)
		p.DeclarationExpression()
	}
	{
		p.SetState(385)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIoDeclarationStatementContext is an interface to support dynamic dispatch.
type IIoDeclarationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	INPUT() antlr.TerminalNode
	OUTPUT() antlr.TerminalNode
	ScalarType() IScalarTypeContext
	ArrayType() IArrayTypeContext

	// IsIoDeclarationStatementContext differentiates from other interfaces.
	IsIoDeclarationStatementContext()
}

type IoDeclarationStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIoDeclarationStatementContext() *IoDeclarationStatementContext {
	var p = new(IoDeclarationStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_ioDeclarationStatement
	return p
}

func InitEmptyIoDeclarationStatementContext(p *IoDeclarationStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_ioDeclarationStatement
}

func (*IoDeclarationStatementContext) IsIoDeclarationStatementContext() {}

func NewIoDeclarationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IoDeclarationStatementContext {
	var p = new(IoDeclarationStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_ioDeclarationStatement

	return p
}

func (s *IoDeclarationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IoDeclarationStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *IoDeclarationStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *IoDeclarationStatementContext) INPUT() antlr.TerminalNode {
	return s.GetToken(qasm3ParserINPUT, 0)
}

func (s *IoDeclarationStatementContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(qasm3ParserOUTPUT, 0)
}

func (s *IoDeclarationStatementContext) ScalarType() IScalarTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScalarTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScalarTypeContext)
}

func (s *IoDeclarationStatementContext) ArrayType() IArrayTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayTypeContext)
}

func (s *IoDeclarationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IoDeclarationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IoDeclarationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterIoDeclarationStatement(s)
	}
}

func (s *IoDeclarationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitIoDeclarationStatement(s)
	}
}

func (s *IoDeclarationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitIoDeclarationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) IoDeclarationStatement() (localctx IIoDeclarationStatementContext) {
	localctx = NewIoDeclarationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, qasm3ParserRULE_ioDeclarationStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(387)
		_la = p.GetTokenStream().LA(1)

		if !(_la == qasm3ParserINPUT || _la == qasm3ParserOUTPUT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(390)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserDURATION, qasm3ParserSTRETCH:
		{
			p.SetState(388)
			p.ScalarType()
		}

	case qasm3ParserARRAY:
		{
			p.SetState(389)
			p.ArrayType()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(392)
		p.Match(qasm3ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(393)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOldStyleDeclarationStatementContext is an interface to support dynamic dispatch.
type IOldStyleDeclarationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	CREG() antlr.TerminalNode
	QREG() antlr.TerminalNode
	Designator() IDesignatorContext

	// IsOldStyleDeclarationStatementContext differentiates from other interfaces.
	IsOldStyleDeclarationStatementContext()
}

type OldStyleDeclarationStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOldStyleDeclarationStatementContext() *OldStyleDeclarationStatementContext {
	var p = new(OldStyleDeclarationStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_oldStyleDeclarationStatement
	return p
}

func InitEmptyOldStyleDeclarationStatementContext(p *OldStyleDeclarationStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_oldStyleDeclarationStatement
}

func (*OldStyleDeclarationStatementContext) IsOldStyleDeclarationStatementContext() {}

func NewOldStyleDeclarationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OldStyleDeclarationStatementContext {
	var p = new(OldStyleDeclarationStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_oldStyleDeclarationStatement

	return p
}

func (s *OldStyleDeclarationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OldStyleDeclarationStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *OldStyleDeclarationStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *OldStyleDeclarationStatementContext) CREG() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCREG, 0)
}

func (s *OldStyleDeclarationStatementContext) QREG() antlr.TerminalNode {
	return s.GetToken(qasm3ParserQREG, 0)
}

func (s *OldStyleDeclarationStatementContext) Designator() IDesignatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDesignatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDesignatorContext)
}

func (s *OldStyleDeclarationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OldStyleDeclarationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OldStyleDeclarationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterOldStyleDeclarationStatement(s)
	}
}

func (s *OldStyleDeclarationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitOldStyleDeclarationStatement(s)
	}
}

func (s *OldStyleDeclarationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitOldStyleDeclarationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) OldStyleDeclarationStatement() (localctx IOldStyleDeclarationStatementContext) {
	localctx = NewOldStyleDeclarationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, qasm3ParserRULE_oldStyleDeclarationStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(395)
		_la = p.GetTokenStream().LA(1)

		if !(_la == qasm3ParserQREG || _la == qasm3ParserCREG) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(396)
		p.Match(qasm3ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(398)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserLBRACKET {
		{
			p.SetState(397)
			p.Designator()
		}

	}
	{
		p.SetState(400)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuantumDeclarationStatementContext is an interface to support dynamic dispatch.
type IQuantumDeclarationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QubitType() IQubitTypeContext
	Identifier() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode

	// IsQuantumDeclarationStatementContext differentiates from other interfaces.
	IsQuantumDeclarationStatementContext()
}

type QuantumDeclarationStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuantumDeclarationStatementContext() *QuantumDeclarationStatementContext {
	var p = new(QuantumDeclarationStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_quantumDeclarationStatement
	return p
}

func InitEmptyQuantumDeclarationStatementContext(p *QuantumDeclarationStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_quantumDeclarationStatement
}

func (*QuantumDeclarationStatementContext) IsQuantumDeclarationStatementContext() {}

func NewQuantumDeclarationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QuantumDeclarationStatementContext {
	var p = new(QuantumDeclarationStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_quantumDeclarationStatement

	return p
}

func (s *QuantumDeclarationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *QuantumDeclarationStatementContext) QubitType() IQubitTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQubitTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQubitTypeContext)
}

func (s *QuantumDeclarationStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *QuantumDeclarationStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *QuantumDeclarationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuantumDeclarationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QuantumDeclarationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterQuantumDeclarationStatement(s)
	}
}

func (s *QuantumDeclarationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitQuantumDeclarationStatement(s)
	}
}

func (s *QuantumDeclarationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitQuantumDeclarationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) QuantumDeclarationStatement() (localctx IQuantumDeclarationStatementContext) {
	localctx = NewQuantumDeclarationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, qasm3ParserRULE_quantumDeclarationStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(402)
		p.QubitType()
	}
	{
		p.SetState(403)
		p.Match(qasm3ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(404)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefStatementContext is an interface to support dynamic dispatch.
type IDefStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEF() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Scope() IScopeContext
	ArgumentDefinitionList() IArgumentDefinitionListContext
	ReturnSignature() IReturnSignatureContext

	// IsDefStatementContext differentiates from other interfaces.
	IsDefStatementContext()
}

type DefStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefStatementContext() *DefStatementContext {
	var p = new(DefStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defStatement
	return p
}

func InitEmptyDefStatementContext(p *DefStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defStatement
}

func (*DefStatementContext) IsDefStatementContext() {}

func NewDefStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefStatementContext {
	var p = new(DefStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_defStatement

	return p
}

func (s *DefStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DefStatementContext) DEF() antlr.TerminalNode {
	return s.GetToken(qasm3ParserDEF, 0)
}

func (s *DefStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *DefStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLPAREN, 0)
}

func (s *DefStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRPAREN, 0)
}

func (s *DefStatementContext) Scope() IScopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScopeContext)
}

func (s *DefStatementContext) ArgumentDefinitionList() IArgumentDefinitionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentDefinitionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentDefinitionListContext)
}

func (s *DefStatementContext) ReturnSignature() IReturnSignatureContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturnSignatureContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturnSignatureContext)
}

func (s *DefStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterDefStatement(s)
	}
}

func (s *DefStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitDefStatement(s)
	}
}

func (s *DefStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitDefStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) DefStatement() (localctx IDefStatementContext) {
	localctx = NewDefStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, qasm3ParserRULE_defStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(406)
		p.Match(qasm3ParserDEF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(407)
		p.Match(qasm3ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(408)
		p.Match(qasm3ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(410)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&28586765451264) != 0 {
		{
			p.SetState(409)
			p.ArgumentDefinitionList()
		}

	}
	{
		p.SetState(412)
		p.Match(qasm3ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(414)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserARROW {
		{
			p.SetState(413)
			p.ReturnSignature()
		}

	}
	{
		p.SetState(416)
		p.Scope()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExternStatementContext is an interface to support dynamic dispatch.
type IExternStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXTERN() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	ExternArgumentList() IExternArgumentListContext
	ReturnSignature() IReturnSignatureContext

	// IsExternStatementContext differentiates from other interfaces.
	IsExternStatementContext()
}

type ExternStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternStatementContext() *ExternStatementContext {
	var p = new(ExternStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_externStatement
	return p
}

func InitEmptyExternStatementContext(p *ExternStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_externStatement
}

func (*ExternStatementContext) IsExternStatementContext() {}

func NewExternStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExternStatementContext {
	var p = new(ExternStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_externStatement

	return p
}

func (s *ExternStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExternStatementContext) EXTERN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserEXTERN, 0)
}

func (s *ExternStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *ExternStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLPAREN, 0)
}

func (s *ExternStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRPAREN, 0)
}

func (s *ExternStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *ExternStatementContext) ExternArgumentList() IExternArgumentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternArgumentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternArgumentListContext)
}

func (s *ExternStatementContext) ReturnSignature() IReturnSignatureContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturnSignatureContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturnSignatureContext)
}

func (s *ExternStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExternStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExternStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterExternStatement(s)
	}
}

func (s *ExternStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitExternStatement(s)
	}
}

func (s *ExternStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitExternStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ExternStatement() (localctx IExternStatementContext) {
	localctx = NewExternStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, qasm3ParserRULE_externStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(418)
		p.Match(qasm3ParserEXTERN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(419)
		p.Match(qasm3ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(420)
		p.Match(qasm3ParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(422)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&28580323000320) != 0 {
		{
			p.SetState(421)
			p.ExternArgumentList()
		}

	}
	{
		p.SetState(424)
		p.Match(qasm3ParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(426)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserARROW {
		{
			p.SetState(425)
			p.ReturnSignature()
		}

	}
	{
		p.SetState(428)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGateStatementContext is an interface to support dynamic dispatch.
type IGateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetParams returns the params rule contexts.
	GetParams() IIdentifierListContext

	// GetQubits returns the qubits rule contexts.
	GetQubits() IIdentifierListContext

	// SetParams sets the params rule contexts.
	SetParams(IIdentifierListContext)

	// SetQubits sets the qubits rule contexts.
	SetQubits(IIdentifierListContext)

	// Getter signatures
	GATE() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	Scope() IScopeContext
	AllIdentifierList() []IIdentifierListContext
	IdentifierList(i int) IIdentifierListContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode

	// IsGateStatementContext differentiates from other interfaces.
	IsGateStatementContext()
}

type GateStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	params IIdentifierListContext
	qubits IIdentifierListContext
}

func NewEmptyGateStatementContext() *GateStatementContext {
	var p = new(GateStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_gateStatement
	return p
}

func InitEmptyGateStatementContext(p *GateStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_gateStatement
}

func (*GateStatementContext) IsGateStatementContext() {}

func NewGateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GateStatementContext {
	var p = new(GateStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_gateStatement

	return p
}

func (s *GateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *GateStatementContext) GetParams() IIdentifierListContext { return s.params }

func (s *GateStatementContext) GetQubits() IIdentifierListContext { return s.qubits }

func (s *GateStatementContext) SetParams(v IIdentifierListContext) { s.params = v }

func (s *GateStatementContext) SetQubits(v IIdentifierListContext) { s.qubits = v }

func (s *GateStatementContext) GATE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserGATE, 0)
}

func (s *GateStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *GateStatementContext) Scope() IScopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScopeContext)
}

func (s *GateStatementContext) AllIdentifierList() []IIdentifierListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierListContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierListContext); ok {
			tst[i] = t.(IIdentifierListContext)
			i++
		}
	}

	return tst
}

func (s *GateStatementContext) IdentifierList(i int) IIdentifierListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *GateStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLPAREN, 0)
}

func (s *GateStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRPAREN, 0)
}

func (s *GateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GateStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterGateStatement(s)
	}
}

func (s *GateStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitGateStatement(s)
	}
}

func (s *GateStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitGateStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) GateStatement() (localctx IGateStatementContext) {
	localctx = NewGateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, qasm3ParserRULE_gateStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(430)
		p.Match(qasm3ParserGATE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(431)
		p.Match(qasm3ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(437)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserLPAREN {
		{
			p.SetState(432)
			p.Match(qasm3ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(434)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserIdentifier {
			{
				p.SetState(433)

				var _x = p.IdentifierList()

				localctx.(*GateStatementContext).params = _x
			}

		}
		{
			p.SetState(436)
			p.Match(qasm3ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(439)

		var _x = p.IdentifierList()

		localctx.(*GateStatementContext).qubits = _x
	}
	{
		p.SetState(440)
		p.Scope()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignmentStatementContext is an interface to support dynamic dispatch.
type IAssignmentStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// Getter signatures
	IndexedIdentifier() IIndexedIdentifierContext
	SEMICOLON() antlr.TerminalNode
	EQUALS() antlr.TerminalNode
	CompoundAssignmentOperator() antlr.TerminalNode
	Expression() IExpressionContext
	MeasureExpression() IMeasureExpressionContext

	// IsAssignmentStatementContext differentiates from other interfaces.
	IsAssignmentStatementContext()
}

type AssignmentStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyAssignmentStatementContext() *AssignmentStatementContext {
	var p = new(AssignmentStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_assignmentStatement
	return p
}

func InitEmptyAssignmentStatementContext(p *AssignmentStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_assignmentStatement
}

func (*AssignmentStatementContext) IsAssignmentStatementContext() {}

func NewAssignmentStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentStatementContext {
	var p = new(AssignmentStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_assignmentStatement

	return p
}

func (s *AssignmentStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentStatementContext) GetOp() antlr.Token { return s.op }

func (s *AssignmentStatementContext) SetOp(v antlr.Token) { s.op = v }

func (s *AssignmentStatementContext) IndexedIdentifier() IIndexedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexedIdentifierContext)
}

func (s *AssignmentStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *AssignmentStatementContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(qasm3ParserEQUALS, 0)
}

func (s *AssignmentStatementContext) CompoundAssignmentOperator() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCompoundAssignmentOperator, 0)
}

func (s *AssignmentStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AssignmentStatementContext) MeasureExpression() IMeasureExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeasureExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeasureExpressionContext)
}

func (s *AssignmentStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterAssignmentStatement(s)
	}
}

func (s *AssignmentStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitAssignmentStatement(s)
	}
}

func (s *AssignmentStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitAssignmentStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) AssignmentStatement() (localctx IAssignmentStatementContext) {
	localctx = NewAssignmentStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, qasm3ParserRULE_assignmentStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(442)
		p.IndexedIdentifier()
	}
	{
		p.SetState(443)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AssignmentStatementContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == qasm3ParserEQUALS || _la == qasm3ParserCompoundAssignmentOperator) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AssignmentStatementContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(446)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserARRAY, qasm3ParserDURATION, qasm3ParserSTRETCH, qasm3ParserDURATIONOF, qasm3ParserBooleanLiteral, qasm3ParserLPAREN, qasm3ParserMINUS, qasm3ParserTILDE, qasm3ParserEXCLAMATION_POINT, qasm3ParserImaginaryLiteral, qasm3ParserBinaryIntegerLiteral, qasm3ParserOctalIntegerLiteral, qasm3ParserDecimalIntegerLiteral, qasm3ParserHexIntegerLiteral, qasm3ParserIdentifier, qasm3ParserHardwareQubit, qasm3ParserFloatLiteral, qasm3ParserTimingLiteral, qasm3ParserBitstringLiteral:
		{
			p.SetState(444)
			p.expression(0)
		}

	case qasm3ParserMEASURE:
		{
			p.SetState(445)
			p.MeasureExpression()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(448)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	SEMICOLON() antlr.TerminalNode

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_expressionStatement
	return p
}

func InitEmptyExpressionStatementContext(p *ExpressionStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_expressionStatement
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStatementContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSEMICOLON, 0)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterExpressionStatement(s)
	}
}

func (s *ExpressionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitExpressionStatement(s)
	}
}

func (s *ExpressionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitExpressionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ExpressionStatement() (localctx IExpressionStatementContext) {
	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, qasm3ParserRULE_expressionStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(450)
		p.expression(0)
	}
	{
		p.SetState(451)
		p.Match(qasm3ParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICalStatementContext is an interface to support dynamic dispatch.
type ICalStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CAL() antlr.TerminalNode
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	CalibrationBlock() antlr.TerminalNode

	// IsCalStatementContext differentiates from other interfaces.
	IsCalStatementContext()
}

type CalStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCalStatementContext() *CalStatementContext {
	var p = new(CalStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_calStatement
	return p
}

func InitEmptyCalStatementContext(p *CalStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_calStatement
}

func (*CalStatementContext) IsCalStatementContext() {}

func NewCalStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CalStatementContext {
	var p = new(CalStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_calStatement

	return p
}

func (s *CalStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CalStatementContext) CAL() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCAL, 0)
}

func (s *CalStatementContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLBRACE, 0)
}

func (s *CalStatementContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRBRACE, 0)
}

func (s *CalStatementContext) CalibrationBlock() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCalibrationBlock, 0)
}

func (s *CalStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CalStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CalStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterCalStatement(s)
	}
}

func (s *CalStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitCalStatement(s)
	}
}

func (s *CalStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitCalStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) CalStatement() (localctx ICalStatementContext) {
	localctx = NewCalStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, qasm3ParserRULE_calStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(453)
		p.Match(qasm3ParserCAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(454)
		p.Match(qasm3ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(456)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserCalibrationBlock {
		{
			p.SetState(455)
			p.Match(qasm3ParserCalibrationBlock)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(458)
		p.Match(qasm3ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefcalStatementContext is an interface to support dynamic dispatch.
type IDefcalStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEFCAL() antlr.TerminalNode
	DefcalTarget() IDefcalTargetContext
	DefcalOperandList() IDefcalOperandListContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	ReturnSignature() IReturnSignatureContext
	CalibrationBlock() antlr.TerminalNode
	DefcalArgumentDefinitionList() IDefcalArgumentDefinitionListContext

	// IsDefcalStatementContext differentiates from other interfaces.
	IsDefcalStatementContext()
}

type DefcalStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefcalStatementContext() *DefcalStatementContext {
	var p = new(DefcalStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defcalStatement
	return p
}

func InitEmptyDefcalStatementContext(p *DefcalStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defcalStatement
}

func (*DefcalStatementContext) IsDefcalStatementContext() {}

func NewDefcalStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefcalStatementContext {
	var p = new(DefcalStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_defcalStatement

	return p
}

func (s *DefcalStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DefcalStatementContext) DEFCAL() antlr.TerminalNode {
	return s.GetToken(qasm3ParserDEFCAL, 0)
}

func (s *DefcalStatementContext) DefcalTarget() IDefcalTargetContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefcalTargetContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefcalTargetContext)
}

func (s *DefcalStatementContext) DefcalOperandList() IDefcalOperandListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefcalOperandListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefcalOperandListContext)
}

func (s *DefcalStatementContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLBRACE, 0)
}

func (s *DefcalStatementContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRBRACE, 0)
}

func (s *DefcalStatementContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLPAREN, 0)
}

func (s *DefcalStatementContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRPAREN, 0)
}

func (s *DefcalStatementContext) ReturnSignature() IReturnSignatureContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturnSignatureContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturnSignatureContext)
}

func (s *DefcalStatementContext) CalibrationBlock() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCalibrationBlock, 0)
}

func (s *DefcalStatementContext) DefcalArgumentDefinitionList() IDefcalArgumentDefinitionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefcalArgumentDefinitionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefcalArgumentDefinitionListContext)
}

func (s *DefcalStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefcalStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefcalStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterDefcalStatement(s)
	}
}

func (s *DefcalStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitDefcalStatement(s)
	}
}

func (s *DefcalStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitDefcalStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) DefcalStatement() (localctx IDefcalStatementContext) {
	localctx = NewDefcalStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, qasm3ParserRULE_defcalStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(460)
		p.Match(qasm3ParserDEFCAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(461)
		p.DefcalTarget()
	}
	p.SetState(467)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserLPAREN {
		{
			p.SetState(462)
			p.Match(qasm3ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(464)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2380183188854013952) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&268179457) != 0) {
			{
				p.SetState(463)
				p.DefcalArgumentDefinitionList()
			}

		}
		{
			p.SetState(466)
			p.Match(qasm3ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(469)
		p.DefcalOperandList()
	}
	p.SetState(471)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserARROW {
		{
			p.SetState(470)
			p.ReturnSignature()
		}

	}
	{
		p.SetState(473)
		p.Match(qasm3ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(475)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserCalibrationBlock {
		{
			p.SetState(474)
			p.Match(qasm3ParserCalibrationBlock)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(477)
		p.Match(qasm3ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_expression
	return p
}

func InitEmptyExpressionContext(p *ExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_expression
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) CopyAll(ctx *ExpressionContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type BitwiseXorExpressionContext struct {
	ExpressionContext
	op antlr.Token
}

func NewBitwiseXorExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitwiseXorExpressionContext {
	var p = new(BitwiseXorExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BitwiseXorExpressionContext) GetOp() antlr.Token { return s.op }

func (s *BitwiseXorExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *BitwiseXorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseXorExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BitwiseXorExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitwiseXorExpressionContext) CARET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCARET, 0)
}

func (s *BitwiseXorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterBitwiseXorExpression(s)
	}
}

func (s *BitwiseXorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitBitwiseXorExpression(s)
	}
}

func (s *BitwiseXorExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitBitwiseXorExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type AdditiveExpressionContext struct {
	ExpressionContext
	op antlr.Token
}

func NewAdditiveExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *AdditiveExpressionContext) GetOp() antlr.Token { return s.op }

func (s *AdditiveExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *AdditiveExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *AdditiveExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AdditiveExpressionContext) PLUS() antlr.TerminalNode {
	return s.GetToken(qasm3ParserPLUS, 0)
}

func (s *AdditiveExpressionContext) MINUS() antlr.TerminalNode {
	return s.GetToken(qasm3ParserMINUS, 0)
}

func (s *AdditiveExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterAdditiveExpression(s)
	}
}

func (s *AdditiveExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitAdditiveExpression(s)
	}
}

func (s *AdditiveExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitAdditiveExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type DurationofExpressionContext struct {
	ExpressionContext
}

func NewDurationofExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DurationofExpressionContext {
	var p = new(DurationofExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *DurationofExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DurationofExpressionContext) DURATIONOF() antlr.TerminalNode {
	return s.GetToken(qasm3ParserDURATIONOF, 0)
}

func (s *DurationofExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLPAREN, 0)
}

func (s *DurationofExpressionContext) Scope() IScopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScopeContext)
}

func (s *DurationofExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRPAREN, 0)
}

func (s *DurationofExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterDurationofExpression(s)
	}
}

func (s *DurationofExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitDurationofExpression(s)
	}
}

func (s *DurationofExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitDurationofExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ParenthesisExpressionContext struct {
	ExpressionContext
}

func NewParenthesisExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenthesisExpressionContext {
	var p = new(ParenthesisExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *ParenthesisExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesisExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLPAREN, 0)
}

func (s *ParenthesisExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenthesisExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRPAREN, 0)
}

func (s *ParenthesisExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterParenthesisExpression(s)
	}
}

func (s *ParenthesisExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitParenthesisExpression(s)
	}
}

func (s *ParenthesisExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitParenthesisExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ComparisonExpressionContext struct {
	ExpressionContext
	op antlr.Token
}

func NewComparisonExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ComparisonExpressionContext {
	var p = new(ComparisonExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *ComparisonExpressionContext) GetOp() antlr.Token { return s.op }

func (s *ComparisonExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *ComparisonExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ComparisonExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ComparisonExpressionContext) ComparisonOperator() antlr.TerminalNode {
	return s.GetToken(qasm3ParserComparisonOperator, 0)
}

func (s *ComparisonExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterComparisonExpression(s)
	}
}

func (s *ComparisonExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitComparisonExpression(s)
	}
}

func (s *ComparisonExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitComparisonExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type MultiplicativeExpressionContext struct {
	ExpressionContext
	op antlr.Token
}

func NewMultiplicativeExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *MultiplicativeExpressionContext) GetOp() antlr.Token { return s.op }

func (s *MultiplicativeExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *MultiplicativeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *MultiplicativeExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MultiplicativeExpressionContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(qasm3ParserASTERISK, 0)
}

func (s *MultiplicativeExpressionContext) SLASH() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSLASH, 0)
}

func (s *MultiplicativeExpressionContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(qasm3ParserPERCENT, 0)
}

func (s *MultiplicativeExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterMultiplicativeExpression(s)
	}
}

func (s *MultiplicativeExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitMultiplicativeExpression(s)
	}
}

func (s *MultiplicativeExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitMultiplicativeExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LogicalOrExpressionContext struct {
	ExpressionContext
	op antlr.Token
}

func NewLogicalOrExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalOrExpressionContext {
	var p = new(LogicalOrExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *LogicalOrExpressionContext) GetOp() antlr.Token { return s.op }

func (s *LogicalOrExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *LogicalOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalOrExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *LogicalOrExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LogicalOrExpressionContext) DOUBLE_PIPE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserDOUBLE_PIPE, 0)
}

func (s *LogicalOrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterLogicalOrExpression(s)
	}
}

func (s *LogicalOrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitLogicalOrExpression(s)
	}
}

func (s *LogicalOrExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitLogicalOrExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type CastExpressionContext struct {
	ExpressionContext
}

func NewCastExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CastExpressionContext {
	var p = new(CastExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *CastExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLPAREN, 0)
}

func (s *CastExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CastExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRPAREN, 0)
}

func (s *CastExpressionContext) ScalarType() IScalarTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScalarTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScalarTypeContext)
}

func (s *CastExpressionContext) ArrayType() IArrayTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayTypeContext)
}

func (s *CastExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterCastExpression(s)
	}
}

func (s *CastExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitCastExpression(s)
	}
}

func (s *CastExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitCastExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type PowerExpressionContext struct {
	ExpressionContext
	op antlr.Token
}

func NewPowerExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PowerExpressionContext {
	var p = new(PowerExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *PowerExpressionContext) GetOp() antlr.Token { return s.op }

func (s *PowerExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *PowerExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PowerExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *PowerExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PowerExpressionContext) DOUBLE_ASTERISK() antlr.TerminalNode {
	return s.GetToken(qasm3ParserDOUBLE_ASTERISK, 0)
}

func (s *PowerExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterPowerExpression(s)
	}
}

func (s *PowerExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitPowerExpression(s)
	}
}

func (s *PowerExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitPowerExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitwiseOrExpressionContext struct {
	ExpressionContext
	op antlr.Token
}

func NewBitwiseOrExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitwiseOrExpressionContext {
	var p = new(BitwiseOrExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BitwiseOrExpressionContext) GetOp() antlr.Token { return s.op }

func (s *BitwiseOrExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *BitwiseOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseOrExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BitwiseOrExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitwiseOrExpressionContext) PIPE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserPIPE, 0)
}

func (s *BitwiseOrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterBitwiseOrExpression(s)
	}
}

func (s *BitwiseOrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitBitwiseOrExpression(s)
	}
}

func (s *BitwiseOrExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitBitwiseOrExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type CallExpressionContext struct {
	ExpressionContext
}

func NewCallExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CallExpressionContext {
	var p = new(CallExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *CallExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *CallExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLPAREN, 0)
}

func (s *CallExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRPAREN, 0)
}

func (s *CallExpressionContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *CallExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterCallExpression(s)
	}
}

func (s *CallExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitCallExpression(s)
	}
}

func (s *CallExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitCallExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitshiftExpressionContext struct {
	ExpressionContext
	op antlr.Token
}

func NewBitshiftExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitshiftExpressionContext {
	var p = new(BitshiftExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BitshiftExpressionContext) GetOp() antlr.Token { return s.op }

func (s *BitshiftExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *BitshiftExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitshiftExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BitshiftExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitshiftExpressionContext) BitshiftOperator() antlr.TerminalNode {
	return s.GetToken(qasm3ParserBitshiftOperator, 0)
}

func (s *BitshiftExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterBitshiftExpression(s)
	}
}

func (s *BitshiftExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitBitshiftExpression(s)
	}
}

func (s *BitshiftExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitBitshiftExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitwiseAndExpressionContext struct {
	ExpressionContext
	op antlr.Token
}

func NewBitwiseAndExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitwiseAndExpressionContext {
	var p = new(BitwiseAndExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BitwiseAndExpressionContext) GetOp() antlr.Token { return s.op }

func (s *BitwiseAndExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *BitwiseAndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseAndExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BitwiseAndExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitwiseAndExpressionContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(qasm3ParserAMPERSAND, 0)
}

func (s *BitwiseAndExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterBitwiseAndExpression(s)
	}
}

func (s *BitwiseAndExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitBitwiseAndExpression(s)
	}
}

func (s *BitwiseAndExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitBitwiseAndExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type EqualityExpressionContext struct {
	ExpressionContext
	op antlr.Token
}

func NewEqualityExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EqualityExpressionContext {
	var p = new(EqualityExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *EqualityExpressionContext) GetOp() antlr.Token { return s.op }

func (s *EqualityExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *EqualityExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *EqualityExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *EqualityExpressionContext) EqualityOperator() antlr.TerminalNode {
	return s.GetToken(qasm3ParserEqualityOperator, 0)
}

func (s *EqualityExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterEqualityExpression(s)
	}
}

func (s *EqualityExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitEqualityExpression(s)
	}
}

func (s *EqualityExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitEqualityExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LogicalAndExpressionContext struct {
	ExpressionContext
	op antlr.Token
}

func NewLogicalAndExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalAndExpressionContext {
	var p = new(LogicalAndExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *LogicalAndExpressionContext) GetOp() antlr.Token { return s.op }

func (s *LogicalAndExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *LogicalAndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalAndExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *LogicalAndExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LogicalAndExpressionContext) DOUBLE_AMPERSAND() antlr.TerminalNode {
	return s.GetToken(qasm3ParserDOUBLE_AMPERSAND, 0)
}

func (s *LogicalAndExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterLogicalAndExpression(s)
	}
}

func (s *LogicalAndExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitLogicalAndExpression(s)
	}
}

func (s *LogicalAndExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitLogicalAndExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type IndexExpressionContext struct {
	ExpressionContext
}

func NewIndexExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexExpressionContext {
	var p = new(IndexExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *IndexExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IndexExpressionContext) IndexOperator() IIndexOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexOperatorContext)
}

func (s *IndexExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterIndexExpression(s)
	}
}

func (s *IndexExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitIndexExpression(s)
	}
}

func (s *IndexExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitIndexExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnaryExpressionContext struct {
	ExpressionContext
	op antlr.Token
}

func NewUnaryExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnaryExpressionContext {
	var p = new(UnaryExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *UnaryExpressionContext) GetOp() antlr.Token { return s.op }

func (s *UnaryExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *UnaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UnaryExpressionContext) TILDE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserTILDE, 0)
}

func (s *UnaryExpressionContext) EXCLAMATION_POINT() antlr.TerminalNode {
	return s.GetToken(qasm3ParserEXCLAMATION_POINT, 0)
}

func (s *UnaryExpressionContext) MINUS() antlr.TerminalNode {
	return s.GetToken(qasm3ParserMINUS, 0)
}

func (s *UnaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterUnaryExpression(s)
	}
}

func (s *UnaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitUnaryExpression(s)
	}
}

func (s *UnaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitUnaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralExpressionContext struct {
	ExpressionContext
}

func NewLiteralExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralExpressionContext {
	var p = new(LiteralExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *LiteralExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *LiteralExpressionContext) BinaryIntegerLiteral() antlr.TerminalNode {
	return s.GetToken(qasm3ParserBinaryIntegerLiteral, 0)
}

func (s *LiteralExpressionContext) OctalIntegerLiteral() antlr.TerminalNode {
	return s.GetToken(qasm3ParserOctalIntegerLiteral, 0)
}

func (s *LiteralExpressionContext) DecimalIntegerLiteral() antlr.TerminalNode {
	return s.GetToken(qasm3ParserDecimalIntegerLiteral, 0)
}

func (s *LiteralExpressionContext) HexIntegerLiteral() antlr.TerminalNode {
	return s.GetToken(qasm3ParserHexIntegerLiteral, 0)
}

func (s *LiteralExpressionContext) FloatLiteral() antlr.TerminalNode {
	return s.GetToken(qasm3ParserFloatLiteral, 0)
}

func (s *LiteralExpressionContext) ImaginaryLiteral() antlr.TerminalNode {
	return s.GetToken(qasm3ParserImaginaryLiteral, 0)
}

func (s *LiteralExpressionContext) BooleanLiteral() antlr.TerminalNode {
	return s.GetToken(qasm3ParserBooleanLiteral, 0)
}

func (s *LiteralExpressionContext) BitstringLiteral() antlr.TerminalNode {
	return s.GetToken(qasm3ParserBitstringLiteral, 0)
}

func (s *LiteralExpressionContext) TimingLiteral() antlr.TerminalNode {
	return s.GetToken(qasm3ParserTimingLiteral, 0)
}

func (s *LiteralExpressionContext) HardwareQubit() antlr.TerminalNode {
	return s.GetToken(qasm3ParserHardwareQubit, 0)
}

func (s *LiteralExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterLiteralExpression(s)
	}
}

func (s *LiteralExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitLiteralExpression(s)
	}
}

func (s *LiteralExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitLiteralExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *qasm3Parser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 76
	p.EnterRecursionRule(localctx, 76, qasm3ParserRULE_expression, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(506)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		localctx = NewParenthesisExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(480)
			p.Match(qasm3ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(481)
			p.expression(0)
		}
		{
			p.SetState(482)
			p.Match(qasm3ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewUnaryExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(484)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*UnaryExpressionContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&6145) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*UnaryExpressionContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(485)
			p.expression(15)
		}

	case 3:
		localctx = NewCastExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(488)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserDURATION, qasm3ParserSTRETCH:
			{
				p.SetState(486)
				p.ScalarType()
			}

		case qasm3ParserARRAY:
			{
				p.SetState(487)
				p.ArrayType()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		{
			p.SetState(490)
			p.Match(qasm3ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(491)
			p.expression(0)
		}
		{
			p.SetState(492)
			p.Match(qasm3ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewDurationofExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(494)
			p.Match(qasm3ParserDURATIONOF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(495)
			p.Match(qasm3ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(496)
			p.Scope()
		}
		{
			p.SetState(497)
			p.Match(qasm3ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewCallExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(499)
			p.Match(qasm3ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(500)
			p.Match(qasm3ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(502)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2380183172211015680) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&268179457) != 0) {
			{
				p.SetState(501)
				p.ExpressionList()
			}

		}
		{
			p.SetState(504)
			p.Match(qasm3ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		localctx = NewLiteralExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(505)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-56)) & ^0x3f) == 0 && ((int64(1)<<(_la-56))&8787503087617) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(545)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(543)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 47, p.GetParserRuleContext()) {
			case 1:
				localctx = NewPowerExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, qasm3ParserRULE_expression)
				p.SetState(508)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
					goto errorExit
				}
				{
					p.SetState(509)

					var _m = p.Match(qasm3ParserDOUBLE_ASTERISK)

					localctx.(*PowerExpressionContext).op = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(510)
					p.expression(16)
				}

			case 2:
				localctx = NewMultiplicativeExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, qasm3ParserRULE_expression)
				p.SetState(511)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
					goto errorExit
				}
				{
					p.SetState(512)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*MultiplicativeExpressionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&13) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*MultiplicativeExpressionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(513)
					p.expression(15)
				}

			case 3:
				localctx = NewAdditiveExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, qasm3ParserRULE_expression)
				p.SetState(514)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
					goto errorExit
				}
				{
					p.SetState(515)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*AdditiveExpressionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == qasm3ParserPLUS || _la == qasm3ParserMINUS) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*AdditiveExpressionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(516)
					p.expression(14)
				}

			case 4:
				localctx = NewBitshiftExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, qasm3ParserRULE_expression)
				p.SetState(517)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
					goto errorExit
				}
				{
					p.SetState(518)

					var _m = p.Match(qasm3ParserBitshiftOperator)

					localctx.(*BitshiftExpressionContext).op = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(519)
					p.expression(13)
				}

			case 5:
				localctx = NewComparisonExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, qasm3ParserRULE_expression)
				p.SetState(520)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
					goto errorExit
				}
				{
					p.SetState(521)

					var _m = p.Match(qasm3ParserComparisonOperator)

					localctx.(*ComparisonExpressionContext).op = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(522)
					p.expression(12)
				}

			case 6:
				localctx = NewEqualityExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, qasm3ParserRULE_expression)
				p.SetState(523)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
					goto errorExit
				}
				{
					p.SetState(524)

					var _m = p.Match(qasm3ParserEqualityOperator)

					localctx.(*EqualityExpressionContext).op = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(525)
					p.expression(11)
				}

			case 7:
				localctx = NewBitwiseAndExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, qasm3ParserRULE_expression)
				p.SetState(526)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
					goto errorExit
				}
				{
					p.SetState(527)

					var _m = p.Match(qasm3ParserAMPERSAND)

					localctx.(*BitwiseAndExpressionContext).op = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(528)
					p.expression(10)
				}

			case 8:
				localctx = NewBitwiseXorExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, qasm3ParserRULE_expression)
				p.SetState(529)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
					goto errorExit
				}
				{
					p.SetState(530)

					var _m = p.Match(qasm3ParserCARET)

					localctx.(*BitwiseXorExpressionContext).op = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(531)
					p.expression(9)
				}

			case 9:
				localctx = NewBitwiseOrExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, qasm3ParserRULE_expression)
				p.SetState(532)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				{
					p.SetState(533)

					var _m = p.Match(qasm3ParserPIPE)

					localctx.(*BitwiseOrExpressionContext).op = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(534)
					p.expression(8)
				}

			case 10:
				localctx = NewLogicalAndExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, qasm3ParserRULE_expression)
				p.SetState(535)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
					goto errorExit
				}
				{
					p.SetState(536)

					var _m = p.Match(qasm3ParserDOUBLE_AMPERSAND)

					localctx.(*LogicalAndExpressionContext).op = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(537)
					p.expression(7)
				}

			case 11:
				localctx = NewLogicalOrExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, qasm3ParserRULE_expression)
				p.SetState(538)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(539)

					var _m = p.Match(qasm3ParserDOUBLE_PIPE)

					localctx.(*LogicalOrExpressionContext).op = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(540)
					p.expression(6)
				}

			case 12:
				localctx = NewIndexExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, qasm3ParserRULE_expression)
				p.SetState(541)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
					goto errorExit
				}
				{
					p.SetState(542)
					p.IndexOperator()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(547)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAliasExpressionContext is an interface to support dynamic dispatch.
type IAliasExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllDOUBLE_PLUS() []antlr.TerminalNode
	DOUBLE_PLUS(i int) antlr.TerminalNode

	// IsAliasExpressionContext differentiates from other interfaces.
	IsAliasExpressionContext()
}

type AliasExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasExpressionContext() *AliasExpressionContext {
	var p = new(AliasExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_aliasExpression
	return p
}

func InitEmptyAliasExpressionContext(p *AliasExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_aliasExpression
}

func (*AliasExpressionContext) IsAliasExpressionContext() {}

func NewAliasExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasExpressionContext {
	var p = new(AliasExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_aliasExpression

	return p
}

func (s *AliasExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *AliasExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AliasExpressionContext) AllDOUBLE_PLUS() []antlr.TerminalNode {
	return s.GetTokens(qasm3ParserDOUBLE_PLUS)
}

func (s *AliasExpressionContext) DOUBLE_PLUS(i int) antlr.TerminalNode {
	return s.GetToken(qasm3ParserDOUBLE_PLUS, i)
}

func (s *AliasExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterAliasExpression(s)
	}
}

func (s *AliasExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitAliasExpression(s)
	}
}

func (s *AliasExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitAliasExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) AliasExpression() (localctx IAliasExpressionContext) {
	localctx = NewAliasExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, qasm3ParserRULE_aliasExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(548)
		p.expression(0)
	}
	p.SetState(553)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == qasm3ParserDOUBLE_PLUS {
		{
			p.SetState(549)
			p.Match(qasm3ParserDOUBLE_PLUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(550)
			p.expression(0)
		}

		p.SetState(555)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeclarationExpressionContext is an interface to support dynamic dispatch.
type IDeclarationExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ArrayLiteral() IArrayLiteralContext
	Expression() IExpressionContext
	MeasureExpression() IMeasureExpressionContext

	// IsDeclarationExpressionContext differentiates from other interfaces.
	IsDeclarationExpressionContext()
}

type DeclarationExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationExpressionContext() *DeclarationExpressionContext {
	var p = new(DeclarationExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_declarationExpression
	return p
}

func InitEmptyDeclarationExpressionContext(p *DeclarationExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_declarationExpression
}

func (*DeclarationExpressionContext) IsDeclarationExpressionContext() {}

func NewDeclarationExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationExpressionContext {
	var p = new(DeclarationExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_declarationExpression

	return p
}

func (s *DeclarationExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationExpressionContext) ArrayLiteral() IArrayLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralContext)
}

func (s *DeclarationExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DeclarationExpressionContext) MeasureExpression() IMeasureExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeasureExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeasureExpressionContext)
}

func (s *DeclarationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterDeclarationExpression(s)
	}
}

func (s *DeclarationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitDeclarationExpression(s)
	}
}

func (s *DeclarationExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitDeclarationExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) DeclarationExpression() (localctx IDeclarationExpressionContext) {
	localctx = NewDeclarationExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, qasm3ParserRULE_declarationExpression)
	p.SetState(559)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserLBRACE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(556)
			p.ArrayLiteral()
		}

	case qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserARRAY, qasm3ParserDURATION, qasm3ParserSTRETCH, qasm3ParserDURATIONOF, qasm3ParserBooleanLiteral, qasm3ParserLPAREN, qasm3ParserMINUS, qasm3ParserTILDE, qasm3ParserEXCLAMATION_POINT, qasm3ParserImaginaryLiteral, qasm3ParserBinaryIntegerLiteral, qasm3ParserOctalIntegerLiteral, qasm3ParserDecimalIntegerLiteral, qasm3ParserHexIntegerLiteral, qasm3ParserIdentifier, qasm3ParserHardwareQubit, qasm3ParserFloatLiteral, qasm3ParserTimingLiteral, qasm3ParserBitstringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(557)
			p.expression(0)
		}

	case qasm3ParserMEASURE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(558)
			p.MeasureExpression()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMeasureExpressionContext is an interface to support dynamic dispatch.
type IMeasureExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MEASURE() antlr.TerminalNode
	GateOperand() IGateOperandContext

	// IsMeasureExpressionContext differentiates from other interfaces.
	IsMeasureExpressionContext()
}

type MeasureExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeasureExpressionContext() *MeasureExpressionContext {
	var p = new(MeasureExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_measureExpression
	return p
}

func InitEmptyMeasureExpressionContext(p *MeasureExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_measureExpression
}

func (*MeasureExpressionContext) IsMeasureExpressionContext() {}

func NewMeasureExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MeasureExpressionContext {
	var p = new(MeasureExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_measureExpression

	return p
}

func (s *MeasureExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MeasureExpressionContext) MEASURE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserMEASURE, 0)
}

func (s *MeasureExpressionContext) GateOperand() IGateOperandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGateOperandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGateOperandContext)
}

func (s *MeasureExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MeasureExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MeasureExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterMeasureExpression(s)
	}
}

func (s *MeasureExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitMeasureExpression(s)
	}
}

func (s *MeasureExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitMeasureExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) MeasureExpression() (localctx IMeasureExpressionContext) {
	localctx = NewMeasureExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, qasm3ParserRULE_measureExpression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(561)
		p.Match(qasm3ParserMEASURE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(562)
		p.GateOperand()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRangeExpressionContext is an interface to support dynamic dispatch.
type IRangeExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllCOLON() []antlr.TerminalNode
	COLON(i int) antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext

	// IsRangeExpressionContext differentiates from other interfaces.
	IsRangeExpressionContext()
}

type RangeExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRangeExpressionContext() *RangeExpressionContext {
	var p = new(RangeExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_rangeExpression
	return p
}

func InitEmptyRangeExpressionContext(p *RangeExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_rangeExpression
}

func (*RangeExpressionContext) IsRangeExpressionContext() {}

func NewRangeExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeExpressionContext {
	var p = new(RangeExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_rangeExpression

	return p
}

func (s *RangeExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeExpressionContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(qasm3ParserCOLON)
}

func (s *RangeExpressionContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOLON, i)
}

func (s *RangeExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *RangeExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RangeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterRangeExpression(s)
	}
}

func (s *RangeExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitRangeExpression(s)
	}
}

func (s *RangeExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitRangeExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) RangeExpression() (localctx IRangeExpressionContext) {
	localctx = NewRangeExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, qasm3ParserRULE_rangeExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(565)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2380183172211015680) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&268179457) != 0) {
		{
			p.SetState(564)
			p.expression(0)
		}

	}
	{
		p.SetState(567)
		p.Match(qasm3ParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(569)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2380183172211015680) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&268179457) != 0) {
		{
			p.SetState(568)
			p.expression(0)
		}

	}
	p.SetState(573)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserCOLON {
		{
			p.SetState(571)
			p.Match(qasm3ParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(572)
			p.expression(0)
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISetExpressionContext is an interface to support dynamic dispatch.
type ISetExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	RBRACE() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSetExpressionContext differentiates from other interfaces.
	IsSetExpressionContext()
}

type SetExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetExpressionContext() *SetExpressionContext {
	var p = new(SetExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_setExpression
	return p
}

func InitEmptySetExpressionContext(p *SetExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_setExpression
}

func (*SetExpressionContext) IsSetExpressionContext() {}

func NewSetExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetExpressionContext {
	var p = new(SetExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_setExpression

	return p
}

func (s *SetExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *SetExpressionContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLBRACE, 0)
}

func (s *SetExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *SetExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetExpressionContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRBRACE, 0)
}

func (s *SetExpressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(qasm3ParserCOMMA)
}

func (s *SetExpressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOMMA, i)
}

func (s *SetExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterSetExpression(s)
	}
}

func (s *SetExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitSetExpression(s)
	}
}

func (s *SetExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitSetExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) SetExpression() (localctx ISetExpressionContext) {
	localctx = NewSetExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, qasm3ParserRULE_setExpression)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(575)
		p.Match(qasm3ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(576)
		p.expression(0)
	}
	p.SetState(581)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 54, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(577)
				p.Match(qasm3ParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(578)
				p.expression(0)
			}

		}
		p.SetState(583)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 54, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(585)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserCOMMA {
		{
			p.SetState(584)
			p.Match(qasm3ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(587)
		p.Match(qasm3ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayLiteralContext is an interface to support dynamic dispatch.
type IArrayLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllArrayLiteral() []IArrayLiteralContext
	ArrayLiteral(i int) IArrayLiteralContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsArrayLiteralContext differentiates from other interfaces.
	IsArrayLiteralContext()
}

type ArrayLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteralContext() *ArrayLiteralContext {
	var p = new(ArrayLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_arrayLiteral
	return p
}

func InitEmptyArrayLiteralContext(p *ArrayLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_arrayLiteral
}

func (*ArrayLiteralContext) IsArrayLiteralContext() {}

func NewArrayLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteralContext {
	var p = new(ArrayLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_arrayLiteral

	return p
}

func (s *ArrayLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteralContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLBRACE, 0)
}

func (s *ArrayLiteralContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRBRACE, 0)
}

func (s *ArrayLiteralContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ArrayLiteralContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayLiteralContext) AllArrayLiteral() []IArrayLiteralContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArrayLiteralContext); ok {
			len++
		}
	}

	tst := make([]IArrayLiteralContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArrayLiteralContext); ok {
			tst[i] = t.(IArrayLiteralContext)
			i++
		}
	}

	return tst
}

func (s *ArrayLiteralContext) ArrayLiteral(i int) IArrayLiteralContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayLiteralContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralContext)
}

func (s *ArrayLiteralContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(qasm3ParserCOMMA)
}

func (s *ArrayLiteralContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOMMA, i)
}

func (s *ArrayLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterArrayLiteral(s)
	}
}

func (s *ArrayLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitArrayLiteral(s)
	}
}

func (s *ArrayLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitArrayLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ArrayLiteral() (localctx IArrayLiteralContext) {
	localctx = NewArrayLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, qasm3ParserRULE_arrayLiteral)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(589)
		p.Match(qasm3ParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(607)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2956643924514439168) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&268179457) != 0) {
		p.SetState(592)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserARRAY, qasm3ParserDURATION, qasm3ParserSTRETCH, qasm3ParserDURATIONOF, qasm3ParserBooleanLiteral, qasm3ParserLPAREN, qasm3ParserMINUS, qasm3ParserTILDE, qasm3ParserEXCLAMATION_POINT, qasm3ParserImaginaryLiteral, qasm3ParserBinaryIntegerLiteral, qasm3ParserOctalIntegerLiteral, qasm3ParserDecimalIntegerLiteral, qasm3ParserHexIntegerLiteral, qasm3ParserIdentifier, qasm3ParserHardwareQubit, qasm3ParserFloatLiteral, qasm3ParserTimingLiteral, qasm3ParserBitstringLiteral:
			{
				p.SetState(590)
				p.expression(0)
			}

		case qasm3ParserLBRACE:
			{
				p.SetState(591)
				p.ArrayLiteral()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		p.SetState(601)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 58, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(594)
					p.Match(qasm3ParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(597)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserARRAY, qasm3ParserDURATION, qasm3ParserSTRETCH, qasm3ParserDURATIONOF, qasm3ParserBooleanLiteral, qasm3ParserLPAREN, qasm3ParserMINUS, qasm3ParserTILDE, qasm3ParserEXCLAMATION_POINT, qasm3ParserImaginaryLiteral, qasm3ParserBinaryIntegerLiteral, qasm3ParserOctalIntegerLiteral, qasm3ParserDecimalIntegerLiteral, qasm3ParserHexIntegerLiteral, qasm3ParserIdentifier, qasm3ParserHardwareQubit, qasm3ParserFloatLiteral, qasm3ParserTimingLiteral, qasm3ParserBitstringLiteral:
					{
						p.SetState(595)
						p.expression(0)
					}

				case qasm3ParserLBRACE:
					{
						p.SetState(596)
						p.ArrayLiteral()
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}

			}
			p.SetState(603)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 58, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(605)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserCOMMA {
			{
				p.SetState(604)
				p.Match(qasm3ParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	}
	{
		p.SetState(609)
		p.Match(qasm3ParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndexOperatorContext is an interface to support dynamic dispatch.
type IIndexOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACKET() antlr.TerminalNode
	RBRACKET() antlr.TerminalNode
	SetExpression() ISetExpressionContext
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllRangeExpression() []IRangeExpressionContext
	RangeExpression(i int) IRangeExpressionContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsIndexOperatorContext differentiates from other interfaces.
	IsIndexOperatorContext()
}

type IndexOperatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexOperatorContext() *IndexOperatorContext {
	var p = new(IndexOperatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_indexOperator
	return p
}

func InitEmptyIndexOperatorContext(p *IndexOperatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_indexOperator
}

func (*IndexOperatorContext) IsIndexOperatorContext() {}

func NewIndexOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexOperatorContext {
	var p = new(IndexOperatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_indexOperator

	return p
}

func (s *IndexOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexOperatorContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLBRACKET, 0)
}

func (s *IndexOperatorContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRBRACKET, 0)
}

func (s *IndexOperatorContext) SetExpression() ISetExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISetExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISetExpressionContext)
}

func (s *IndexOperatorContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *IndexOperatorContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IndexOperatorContext) AllRangeExpression() []IRangeExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRangeExpressionContext); ok {
			len++
		}
	}

	tst := make([]IRangeExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRangeExpressionContext); ok {
			tst[i] = t.(IRangeExpressionContext)
			i++
		}
	}

	return tst
}

func (s *IndexOperatorContext) RangeExpression(i int) IRangeExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRangeExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRangeExpressionContext)
}

func (s *IndexOperatorContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(qasm3ParserCOMMA)
}

func (s *IndexOperatorContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOMMA, i)
}

func (s *IndexOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterIndexOperator(s)
	}
}

func (s *IndexOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitIndexOperator(s)
	}
}

func (s *IndexOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitIndexOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) IndexOperator() (localctx IIndexOperatorContext) {
	localctx = NewIndexOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, qasm3ParserRULE_indexOperator)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(611)
		p.Match(qasm3ParserLBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(630)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserLBRACE:
		{
			p.SetState(612)
			p.SetExpression()
		}

	case qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserARRAY, qasm3ParserDURATION, qasm3ParserSTRETCH, qasm3ParserDURATIONOF, qasm3ParserBooleanLiteral, qasm3ParserLPAREN, qasm3ParserCOLON, qasm3ParserMINUS, qasm3ParserTILDE, qasm3ParserEXCLAMATION_POINT, qasm3ParserImaginaryLiteral, qasm3ParserBinaryIntegerLiteral, qasm3ParserOctalIntegerLiteral, qasm3ParserDecimalIntegerLiteral, qasm3ParserHexIntegerLiteral, qasm3ParserIdentifier, qasm3ParserHardwareQubit, qasm3ParserFloatLiteral, qasm3ParserTimingLiteral, qasm3ParserBitstringLiteral:
		p.SetState(615)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(613)
				p.expression(0)
			}

		case 2:
			{
				p.SetState(614)
				p.RangeExpression()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		p.SetState(624)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(617)
					p.Match(qasm3ParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(620)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 62, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(618)
						p.expression(0)
					}

				case 2:
					{
						p.SetState(619)
						p.RangeExpression()
					}

				case antlr.ATNInvalidAltNumber:
					goto errorExit
				}

			}
			p.SetState(626)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(628)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserCOMMA {
			{
				p.SetState(627)
				p.Match(qasm3ParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(632)
		p.Match(qasm3ParserRBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndexedIdentifierContext is an interface to support dynamic dispatch.
type IIndexedIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	AllIndexOperator() []IIndexOperatorContext
	IndexOperator(i int) IIndexOperatorContext

	// IsIndexedIdentifierContext differentiates from other interfaces.
	IsIndexedIdentifierContext()
}

type IndexedIdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexedIdentifierContext() *IndexedIdentifierContext {
	var p = new(IndexedIdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_indexedIdentifier
	return p
}

func InitEmptyIndexedIdentifierContext(p *IndexedIdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_indexedIdentifier
}

func (*IndexedIdentifierContext) IsIndexedIdentifierContext() {}

func NewIndexedIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexedIdentifierContext {
	var p = new(IndexedIdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_indexedIdentifier

	return p
}

func (s *IndexedIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexedIdentifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *IndexedIdentifierContext) AllIndexOperator() []IIndexOperatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexOperatorContext); ok {
			len++
		}
	}

	tst := make([]IIndexOperatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexOperatorContext); ok {
			tst[i] = t.(IIndexOperatorContext)
			i++
		}
	}

	return tst
}

func (s *IndexedIdentifierContext) IndexOperator(i int) IIndexOperatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexOperatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexOperatorContext)
}

func (s *IndexedIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexedIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexedIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterIndexedIdentifier(s)
	}
}

func (s *IndexedIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitIndexedIdentifier(s)
	}
}

func (s *IndexedIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitIndexedIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) IndexedIdentifier() (localctx IIndexedIdentifierContext) {
	localctx = NewIndexedIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, qasm3ParserRULE_indexedIdentifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(634)
		p.Match(qasm3ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(638)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == qasm3ParserLBRACKET {
		{
			p.SetState(635)
			p.IndexOperator()
		}

		p.SetState(640)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReturnSignatureContext is an interface to support dynamic dispatch.
type IReturnSignatureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARROW() antlr.TerminalNode
	ScalarType() IScalarTypeContext

	// IsReturnSignatureContext differentiates from other interfaces.
	IsReturnSignatureContext()
}

type ReturnSignatureContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnSignatureContext() *ReturnSignatureContext {
	var p = new(ReturnSignatureContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_returnSignature
	return p
}

func InitEmptyReturnSignatureContext(p *ReturnSignatureContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_returnSignature
}

func (*ReturnSignatureContext) IsReturnSignatureContext() {}

func NewReturnSignatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnSignatureContext {
	var p = new(ReturnSignatureContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_returnSignature

	return p
}

func (s *ReturnSignatureContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnSignatureContext) ARROW() antlr.TerminalNode {
	return s.GetToken(qasm3ParserARROW, 0)
}

func (s *ReturnSignatureContext) ScalarType() IScalarTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScalarTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScalarTypeContext)
}

func (s *ReturnSignatureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnSignatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnSignatureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterReturnSignature(s)
	}
}

func (s *ReturnSignatureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitReturnSignature(s)
	}
}

func (s *ReturnSignatureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitReturnSignature(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ReturnSignature() (localctx IReturnSignatureContext) {
	localctx = NewReturnSignatureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, qasm3ParserRULE_returnSignature)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(641)
		p.Match(qasm3ParserARROW)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(642)
		p.ScalarType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGateModifierContext is an interface to support dynamic dispatch.
type IGateModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AT() antlr.TerminalNode
	INV() antlr.TerminalNode
	POW() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	CTRL() antlr.TerminalNode
	NEGCTRL() antlr.TerminalNode

	// IsGateModifierContext differentiates from other interfaces.
	IsGateModifierContext()
}

type GateModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGateModifierContext() *GateModifierContext {
	var p = new(GateModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_gateModifier
	return p
}

func InitEmptyGateModifierContext(p *GateModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_gateModifier
}

func (*GateModifierContext) IsGateModifierContext() {}

func NewGateModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GateModifierContext {
	var p = new(GateModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_gateModifier

	return p
}

func (s *GateModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *GateModifierContext) AT() antlr.TerminalNode {
	return s.GetToken(qasm3ParserAT, 0)
}

func (s *GateModifierContext) INV() antlr.TerminalNode {
	return s.GetToken(qasm3ParserINV, 0)
}

func (s *GateModifierContext) POW() antlr.TerminalNode {
	return s.GetToken(qasm3ParserPOW, 0)
}

func (s *GateModifierContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLPAREN, 0)
}

func (s *GateModifierContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GateModifierContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRPAREN, 0)
}

func (s *GateModifierContext) CTRL() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCTRL, 0)
}

func (s *GateModifierContext) NEGCTRL() antlr.TerminalNode {
	return s.GetToken(qasm3ParserNEGCTRL, 0)
}

func (s *GateModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GateModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GateModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterGateModifier(s)
	}
}

func (s *GateModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitGateModifier(s)
	}
}

func (s *GateModifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitGateModifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) GateModifier() (localctx IGateModifierContext) {
	localctx = NewGateModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, qasm3ParserRULE_gateModifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(657)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserINV:
		{
			p.SetState(644)
			p.Match(qasm3ParserINV)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case qasm3ParserPOW:
		{
			p.SetState(645)
			p.Match(qasm3ParserPOW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(646)
			p.Match(qasm3ParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(647)
			p.expression(0)
		}
		{
			p.SetState(648)
			p.Match(qasm3ParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case qasm3ParserCTRL, qasm3ParserNEGCTRL:
		{
			p.SetState(650)
			_la = p.GetTokenStream().LA(1)

			if !(_la == qasm3ParserCTRL || _la == qasm3ParserNEGCTRL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(655)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserLPAREN {
			{
				p.SetState(651)
				p.Match(qasm3ParserLPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(652)
				p.expression(0)
			}
			{
				p.SetState(653)
				p.Match(qasm3ParserRPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(659)
		p.Match(qasm3ParserAT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IScalarTypeContext is an interface to support dynamic dispatch.
type IScalarTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BIT() antlr.TerminalNode
	Designator() IDesignatorContext
	INT() antlr.TerminalNode
	UINT() antlr.TerminalNode
	FLOAT() antlr.TerminalNode
	ANGLE() antlr.TerminalNode
	BOOL() antlr.TerminalNode
	DURATION() antlr.TerminalNode
	STRETCH() antlr.TerminalNode
	COMPLEX() antlr.TerminalNode
	LBRACKET() antlr.TerminalNode
	ScalarType() IScalarTypeContext
	RBRACKET() antlr.TerminalNode

	// IsScalarTypeContext differentiates from other interfaces.
	IsScalarTypeContext()
}

type ScalarTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScalarTypeContext() *ScalarTypeContext {
	var p = new(ScalarTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_scalarType
	return p
}

func InitEmptyScalarTypeContext(p *ScalarTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_scalarType
}

func (*ScalarTypeContext) IsScalarTypeContext() {}

func NewScalarTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScalarTypeContext {
	var p = new(ScalarTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_scalarType

	return p
}

func (s *ScalarTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ScalarTypeContext) BIT() antlr.TerminalNode {
	return s.GetToken(qasm3ParserBIT, 0)
}

func (s *ScalarTypeContext) Designator() IDesignatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDesignatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDesignatorContext)
}

func (s *ScalarTypeContext) INT() antlr.TerminalNode {
	return s.GetToken(qasm3ParserINT, 0)
}

func (s *ScalarTypeContext) UINT() antlr.TerminalNode {
	return s.GetToken(qasm3ParserUINT, 0)
}

func (s *ScalarTypeContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(qasm3ParserFLOAT, 0)
}

func (s *ScalarTypeContext) ANGLE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserANGLE, 0)
}

func (s *ScalarTypeContext) BOOL() antlr.TerminalNode {
	return s.GetToken(qasm3ParserBOOL, 0)
}

func (s *ScalarTypeContext) DURATION() antlr.TerminalNode {
	return s.GetToken(qasm3ParserDURATION, 0)
}

func (s *ScalarTypeContext) STRETCH() antlr.TerminalNode {
	return s.GetToken(qasm3ParserSTRETCH, 0)
}

func (s *ScalarTypeContext) COMPLEX() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOMPLEX, 0)
}

func (s *ScalarTypeContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLBRACKET, 0)
}

func (s *ScalarTypeContext) ScalarType() IScalarTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScalarTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScalarTypeContext)
}

func (s *ScalarTypeContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRBRACKET, 0)
}

func (s *ScalarTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScalarTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScalarTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterScalarType(s)
	}
}

func (s *ScalarTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitScalarType(s)
	}
}

func (s *ScalarTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitScalarType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ScalarType() (localctx IScalarTypeContext) {
	localctx = NewScalarTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, qasm3ParserRULE_scalarType)
	var _la int

	p.SetState(691)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserBIT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(661)
			p.Match(qasm3ParserBIT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(663)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserLBRACKET {
			{
				p.SetState(662)
				p.Designator()
			}

		}

	case qasm3ParserINT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(665)
			p.Match(qasm3ParserINT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(667)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserLBRACKET {
			{
				p.SetState(666)
				p.Designator()
			}

		}

	case qasm3ParserUINT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(669)
			p.Match(qasm3ParserUINT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(671)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserLBRACKET {
			{
				p.SetState(670)
				p.Designator()
			}

		}

	case qasm3ParserFLOAT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(673)
			p.Match(qasm3ParserFLOAT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(675)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserLBRACKET {
			{
				p.SetState(674)
				p.Designator()
			}

		}

	case qasm3ParserANGLE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(677)
			p.Match(qasm3ParserANGLE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(679)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserLBRACKET {
			{
				p.SetState(678)
				p.Designator()
			}

		}

	case qasm3ParserBOOL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(681)
			p.Match(qasm3ParserBOOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case qasm3ParserDURATION:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(682)
			p.Match(qasm3ParserDURATION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case qasm3ParserSTRETCH:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(683)
			p.Match(qasm3ParserSTRETCH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case qasm3ParserCOMPLEX:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(684)
			p.Match(qasm3ParserCOMPLEX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(689)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserLBRACKET {
			{
				p.SetState(685)
				p.Match(qasm3ParserLBRACKET)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(686)
				p.ScalarType()
			}
			{
				p.SetState(687)
				p.Match(qasm3ParserRBRACKET)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQubitTypeContext is an interface to support dynamic dispatch.
type IQubitTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QUBIT() antlr.TerminalNode
	Designator() IDesignatorContext

	// IsQubitTypeContext differentiates from other interfaces.
	IsQubitTypeContext()
}

type QubitTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQubitTypeContext() *QubitTypeContext {
	var p = new(QubitTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_qubitType
	return p
}

func InitEmptyQubitTypeContext(p *QubitTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_qubitType
}

func (*QubitTypeContext) IsQubitTypeContext() {}

func NewQubitTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QubitTypeContext {
	var p = new(QubitTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_qubitType

	return p
}

func (s *QubitTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *QubitTypeContext) QUBIT() antlr.TerminalNode {
	return s.GetToken(qasm3ParserQUBIT, 0)
}

func (s *QubitTypeContext) Designator() IDesignatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDesignatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDesignatorContext)
}

func (s *QubitTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QubitTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QubitTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterQubitType(s)
	}
}

func (s *QubitTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitQubitType(s)
	}
}

func (s *QubitTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitQubitType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) QubitType() (localctx IQubitTypeContext) {
	localctx = NewQubitTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, qasm3ParserRULE_qubitType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(693)
		p.Match(qasm3ParserQUBIT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(695)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserLBRACKET {
		{
			p.SetState(694)
			p.Designator()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayTypeContext is an interface to support dynamic dispatch.
type IArrayTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY() antlr.TerminalNode
	LBRACKET() antlr.TerminalNode
	ScalarType() IScalarTypeContext
	COMMA() antlr.TerminalNode
	ExpressionList() IExpressionListContext
	RBRACKET() antlr.TerminalNode

	// IsArrayTypeContext differentiates from other interfaces.
	IsArrayTypeContext()
}

type ArrayTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayTypeContext() *ArrayTypeContext {
	var p = new(ArrayTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_arrayType
	return p
}

func InitEmptyArrayTypeContext(p *ArrayTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_arrayType
}

func (*ArrayTypeContext) IsArrayTypeContext() {}

func NewArrayTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayTypeContext {
	var p = new(ArrayTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_arrayType

	return p
}

func (s *ArrayTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayTypeContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(qasm3ParserARRAY, 0)
}

func (s *ArrayTypeContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLBRACKET, 0)
}

func (s *ArrayTypeContext) ScalarType() IScalarTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScalarTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScalarTypeContext)
}

func (s *ArrayTypeContext) COMMA() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOMMA, 0)
}

func (s *ArrayTypeContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ArrayTypeContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRBRACKET, 0)
}

func (s *ArrayTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterArrayType(s)
	}
}

func (s *ArrayTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitArrayType(s)
	}
}

func (s *ArrayTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitArrayType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ArrayType() (localctx IArrayTypeContext) {
	localctx = NewArrayTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, qasm3ParserRULE_arrayType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(697)
		p.Match(qasm3ParserARRAY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(698)
		p.Match(qasm3ParserLBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(699)
		p.ScalarType()
	}
	{
		p.SetState(700)
		p.Match(qasm3ParserCOMMA)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(701)
		p.ExpressionList()
	}
	{
		p.SetState(702)
		p.Match(qasm3ParserRBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayReferenceTypeContext is an interface to support dynamic dispatch.
type IArrayReferenceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY() antlr.TerminalNode
	LBRACKET() antlr.TerminalNode
	ScalarType() IScalarTypeContext
	COMMA() antlr.TerminalNode
	RBRACKET() antlr.TerminalNode
	READONLY() antlr.TerminalNode
	MUTABLE() antlr.TerminalNode
	ExpressionList() IExpressionListContext
	DIM() antlr.TerminalNode
	EQUALS() antlr.TerminalNode
	Expression() IExpressionContext

	// IsArrayReferenceTypeContext differentiates from other interfaces.
	IsArrayReferenceTypeContext()
}

type ArrayReferenceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayReferenceTypeContext() *ArrayReferenceTypeContext {
	var p = new(ArrayReferenceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_arrayReferenceType
	return p
}

func InitEmptyArrayReferenceTypeContext(p *ArrayReferenceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_arrayReferenceType
}

func (*ArrayReferenceTypeContext) IsArrayReferenceTypeContext() {}

func NewArrayReferenceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayReferenceTypeContext {
	var p = new(ArrayReferenceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_arrayReferenceType

	return p
}

func (s *ArrayReferenceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayReferenceTypeContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(qasm3ParserARRAY, 0)
}

func (s *ArrayReferenceTypeContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLBRACKET, 0)
}

func (s *ArrayReferenceTypeContext) ScalarType() IScalarTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScalarTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScalarTypeContext)
}

func (s *ArrayReferenceTypeContext) COMMA() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOMMA, 0)
}

func (s *ArrayReferenceTypeContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRBRACKET, 0)
}

func (s *ArrayReferenceTypeContext) READONLY() antlr.TerminalNode {
	return s.GetToken(qasm3ParserREADONLY, 0)
}

func (s *ArrayReferenceTypeContext) MUTABLE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserMUTABLE, 0)
}

func (s *ArrayReferenceTypeContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ArrayReferenceTypeContext) DIM() antlr.TerminalNode {
	return s.GetToken(qasm3ParserDIM, 0)
}

func (s *ArrayReferenceTypeContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(qasm3ParserEQUALS, 0)
}

func (s *ArrayReferenceTypeContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayReferenceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayReferenceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayReferenceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterArrayReferenceType(s)
	}
}

func (s *ArrayReferenceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitArrayReferenceType(s)
	}
}

func (s *ArrayReferenceTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitArrayReferenceType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ArrayReferenceType() (localctx IArrayReferenceTypeContext) {
	localctx = NewArrayReferenceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, qasm3ParserRULE_arrayReferenceType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(704)
		_la = p.GetTokenStream().LA(1)

		if !(_la == qasm3ParserREADONLY || _la == qasm3ParserMUTABLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(705)
		p.Match(qasm3ParserARRAY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(706)
		p.Match(qasm3ParserLBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(707)
		p.ScalarType()
	}
	{
		p.SetState(708)
		p.Match(qasm3ParserCOMMA)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(713)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserARRAY, qasm3ParserDURATION, qasm3ParserSTRETCH, qasm3ParserDURATIONOF, qasm3ParserBooleanLiteral, qasm3ParserLPAREN, qasm3ParserMINUS, qasm3ParserTILDE, qasm3ParserEXCLAMATION_POINT, qasm3ParserImaginaryLiteral, qasm3ParserBinaryIntegerLiteral, qasm3ParserOctalIntegerLiteral, qasm3ParserDecimalIntegerLiteral, qasm3ParserHexIntegerLiteral, qasm3ParserIdentifier, qasm3ParserHardwareQubit, qasm3ParserFloatLiteral, qasm3ParserTimingLiteral, qasm3ParserBitstringLiteral:
		{
			p.SetState(709)
			p.ExpressionList()
		}

	case qasm3ParserDIM:
		{
			p.SetState(710)
			p.Match(qasm3ParserDIM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(711)
			p.Match(qasm3ParserEQUALS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(712)
			p.expression(0)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(715)
		p.Match(qasm3ParserRBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDesignatorContext is an interface to support dynamic dispatch.
type IDesignatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACKET() antlr.TerminalNode
	Expression() IExpressionContext
	RBRACKET() antlr.TerminalNode

	// IsDesignatorContext differentiates from other interfaces.
	IsDesignatorContext()
}

type DesignatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDesignatorContext() *DesignatorContext {
	var p = new(DesignatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_designator
	return p
}

func InitEmptyDesignatorContext(p *DesignatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_designator
}

func (*DesignatorContext) IsDesignatorContext() {}

func NewDesignatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DesignatorContext {
	var p = new(DesignatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_designator

	return p
}

func (s *DesignatorContext) GetParser() antlr.Parser { return s.parser }

func (s *DesignatorContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserLBRACKET, 0)
}

func (s *DesignatorContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DesignatorContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRBRACKET, 0)
}

func (s *DesignatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DesignatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DesignatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterDesignator(s)
	}
}

func (s *DesignatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitDesignator(s)
	}
}

func (s *DesignatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitDesignator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) Designator() (localctx IDesignatorContext) {
	localctx = NewDesignatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, qasm3ParserRULE_designator)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(717)
		p.Match(qasm3ParserLBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(718)
		p.expression(0)
	}
	{
		p.SetState(719)
		p.Match(qasm3ParserRBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefcalTargetContext is an interface to support dynamic dispatch.
type IDefcalTargetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MEASURE() antlr.TerminalNode
	RESET() antlr.TerminalNode
	DELAY() antlr.TerminalNode
	Identifier() antlr.TerminalNode

	// IsDefcalTargetContext differentiates from other interfaces.
	IsDefcalTargetContext()
}

type DefcalTargetContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefcalTargetContext() *DefcalTargetContext {
	var p = new(DefcalTargetContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defcalTarget
	return p
}

func InitEmptyDefcalTargetContext(p *DefcalTargetContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defcalTarget
}

func (*DefcalTargetContext) IsDefcalTargetContext() {}

func NewDefcalTargetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefcalTargetContext {
	var p = new(DefcalTargetContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_defcalTarget

	return p
}

func (s *DefcalTargetContext) GetParser() antlr.Parser { return s.parser }

func (s *DefcalTargetContext) MEASURE() antlr.TerminalNode {
	return s.GetToken(qasm3ParserMEASURE, 0)
}

func (s *DefcalTargetContext) RESET() antlr.TerminalNode {
	return s.GetToken(qasm3ParserRESET, 0)
}

func (s *DefcalTargetContext) DELAY() antlr.TerminalNode {
	return s.GetToken(qasm3ParserDELAY, 0)
}

func (s *DefcalTargetContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *DefcalTargetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefcalTargetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefcalTargetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterDefcalTarget(s)
	}
}

func (s *DefcalTargetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitDefcalTarget(s)
	}
}

func (s *DefcalTargetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitDefcalTarget(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) DefcalTarget() (localctx IDefcalTargetContext) {
	localctx = NewDefcalTargetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, qasm3ParserRULE_defcalTarget)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(721)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-52)) & ^0x3f) == 0 && ((int64(1)<<(_la-52))&4398046511111) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefcalArgumentDefinitionContext is an interface to support dynamic dispatch.
type IDefcalArgumentDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	ArgumentDefinition() IArgumentDefinitionContext

	// IsDefcalArgumentDefinitionContext differentiates from other interfaces.
	IsDefcalArgumentDefinitionContext()
}

type DefcalArgumentDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefcalArgumentDefinitionContext() *DefcalArgumentDefinitionContext {
	var p = new(DefcalArgumentDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defcalArgumentDefinition
	return p
}

func InitEmptyDefcalArgumentDefinitionContext(p *DefcalArgumentDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defcalArgumentDefinition
}

func (*DefcalArgumentDefinitionContext) IsDefcalArgumentDefinitionContext() {}

func NewDefcalArgumentDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefcalArgumentDefinitionContext {
	var p = new(DefcalArgumentDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_defcalArgumentDefinition

	return p
}

func (s *DefcalArgumentDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *DefcalArgumentDefinitionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DefcalArgumentDefinitionContext) ArgumentDefinition() IArgumentDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentDefinitionContext)
}

func (s *DefcalArgumentDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefcalArgumentDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefcalArgumentDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterDefcalArgumentDefinition(s)
	}
}

func (s *DefcalArgumentDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitDefcalArgumentDefinition(s)
	}
}

func (s *DefcalArgumentDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitDefcalArgumentDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) DefcalArgumentDefinition() (localctx IDefcalArgumentDefinitionContext) {
	localctx = NewDefcalArgumentDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, qasm3ParserRULE_defcalArgumentDefinition)
	p.SetState(725)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 78, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(723)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(724)
			p.ArgumentDefinition()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefcalOperandContext is an interface to support dynamic dispatch.
type IDefcalOperandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	HardwareQubit() antlr.TerminalNode
	Identifier() antlr.TerminalNode

	// IsDefcalOperandContext differentiates from other interfaces.
	IsDefcalOperandContext()
}

type DefcalOperandContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefcalOperandContext() *DefcalOperandContext {
	var p = new(DefcalOperandContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defcalOperand
	return p
}

func InitEmptyDefcalOperandContext(p *DefcalOperandContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defcalOperand
}

func (*DefcalOperandContext) IsDefcalOperandContext() {}

func NewDefcalOperandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefcalOperandContext {
	var p = new(DefcalOperandContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_defcalOperand

	return p
}

func (s *DefcalOperandContext) GetParser() antlr.Parser { return s.parser }

func (s *DefcalOperandContext) HardwareQubit() antlr.TerminalNode {
	return s.GetToken(qasm3ParserHardwareQubit, 0)
}

func (s *DefcalOperandContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *DefcalOperandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefcalOperandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefcalOperandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterDefcalOperand(s)
	}
}

func (s *DefcalOperandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitDefcalOperand(s)
	}
}

func (s *DefcalOperandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitDefcalOperand(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) DefcalOperand() (localctx IDefcalOperandContext) {
	localctx = NewDefcalOperandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, qasm3ParserRULE_defcalOperand)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(727)
		_la = p.GetTokenStream().LA(1)

		if !(_la == qasm3ParserIdentifier || _la == qasm3ParserHardwareQubit) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGateOperandContext is an interface to support dynamic dispatch.
type IGateOperandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IndexedIdentifier() IIndexedIdentifierContext
	HardwareQubit() antlr.TerminalNode

	// IsGateOperandContext differentiates from other interfaces.
	IsGateOperandContext()
}

type GateOperandContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGateOperandContext() *GateOperandContext {
	var p = new(GateOperandContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_gateOperand
	return p
}

func InitEmptyGateOperandContext(p *GateOperandContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_gateOperand
}

func (*GateOperandContext) IsGateOperandContext() {}

func NewGateOperandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GateOperandContext {
	var p = new(GateOperandContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_gateOperand

	return p
}

func (s *GateOperandContext) GetParser() antlr.Parser { return s.parser }

func (s *GateOperandContext) IndexedIdentifier() IIndexedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexedIdentifierContext)
}

func (s *GateOperandContext) HardwareQubit() antlr.TerminalNode {
	return s.GetToken(qasm3ParserHardwareQubit, 0)
}

func (s *GateOperandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GateOperandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GateOperandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterGateOperand(s)
	}
}

func (s *GateOperandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitGateOperand(s)
	}
}

func (s *GateOperandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitGateOperand(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) GateOperand() (localctx IGateOperandContext) {
	localctx = NewGateOperandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, qasm3ParserRULE_gateOperand)
	p.SetState(731)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(729)
			p.IndexedIdentifier()
		}

	case qasm3ParserHardwareQubit:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(730)
			p.Match(qasm3ParserHardwareQubit)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExternArgumentContext is an interface to support dynamic dispatch.
type IExternArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ScalarType() IScalarTypeContext
	ArrayReferenceType() IArrayReferenceTypeContext
	CREG() antlr.TerminalNode
	Designator() IDesignatorContext

	// IsExternArgumentContext differentiates from other interfaces.
	IsExternArgumentContext()
}

type ExternArgumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternArgumentContext() *ExternArgumentContext {
	var p = new(ExternArgumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_externArgument
	return p
}

func InitEmptyExternArgumentContext(p *ExternArgumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_externArgument
}

func (*ExternArgumentContext) IsExternArgumentContext() {}

func NewExternArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExternArgumentContext {
	var p = new(ExternArgumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_externArgument

	return p
}

func (s *ExternArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *ExternArgumentContext) ScalarType() IScalarTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScalarTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScalarTypeContext)
}

func (s *ExternArgumentContext) ArrayReferenceType() IArrayReferenceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayReferenceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayReferenceTypeContext)
}

func (s *ExternArgumentContext) CREG() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCREG, 0)
}

func (s *ExternArgumentContext) Designator() IDesignatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDesignatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDesignatorContext)
}

func (s *ExternArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExternArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExternArgumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterExternArgument(s)
	}
}

func (s *ExternArgumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitExternArgument(s)
	}
}

func (s *ExternArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitExternArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ExternArgument() (localctx IExternArgumentContext) {
	localctx = NewExternArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, qasm3ParserRULE_externArgument)
	var _la int

	p.SetState(739)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserDURATION, qasm3ParserSTRETCH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(733)
			p.ScalarType()
		}

	case qasm3ParserREADONLY, qasm3ParserMUTABLE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(734)
			p.ArrayReferenceType()
		}

	case qasm3ParserCREG:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(735)
			p.Match(qasm3ParserCREG)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(737)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserLBRACKET {
			{
				p.SetState(736)
				p.Designator()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArgumentDefinitionContext is an interface to support dynamic dispatch.
type IArgumentDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ScalarType() IScalarTypeContext
	Identifier() antlr.TerminalNode
	QubitType() IQubitTypeContext
	CREG() antlr.TerminalNode
	QREG() antlr.TerminalNode
	Designator() IDesignatorContext
	ArrayReferenceType() IArrayReferenceTypeContext

	// IsArgumentDefinitionContext differentiates from other interfaces.
	IsArgumentDefinitionContext()
}

type ArgumentDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentDefinitionContext() *ArgumentDefinitionContext {
	var p = new(ArgumentDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_argumentDefinition
	return p
}

func InitEmptyArgumentDefinitionContext(p *ArgumentDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_argumentDefinition
}

func (*ArgumentDefinitionContext) IsArgumentDefinitionContext() {}

func NewArgumentDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentDefinitionContext {
	var p = new(ArgumentDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_argumentDefinition

	return p
}

func (s *ArgumentDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentDefinitionContext) ScalarType() IScalarTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScalarTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScalarTypeContext)
}

func (s *ArgumentDefinitionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, 0)
}

func (s *ArgumentDefinitionContext) QubitType() IQubitTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQubitTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQubitTypeContext)
}

func (s *ArgumentDefinitionContext) CREG() antlr.TerminalNode {
	return s.GetToken(qasm3ParserCREG, 0)
}

func (s *ArgumentDefinitionContext) QREG() antlr.TerminalNode {
	return s.GetToken(qasm3ParserQREG, 0)
}

func (s *ArgumentDefinitionContext) Designator() IDesignatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDesignatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDesignatorContext)
}

func (s *ArgumentDefinitionContext) ArrayReferenceType() IArrayReferenceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayReferenceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayReferenceTypeContext)
}

func (s *ArgumentDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterArgumentDefinition(s)
	}
}

func (s *ArgumentDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitArgumentDefinition(s)
	}
}

func (s *ArgumentDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitArgumentDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ArgumentDefinition() (localctx IArgumentDefinitionContext) {
	localctx = NewArgumentDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, qasm3ParserRULE_argumentDefinition)
	var _la int

	p.SetState(755)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case qasm3ParserBOOL, qasm3ParserBIT, qasm3ParserINT, qasm3ParserUINT, qasm3ParserFLOAT, qasm3ParserANGLE, qasm3ParserCOMPLEX, qasm3ParserDURATION, qasm3ParserSTRETCH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(741)
			p.ScalarType()
		}
		{
			p.SetState(742)
			p.Match(qasm3ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case qasm3ParserQUBIT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(744)
			p.QubitType()
		}
		{
			p.SetState(745)
			p.Match(qasm3ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case qasm3ParserQREG, qasm3ParserCREG:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(747)
			_la = p.GetTokenStream().LA(1)

			if !(_la == qasm3ParserQREG || _la == qasm3ParserCREG) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(748)
			p.Match(qasm3ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(750)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == qasm3ParserLBRACKET {
			{
				p.SetState(749)
				p.Designator()
			}

		}

	case qasm3ParserREADONLY, qasm3ParserMUTABLE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(752)
			p.ArrayReferenceType()
		}
		{
			p.SetState(753)
			p.Match(qasm3ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArgumentDefinitionListContext is an interface to support dynamic dispatch.
type IArgumentDefinitionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllArgumentDefinition() []IArgumentDefinitionContext
	ArgumentDefinition(i int) IArgumentDefinitionContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsArgumentDefinitionListContext differentiates from other interfaces.
	IsArgumentDefinitionListContext()
}

type ArgumentDefinitionListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentDefinitionListContext() *ArgumentDefinitionListContext {
	var p = new(ArgumentDefinitionListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_argumentDefinitionList
	return p
}

func InitEmptyArgumentDefinitionListContext(p *ArgumentDefinitionListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_argumentDefinitionList
}

func (*ArgumentDefinitionListContext) IsArgumentDefinitionListContext() {}

func NewArgumentDefinitionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentDefinitionListContext {
	var p = new(ArgumentDefinitionListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_argumentDefinitionList

	return p
}

func (s *ArgumentDefinitionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentDefinitionListContext) AllArgumentDefinition() []IArgumentDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArgumentDefinitionContext); ok {
			len++
		}
	}

	tst := make([]IArgumentDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArgumentDefinitionContext); ok {
			tst[i] = t.(IArgumentDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *ArgumentDefinitionListContext) ArgumentDefinition(i int) IArgumentDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentDefinitionContext)
}

func (s *ArgumentDefinitionListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(qasm3ParserCOMMA)
}

func (s *ArgumentDefinitionListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOMMA, i)
}

func (s *ArgumentDefinitionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentDefinitionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentDefinitionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterArgumentDefinitionList(s)
	}
}

func (s *ArgumentDefinitionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitArgumentDefinitionList(s)
	}
}

func (s *ArgumentDefinitionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitArgumentDefinitionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ArgumentDefinitionList() (localctx IArgumentDefinitionListContext) {
	localctx = NewArgumentDefinitionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, qasm3ParserRULE_argumentDefinitionList)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(757)
		p.ArgumentDefinition()
	}
	p.SetState(762)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(758)
				p.Match(qasm3ParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(759)
				p.ArgumentDefinition()
			}

		}
		p.SetState(764)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(766)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserCOMMA {
		{
			p.SetState(765)
			p.Match(qasm3ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefcalArgumentDefinitionListContext is an interface to support dynamic dispatch.
type IDefcalArgumentDefinitionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDefcalArgumentDefinition() []IDefcalArgumentDefinitionContext
	DefcalArgumentDefinition(i int) IDefcalArgumentDefinitionContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsDefcalArgumentDefinitionListContext differentiates from other interfaces.
	IsDefcalArgumentDefinitionListContext()
}

type DefcalArgumentDefinitionListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefcalArgumentDefinitionListContext() *DefcalArgumentDefinitionListContext {
	var p = new(DefcalArgumentDefinitionListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defcalArgumentDefinitionList
	return p
}

func InitEmptyDefcalArgumentDefinitionListContext(p *DefcalArgumentDefinitionListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defcalArgumentDefinitionList
}

func (*DefcalArgumentDefinitionListContext) IsDefcalArgumentDefinitionListContext() {}

func NewDefcalArgumentDefinitionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefcalArgumentDefinitionListContext {
	var p = new(DefcalArgumentDefinitionListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_defcalArgumentDefinitionList

	return p
}

func (s *DefcalArgumentDefinitionListContext) GetParser() antlr.Parser { return s.parser }

func (s *DefcalArgumentDefinitionListContext) AllDefcalArgumentDefinition() []IDefcalArgumentDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDefcalArgumentDefinitionContext); ok {
			len++
		}
	}

	tst := make([]IDefcalArgumentDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDefcalArgumentDefinitionContext); ok {
			tst[i] = t.(IDefcalArgumentDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *DefcalArgumentDefinitionListContext) DefcalArgumentDefinition(i int) IDefcalArgumentDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefcalArgumentDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefcalArgumentDefinitionContext)
}

func (s *DefcalArgumentDefinitionListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(qasm3ParserCOMMA)
}

func (s *DefcalArgumentDefinitionListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOMMA, i)
}

func (s *DefcalArgumentDefinitionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefcalArgumentDefinitionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefcalArgumentDefinitionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterDefcalArgumentDefinitionList(s)
	}
}

func (s *DefcalArgumentDefinitionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitDefcalArgumentDefinitionList(s)
	}
}

func (s *DefcalArgumentDefinitionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitDefcalArgumentDefinitionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) DefcalArgumentDefinitionList() (localctx IDefcalArgumentDefinitionListContext) {
	localctx = NewDefcalArgumentDefinitionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, qasm3ParserRULE_defcalArgumentDefinitionList)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(768)
		p.DefcalArgumentDefinition()
	}
	p.SetState(773)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 86, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(769)
				p.Match(qasm3ParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(770)
				p.DefcalArgumentDefinition()
			}

		}
		p.SetState(775)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 86, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(777)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserCOMMA {
		{
			p.SetState(776)
			p.Match(qasm3ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefcalOperandListContext is an interface to support dynamic dispatch.
type IDefcalOperandListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDefcalOperand() []IDefcalOperandContext
	DefcalOperand(i int) IDefcalOperandContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsDefcalOperandListContext differentiates from other interfaces.
	IsDefcalOperandListContext()
}

type DefcalOperandListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefcalOperandListContext() *DefcalOperandListContext {
	var p = new(DefcalOperandListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defcalOperandList
	return p
}

func InitEmptyDefcalOperandListContext(p *DefcalOperandListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_defcalOperandList
}

func (*DefcalOperandListContext) IsDefcalOperandListContext() {}

func NewDefcalOperandListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefcalOperandListContext {
	var p = new(DefcalOperandListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_defcalOperandList

	return p
}

func (s *DefcalOperandListContext) GetParser() antlr.Parser { return s.parser }

func (s *DefcalOperandListContext) AllDefcalOperand() []IDefcalOperandContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDefcalOperandContext); ok {
			len++
		}
	}

	tst := make([]IDefcalOperandContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDefcalOperandContext); ok {
			tst[i] = t.(IDefcalOperandContext)
			i++
		}
	}

	return tst
}

func (s *DefcalOperandListContext) DefcalOperand(i int) IDefcalOperandContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefcalOperandContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefcalOperandContext)
}

func (s *DefcalOperandListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(qasm3ParserCOMMA)
}

func (s *DefcalOperandListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOMMA, i)
}

func (s *DefcalOperandListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefcalOperandListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefcalOperandListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterDefcalOperandList(s)
	}
}

func (s *DefcalOperandListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitDefcalOperandList(s)
	}
}

func (s *DefcalOperandListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitDefcalOperandList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) DefcalOperandList() (localctx IDefcalOperandListContext) {
	localctx = NewDefcalOperandListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, qasm3ParserRULE_defcalOperandList)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(779)
		p.DefcalOperand()
	}
	p.SetState(784)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 88, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(780)
				p.Match(qasm3ParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(781)
				p.DefcalOperand()
			}

		}
		p.SetState(786)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 88, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(788)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserCOMMA {
		{
			p.SetState(787)
			p.Match(qasm3ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_expressionList
	return p
}

func InitEmptyExpressionListContext(p *ExpressionListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_expressionList
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(qasm3ParserCOMMA)
}

func (s *ExpressionListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOMMA, i)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterExpressionList(s)
	}
}

func (s *ExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitExpressionList(s)
	}
}

func (s *ExpressionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitExpressionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, qasm3ParserRULE_expressionList)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(790)
		p.expression(0)
	}
	p.SetState(795)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 90, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(791)
				p.Match(qasm3ParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(792)
				p.expression(0)
			}

		}
		p.SetState(797)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 90, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(799)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserCOMMA {
		{
			p.SetState(798)
			p.Match(qasm3ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierListContext is an interface to support dynamic dispatch.
type IIdentifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []antlr.TerminalNode
	Identifier(i int) antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsIdentifierListContext differentiates from other interfaces.
	IsIdentifierListContext()
}

type IdentifierListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierListContext() *IdentifierListContext {
	var p = new(IdentifierListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_identifierList
	return p
}

func InitEmptyIdentifierListContext(p *IdentifierListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_identifierList
}

func (*IdentifierListContext) IsIdentifierListContext() {}

func NewIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierListContext {
	var p = new(IdentifierListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_identifierList

	return p
}

func (s *IdentifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierListContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(qasm3ParserIdentifier)
}

func (s *IdentifierListContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(qasm3ParserIdentifier, i)
}

func (s *IdentifierListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(qasm3ParserCOMMA)
}

func (s *IdentifierListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOMMA, i)
}

func (s *IdentifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterIdentifierList(s)
	}
}

func (s *IdentifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitIdentifierList(s)
	}
}

func (s *IdentifierListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitIdentifierList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) IdentifierList() (localctx IIdentifierListContext) {
	localctx = NewIdentifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, qasm3ParserRULE_identifierList)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(801)
		p.Match(qasm3ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(806)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 92, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(802)
				p.Match(qasm3ParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(803)
				p.Match(qasm3ParserIdentifier)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(808)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 92, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(810)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserCOMMA {
		{
			p.SetState(809)
			p.Match(qasm3ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGateOperandListContext is an interface to support dynamic dispatch.
type IGateOperandListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllGateOperand() []IGateOperandContext
	GateOperand(i int) IGateOperandContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsGateOperandListContext differentiates from other interfaces.
	IsGateOperandListContext()
}

type GateOperandListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGateOperandListContext() *GateOperandListContext {
	var p = new(GateOperandListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_gateOperandList
	return p
}

func InitEmptyGateOperandListContext(p *GateOperandListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_gateOperandList
}

func (*GateOperandListContext) IsGateOperandListContext() {}

func NewGateOperandListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GateOperandListContext {
	var p = new(GateOperandListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_gateOperandList

	return p
}

func (s *GateOperandListContext) GetParser() antlr.Parser { return s.parser }

func (s *GateOperandListContext) AllGateOperand() []IGateOperandContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGateOperandContext); ok {
			len++
		}
	}

	tst := make([]IGateOperandContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGateOperandContext); ok {
			tst[i] = t.(IGateOperandContext)
			i++
		}
	}

	return tst
}

func (s *GateOperandListContext) GateOperand(i int) IGateOperandContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGateOperandContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGateOperandContext)
}

func (s *GateOperandListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(qasm3ParserCOMMA)
}

func (s *GateOperandListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOMMA, i)
}

func (s *GateOperandListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GateOperandListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GateOperandListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterGateOperandList(s)
	}
}

func (s *GateOperandListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitGateOperandList(s)
	}
}

func (s *GateOperandListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitGateOperandList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) GateOperandList() (localctx IGateOperandListContext) {
	localctx = NewGateOperandListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, qasm3ParserRULE_gateOperandList)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(812)
		p.GateOperand()
	}
	p.SetState(817)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 94, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(813)
				p.Match(qasm3ParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(814)
				p.GateOperand()
			}

		}
		p.SetState(819)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 94, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(821)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserCOMMA {
		{
			p.SetState(820)
			p.Match(qasm3ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExternArgumentListContext is an interface to support dynamic dispatch.
type IExternArgumentListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExternArgument() []IExternArgumentContext
	ExternArgument(i int) IExternArgumentContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsExternArgumentListContext differentiates from other interfaces.
	IsExternArgumentListContext()
}

type ExternArgumentListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternArgumentListContext() *ExternArgumentListContext {
	var p = new(ExternArgumentListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_externArgumentList
	return p
}

func InitEmptyExternArgumentListContext(p *ExternArgumentListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = qasm3ParserRULE_externArgumentList
}

func (*ExternArgumentListContext) IsExternArgumentListContext() {}

func NewExternArgumentListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExternArgumentListContext {
	var p = new(ExternArgumentListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = qasm3ParserRULE_externArgumentList

	return p
}

func (s *ExternArgumentListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExternArgumentListContext) AllExternArgument() []IExternArgumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExternArgumentContext); ok {
			len++
		}
	}

	tst := make([]IExternArgumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExternArgumentContext); ok {
			tst[i] = t.(IExternArgumentContext)
			i++
		}
	}

	return tst
}

func (s *ExternArgumentListContext) ExternArgument(i int) IExternArgumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternArgumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternArgumentContext)
}

func (s *ExternArgumentListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(qasm3ParserCOMMA)
}

func (s *ExternArgumentListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(qasm3ParserCOMMA, i)
}

func (s *ExternArgumentListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExternArgumentListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExternArgumentListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.EnterExternArgumentList(s)
	}
}

func (s *ExternArgumentListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(qasm3ParserListener); ok {
		listenerT.ExitExternArgumentList(s)
	}
}

func (s *ExternArgumentListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case qasm3ParserVisitor:
		return t.VisitExternArgumentList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *qasm3Parser) ExternArgumentList() (localctx IExternArgumentListContext) {
	localctx = NewExternArgumentListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, qasm3ParserRULE_externArgumentList)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(823)
		p.ExternArgument()
	}
	p.SetState(828)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 96, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(824)
				p.Match(qasm3ParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(825)
				p.ExternArgument()
			}

		}
		p.SetState(830)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 96, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(832)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == qasm3ParserCOMMA {
		{
			p.SetState(831)
			p.Match(qasm3ParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *qasm3Parser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 38:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *qasm3Parser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 17)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
